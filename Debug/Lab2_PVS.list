
Lab2_PVS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  200001e0  08004ff0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08004ff0  00020658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aac1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001926  00000000  00000000  0002acd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  0002c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  0002cd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228ea  00000000  00000000  0002d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e30  00000000  00000000  0004fd92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0367  00000000  00000000  00057bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  00127fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080048d8 	.word	0x080048d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080048d8 	.word	0x080048d8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_GPIO_Init+0xf0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a34      	ldr	r2, [pc, #208]	; (80006b0 <MX_GPIO_Init+0xf0>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xf0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a2d      	ldr	r2, [pc, #180]	; (80006b0 <MX_GPIO_Init+0xf0>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a26      	ldr	r2, [pc, #152]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0xf0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_GPIO_Init+0xf0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_GPIO_Init+0xf0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_GPIO_Init+0xf4>)
 800066a:	f001 fad3 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800066e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_GPIO_Init+0xf8>)
 8000684:	f001 f904 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000688:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80006a2:	f001 f8f5 	bl	8001890 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020c00 	.word	0x40020c00
 80006b8:	40020800 	.word	0x40020800

080006bc <set_green_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void set_green_led(bool on) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	461a      	mov	r2, r3
 80006ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <set_green_led+0x20>)
 80006d0:	f001 faa0 	bl	8001c14 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <set_yellow_led>:

static void set_yellow_led(bool on) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	461a      	mov	r2, r3
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <set_yellow_led+0x20>)
 80006f4:	f001 fa8e 	bl	8001c14 <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020c00 	.word	0x40020c00

08000704 <set_red_led>:

static void set_red_led(bool on) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	461a      	mov	r2, r3
 8000712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <set_red_led+0x20>)
 8000718:	f001 fa7c 	bl	8001c14 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020c00 	.word	0x40020c00

08000728 <is_btn_clicked>:

static int is_btn_clicked(uint32_t * lastPressTime) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	// reset = pressed

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET && HAL_GetTick() - *lastPressTime > 1000) {
 8000730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <is_btn_clicked+0x44>)
 8000736:	f001 fa55 	bl	8001be4 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10f      	bne.n	8000760 <is_btn_clicked+0x38>
 8000740:	f000 fef6 	bl	8001530 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000750:	d906      	bls.n	8000760 <is_btn_clicked+0x38>
		*lastPressTime = HAL_GetTick();
 8000752:	f000 feed 	bl	8001530 <HAL_GetTick>
 8000756:	4602      	mov	r2, r0
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]

		return 1;
 800075c:	2301      	movs	r3, #1
 800075e:	e000      	b.n	8000762 <is_btn_clicked+0x3a>
	}

	return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020800 	.word	0x40020800

08000770 <set_no_one_led>:

static void set_no_one_led(bool on) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    // do nothing
    (void) on;
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <send_uart_message>:

static char received_char;
static bool is_char_received = false;
static bool is_transmitted = true;

static void send_uart_message(struct state * state, const char * content, uint32_t length) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
	if (state->use_interrupt) {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 800079a:	2b00      	cmp	r3, #0
 800079c:	d012      	beq.n	80007c4 <send_uart_message+0x3c>
		while (!is_transmitted);
 800079e:	bf00      	nop
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <send_uart_message+0x54>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	f083 0301 	eor.w	r3, r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <send_uart_message+0x18>

		is_transmitted = false;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <send_uart_message+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart6, (void *) content, length);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <send_uart_message+0x58>)
 80007be:	f002 f808 	bl	80027d2 <HAL_UART_Transmit_IT>
	} else {
		HAL_UART_Transmit(&huart6, (void *) content, length, UART_TIMEOUT);
	}
}
 80007c2:	e006      	b.n	80007d2 <send_uart_message+0x4a>
		HAL_UART_Transmit(&huart6, (void *) content, length, UART_TIMEOUT);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	230a      	movs	r3, #10
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <send_uart_message+0x58>)
 80007ce:	f001 fecc 	bl	800256a <HAL_UART_Transmit>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000
 80007e0:	2000060c 	.word	0x2000060c

080007e4 <send_uart_message_string>:

static inline void send_uart_message_string(struct state * state, const char * message) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	send_uart_message(state, message, strlen(message));
 80007ee:	6838      	ldr	r0, [r7, #0]
 80007f0:	f7ff fd08 	bl	8000204 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffc4 	bl	8000788 <send_uart_message>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <send_uart_message_string_nl>:

static void send_uart_message_string_nl(struct state * state, const char * message) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	send_uart_message_string(state, message);
 8000812:	6839      	ldr	r1, [r7, #0]
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ffe5 	bl	80007e4 <send_uart_message_string>
	send_uart_message(state, "\r\n", 2);
 800081a:	2202      	movs	r2, #2
 800081c:	4903      	ldr	r1, [pc, #12]	; (800082c <send_uart_message_string_nl+0x24>)
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb2 	bl	8000788 <send_uart_message>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	080048f0 	.word	0x080048f0

08000830 <send_uart_message_format>:

static void send_uart_message_format(struct state * state, const char * format, ...) {
 8000830:	b40e      	push	{r1, r2, r3}
 8000832:	b580      	push	{r7, lr}
 8000834:	b085      	sub	sp, #20
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	static char buffer[1024];

	if (state->use_interrupt) {
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <send_uart_message_format+0x24>
		while (!is_transmitted);
 8000844:	bf00      	nop
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <send_uart_message_format+0x50>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f8      	bne.n	8000846 <send_uart_message_format+0x16>
	}

	va_list ap;
	va_start(ap, format);
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	60fb      	str	r3, [r7, #12]
	vsnprintf(buffer, sizeof(buffer), format, ap);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <send_uart_message_format+0x54>)
 8000864:	f002 ffb8 	bl	80037d8 <vsniprintf>
	va_end(ap);

	send_uart_message_string(state, buffer);
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <send_uart_message_format+0x54>)
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffba 	bl	80007e4 <send_uart_message_string>
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800087a:	b003      	add	sp, #12
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000
 8000884:	20000200 	.word	0x20000200

08000888 <string_equals>:

static bool string_equals(const char * a, const char * b) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	return strcmp(a, b) == 0;
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fcab 	bl	80001f0 <strcmp>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <starts_with>:

static bool starts_with(const char * prefix, const char * str) {
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
	return strncmp(prefix, str, strlen(prefix)) == 0;
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fca3 	bl	8000204 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	6839      	ldr	r1, [r7, #0]
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f002 ff49 	bl	800375c <strncmp>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <normalize_command_line>:

static void normalize_command_line(char * command_line) {
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	uint32_t length = strlen(command_line);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fc8c 	bl	8000204 <strlen>
 80008ec:	60b8      	str	r0, [r7, #8]

	uint32_t j = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
	bool prev_space = true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	74fb      	strb	r3, [r7, #19]
	for (uint32_t i = 0; i < length; ++i) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e029      	b.n	8000950 <normalize_command_line+0x72>
		if (isspace(command_line[i])) {
 80008fc:	f002 fece 	bl	800369c <__locale_ctype_ptr>
 8000900:	4601      	mov	r1, r0
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	440b      	add	r3, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00a      	beq.n	800092e <normalize_command_line+0x50>
			if (prev_space) {
 8000918:	7cfb      	ldrb	r3, [r7, #19]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d114      	bne.n	8000948 <normalize_command_line+0x6a>
				continue;
			} else {
				prev_space = true;
 800091e:	2301      	movs	r3, #1
 8000920:	74fb      	strb	r3, [r7, #19]
				command_line[i] = ' ';
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	2220      	movs	r2, #32
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e001      	b.n	8000932 <normalize_command_line+0x54>
			}
		} else {
			prev_space = false;
 800092e:	2300      	movs	r3, #0
 8000930:	74fb      	strb	r3, [r7, #19]
		}

		command_line[j++] = command_line[i];
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	441a      	add	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	1c59      	adds	r1, r3, #1
 800093c:	6179      	str	r1, [r7, #20]
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	440b      	add	r3, r1
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e000      	b.n	800094a <normalize_command_line+0x6c>
				continue;
 8000948:	bf00      	nop
	for (uint32_t i = 0; i < length; ++i) {
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3301      	adds	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3d1      	bcc.n	80008fc <normalize_command_line+0x1e>
	}

	if (prev_space) {
 8000958:	7cfb      	ldrb	r3, [r7, #19]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d012      	beq.n	8000984 <normalize_command_line+0xa6>
		while (isspace(command_line[j - 1])) {
 800095e:	e002      	b.n	8000966 <normalize_command_line+0x88>
			--j;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3b01      	subs	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
		while (isspace(command_line[j - 1])) {
 8000966:	f002 fe99 	bl	800369c <__locale_ctype_ptr>
 800096a:	4601      	mov	r1, r0
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3b01      	subs	r3, #1
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	440b      	add	r3, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1ed      	bne.n	8000960 <normalize_command_line+0x82>
		}
	}

	command_line[j] = '\0';
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4413      	add	r3, r2
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <set_active_mode>:

static void set_active_mode(struct state * state, uint8_t idx) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	led_functions[state->modes[state->i].states[state->state[state->i]].led](false);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 80009aa:	4618      	mov	r0, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 80009b2:	461a      	mov	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	00d9      	lsls	r1, r3, #3
 80009c0:	4603      	mov	r3, r0
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4403      	add	r3, r0
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	4413      	add	r3, r2
 80009cc:	3308      	adds	r3, #8
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <set_active_mode+0xa8>)
 80009d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d8:	2000      	movs	r0, #0
 80009da:	4798      	blx	r3

	state->i = idx;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	78fa      	ldrb	r2, [r7, #3]
 80009e0:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225

	if (state->modes[state->i].states_n > 0) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 80009ea:	4619      	mov	r1, r3
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	440b      	add	r3, r1
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	3304      	adds	r3, #4
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01b      	beq.n	8000a38 <set_active_mode+0xa0>
		led_functions[state->modes[state->i].states[state->state[state->i]].led](true);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 8000a06:	4618      	mov	r0, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	00d9      	lsls	r1, r3, #3
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	4403      	add	r3, r0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	4413      	add	r3, r2
 8000a28:	3308      	adds	r3, #8
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <set_active_mode+0xa8>)
 8000a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a34:	2001      	movs	r0, #1
 8000a36:	4798      	blx	r3
	}
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	080049f8 	.word	0x080049f8

08000a44 <handle_set_command>:

static bool handle_set_command(struct state * state) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	const char * const mode_idx_str = state->command_line + 4;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000a52:	3304      	adds	r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
	uint32_t mode_idx;

	if (sscanf(mode_idx_str, "%lu", &mode_idx) != 1) {
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4910      	ldr	r1, [pc, #64]	; (8000aa0 <handle_set_command+0x5c>)
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f002 fe50 	bl	8003704 <siscanf>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d001      	beq.n	8000a6e <handle_set_command+0x2a>
		return false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e013      	b.n	8000a96 <handle_set_command+0x52>
	}

	if (mode_idx < 1 || mode_idx > state->modes_n) {
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <handle_set_command+0x3c>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d201      	bcs.n	8000a84 <handle_set_command+0x40>
		return false;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e008      	b.n	8000a96 <handle_set_command+0x52>
	}

	set_active_mode(state, mode_idx - 1);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff82 	bl	8000998 <set_active_mode>
	return true;
 8000a94:	2301      	movs	r3, #1
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080048f4 	.word	0x080048f4

08000aa4 <handle_new_command>:

static bool handle_new_command(struct state * state) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	const char * const pattern = state->command_line + 4;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	613b      	str	r3, [r7, #16]
	const uint32_t pattern_length = strlen(pattern);
 8000ab6:	6938      	ldr	r0, [r7, #16]
 8000ab8:	f7ff fba4 	bl	8000204 <strlen>
 8000abc:	60f8      	str	r0, [r7, #12]

	if (pattern_length < 2 || pattern_length > 8) {
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d902      	bls.n	8000aca <handle_new_command+0x26>
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d901      	bls.n	8000ace <handle_new_command+0x2a>
		return false;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e05f      	b.n	8000b8e <handle_new_command+0xea>
	}

	state->new_mode.states_n = pattern_length;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f883 2354 	strb.w	r2, [r3, #852]	; 0x354

	for (uint8_t i = 0; i < pattern_length; ++i) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	75fb      	strb	r3, [r7, #23]
 8000adc:	e048      	b.n	8000b70 <handle_new_command+0xcc>
		enum led led;

		switch (pattern[i]) {
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3b67      	subs	r3, #103	; 0x67
 8000ae8:	2b12      	cmp	r3, #18
 8000aea:	d835      	bhi.n	8000b58 <handle_new_command+0xb4>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <handle_new_command+0x50>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b4d 	.word	0x08000b4d
 8000af8:	08000b59 	.word	0x08000b59
 8000afc:	08000b59 	.word	0x08000b59
 8000b00:	08000b59 	.word	0x08000b59
 8000b04:	08000b59 	.word	0x08000b59
 8000b08:	08000b59 	.word	0x08000b59
 8000b0c:	08000b59 	.word	0x08000b59
 8000b10:	08000b41 	.word	0x08000b41
 8000b14:	08000b59 	.word	0x08000b59
 8000b18:	08000b59 	.word	0x08000b59
 8000b1c:	08000b59 	.word	0x08000b59
 8000b20:	08000b47 	.word	0x08000b47
 8000b24:	08000b59 	.word	0x08000b59
 8000b28:	08000b59 	.word	0x08000b59
 8000b2c:	08000b59 	.word	0x08000b59
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b59 	.word	0x08000b59
 8000b38:	08000b59 	.word	0x08000b59
 8000b3c:	08000b53 	.word	0x08000b53
			case 'n':
				led = LED_NO_ONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	75bb      	strb	r3, [r7, #22]
				break;
 8000b44:	e00a      	b.n	8000b5c <handle_new_command+0xb8>

			case 'r':
				led = LED_RED;
 8000b46:	2301      	movs	r3, #1
 8000b48:	75bb      	strb	r3, [r7, #22]
				break;
 8000b4a:	e007      	b.n	8000b5c <handle_new_command+0xb8>

			case 'g':
				led = LED_GREEN;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	75bb      	strb	r3, [r7, #22]
				break;
 8000b50:	e004      	b.n	8000b5c <handle_new_command+0xb8>

			case 'y':
				led = LED_YELLOW;
 8000b52:	2303      	movs	r3, #3
 8000b54:	75bb      	strb	r3, [r7, #22]
				break;
 8000b56:	e001      	b.n	8000b5c <handle_new_command+0xb8>

			default:
				return false;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e018      	b.n	8000b8e <handle_new_command+0xea>
		}

		state->new_mode.states[i].led = led;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	336a      	adds	r3, #106	; 0x6a
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	7dba      	ldrb	r2, [r7, #22]
 8000b68:	721a      	strb	r2, [r3, #8]
	for (uint8_t i = 0; i < pattern_length; ++i) {
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	75fb      	strb	r3, [r7, #23]
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8b2      	bhi.n	8000ade <handle_new_command+0x3a>
	}

	state->await_n_timeouts = pattern_length;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	send_uart_message_format(state, "Send %d timeouts in milliseconds as lines:\r\n", pattern_length);
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4904      	ldr	r1, [pc, #16]	; (8000b98 <handle_new_command+0xf4>)
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fe52 	bl	8000830 <send_uart_message_format>
	return true;
 8000b8c:	2301      	movs	r3, #1
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	080048f8 	.word	0x080048f8

08000b9c <handle_new_command_timeout>:

static bool handle_new_command_timeout(struct state * state) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	const uint8_t state_idx = state->new_mode.states_n - state->await_n_timeouts;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 2354 	ldrb.w	r2, [r3, #852]	; 0x354
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	73fb      	strb	r3, [r7, #15]

	if (sscanf(state->command_line, "%lu", &(state->new_mode.states[state_idx].timeout)) != 1) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f203 2051 	addw	r0, r3, #593	; 0x251
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	336a      	adds	r3, #106	; 0x6a
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	330c      	adds	r3, #12
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	492e      	ldr	r1, [pc, #184]	; (8000c84 <handle_new_command_timeout+0xe8>)
 8000bca:	f002 fd9b 	bl	8003704 <siscanf>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d001      	beq.n	8000bd8 <handle_new_command_timeout+0x3c>
		return false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e050      	b.n	8000c7a <handle_new_command_timeout+0xde>
	}

	--state->await_n_timeouts;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	if (state->await_n_timeouts == 0) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d13a      	bne.n	8000c68 <handle_new_command_timeout+0xcc>
		const uint8_t available_mode_idxs = sizeof(state->modes) / sizeof(*(state->modes)) - default_modes.modes_n;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	f1c3 0308 	rsb	r3, r3, #8
 8000bf8:	73bb      	strb	r3, [r7, #14]
		const uint8_t mode_idx = default_modes.modes_n + (state->prev_changed_mode - default_modes.modes_n + 1) % available_mode_idxs;
 8000bfa:	2004      	movs	r0, #4
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 8000c02:	461a      	mov	r2, r3
 8000c04:	2304      	movs	r3, #4
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	3301      	adds	r3, #1
 8000c0a:	7bba      	ldrb	r2, [r7, #14]
 8000c0c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c10:	fb02 f201 	mul.w	r2, r2, r1
 8000c14:	1a9b      	subs	r3, r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4403      	add	r3, r0
 8000c1a:	737b      	strb	r3, [r7, #13]

		if (state->modes_n <= mode_idx) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	7b7a      	ldrb	r2, [r7, #13]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d304      	bcc.n	8000c30 <handle_new_command_timeout+0x94>
			state->modes_n = mode_idx + 1;
 8000c26:	7b7b      	ldrb	r3, [r7, #13]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	701a      	strb	r2, [r3, #0]
		}

		state->prev_changed_mode = mode_idx;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7b7a      	ldrb	r2, [r7, #13]
 8000c34:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
		memcpy(state->modes + mode_idx, &(state->new_mode), sizeof(state->new_mode));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1d19      	adds	r1, r3, #4
 8000c3c:	7b7a      	ldrb	r2, [r7, #13]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	18c8      	adds	r0, r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8000c4e:	2244      	movs	r2, #68	; 0x44
 8000c50:	4619      	mov	r1, r3
 8000c52:	f002 fd43 	bl	80036dc <memcpy>

		send_uart_message_format(state, "Written in mode %d\r\n", mode_idx + 1);
 8000c56:	7b7b      	ldrb	r3, [r7, #13]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	490a      	ldr	r1, [pc, #40]	; (8000c88 <handle_new_command_timeout+0xec>)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fde6 	bl	8000830 <send_uart_message_format>
		return true;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e008      	b.n	8000c7a <handle_new_command_timeout+0xde>
	}

	send_uart_message_format(state, "%d timeouts remaining:\r\n", state->await_n_timeouts);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <handle_new_command_timeout+0xf0>)
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fddc 	bl	8000830 <send_uart_message_format>
	return true;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	080048f4 	.word	0x080048f4
 8000c88:	08004928 	.word	0x08004928
 8000c8c:	08004940 	.word	0x08004940

08000c90 <handle_command_line>:

static void handle_command_line(struct state * state) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	normalize_command_line(state->command_line);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe1d 	bl	80008de <normalize_command_line>

	if (strlen(state->command_line) == 0) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d055      	beq.n	8000d5c <handle_command_line+0xcc>
		return;
	}

	if (state->await_n_timeouts > 0) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <handle_command_line+0x36>
		if (handle_new_command_timeout(state)) {
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff6e 	bl	8000b9c <handle_new_command_timeout>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14c      	bne.n	8000d60 <handle_command_line+0xd0>
			return;
		}
	}

	if (string_equals("set interrupts on", state->command_line)) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4828      	ldr	r0, [pc, #160]	; (8000d70 <handle_command_line+0xe0>)
 8000cd0:	f7ff fdda 	bl	8000888 <string_equals>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <handle_command_line+0x5c>
		send_uart_message_string_nl(state, "Interrupts turned on");
 8000cda:	4926      	ldr	r1, [pc, #152]	; (8000d74 <handle_command_line+0xe4>)
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fd93 	bl	8000808 <send_uart_message_string_nl>
		state->use_interrupt = true;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
		return;
 8000cea:	e03e      	b.n	8000d6a <handle_command_line+0xda>
	}

	if (string_equals("set interrupts off", state->command_line)) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4820      	ldr	r0, [pc, #128]	; (8000d78 <handle_command_line+0xe8>)
 8000cf6:	f7ff fdc7 	bl	8000888 <string_equals>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <handle_command_line+0x82>
		send_uart_message_string_nl(state, "Interrupts turned off");
 8000d00:	491e      	ldr	r1, [pc, #120]	; (8000d7c <handle_command_line+0xec>)
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fd80 	bl	8000808 <send_uart_message_string_nl>
		state->use_interrupt = false;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
		return;
 8000d10:	e02b      	b.n	8000d6a <handle_command_line+0xda>
	}

	if (starts_with("set ", state->command_line)) {
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4819      	ldr	r0, [pc, #100]	; (8000d80 <handle_command_line+0xf0>)
 8000d1c:	f7ff fdc7 	bl	80008ae <starts_with>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <handle_command_line+0xa2>
		if (handle_set_command(state)) {
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fe8c 	bl	8000a44 <handle_set_command>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d118      	bne.n	8000d64 <handle_command_line+0xd4>
			return;
		}
	}

	if (starts_with("new ", state->command_line)) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4812      	ldr	r0, [pc, #72]	; (8000d84 <handle_command_line+0xf4>)
 8000d3c:	f7ff fdb7 	bl	80008ae <starts_with>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <handle_command_line+0xc2>
		if (handle_new_command(state)) {
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff feac 	bl	8000aa4 <handle_new_command>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <handle_command_line+0xd8>
			return;
		}
	}

	send_uart_message_string_nl(state, "Invalid command");
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <handle_command_line+0xf8>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fd57 	bl	8000808 <send_uart_message_string_nl>
 8000d5a:	e006      	b.n	8000d6a <handle_command_line+0xda>
		return;
 8000d5c:	bf00      	nop
 8000d5e:	e004      	b.n	8000d6a <handle_command_line+0xda>
			return;
 8000d60:	bf00      	nop
 8000d62:	e002      	b.n	8000d6a <handle_command_line+0xda>
			return;
 8000d64:	bf00      	nop
 8000d66:	e000      	b.n	8000d6a <handle_command_line+0xda>
			return;
 8000d68:	bf00      	nop
}
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	0800495c 	.word	0x0800495c
 8000d74:	08004970 	.word	0x08004970
 8000d78:	08004988 	.word	0x08004988
 8000d7c:	0800499c 	.word	0x0800499c
 8000d80:	080049b4 	.word	0x080049b4
 8000d84:	080049bc 	.word	0x080049bc
 8000d88:	080049c4 	.word	0x080049c4

08000d8c <handle_uart>:

static void handle_uart(struct state * state) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (state->use_interrupt) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00c      	beq.n	8000db8 <handle_uart+0x2c>
        if (!is_char_received) {
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <handle_uart+0xfc>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d014      	beq.n	8000dd6 <handle_uart+0x4a>
            HAL_UART_Receive_IT(&huart6, (void *) &received_char, sizeof(received_char));
 8000dac:	2201      	movs	r2, #1
 8000dae:	4937      	ldr	r1, [pc, #220]	; (8000e8c <handle_uart+0x100>)
 8000db0:	4837      	ldr	r0, [pc, #220]	; (8000e90 <handle_uart+0x104>)
 8000db2:	f001 fd53 	bl	800285c <HAL_UART_Receive_IT>
            return;
 8000db6:	e064      	b.n	8000e82 <handle_uart+0xf6>
        }
    } else {
        switch (HAL_UART_Receive(&huart6, (void *) &received_char, sizeof(received_char), UART_TIMEOUT)) {
 8000db8:	230a      	movs	r3, #10
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4933      	ldr	r1, [pc, #204]	; (8000e8c <handle_uart+0x100>)
 8000dbe:	4834      	ldr	r0, [pc, #208]	; (8000e90 <handle_uart+0x104>)
 8000dc0:	f001 fc65 	bl	800268e <HAL_UART_Receive>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <handle_uart+0x48>
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db03      	blt.n	8000dd6 <handle_uart+0x4a>
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	dc01      	bgt.n	8000dd6 <handle_uart+0x4a>
                break;

            case HAL_ERROR:
            case HAL_BUSY:
            case HAL_TIMEOUT:
                return;
 8000dd2:	e056      	b.n	8000e82 <handle_uart+0xf6>
                break;
 8000dd4:	bf00      	nop
        }
    }

	is_char_received = false;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <handle_uart+0xfc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

    // echo
    send_uart_message(state, &received_char, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	492b      	ldr	r1, [pc, #172]	; (8000e8c <handle_uart+0x100>)
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fcd1 	bl	8000788 <send_uart_message>

    switch (received_char) {
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <handle_uart+0x100>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b0d      	cmp	r3, #13
 8000dec:	d015      	beq.n	8000e1a <handle_uart+0x8e>
 8000dee:	2b7f      	cmp	r3, #127	; 0x7f
 8000df0:	d001      	beq.n	8000df6 <handle_uart+0x6a>
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d122      	bne.n	8000e3c <handle_uart+0xb0>
    	case '\b':
    	case 0x7F: {
    	    const uint32_t command_line_length = strlen(state->command_line);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa01 	bl	8000204 <strlen>
 8000e02:	60f8      	str	r0, [r7, #12]

    	    if (command_line_length > 0) {
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d03a      	beq.n	8000e80 <handle_uart+0xf4>
    	    	state->command_line[command_line_length - 1] = '\0';
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
    	    }

    		return;
 8000e18:	e032      	b.n	8000e80 <handle_uart+0xf4>
    	}

    	case '\r':
    	    send_uart_message_string(state, "\n");
 8000e1a:	491e      	ldr	r1, [pc, #120]	; (8000e94 <handle_uart+0x108>)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fce1 	bl	80007e4 <send_uart_message_string>

    		handle_command_line(state);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff34 	bl	8000c90 <handle_command_line>
        	memset(state->command_line, '\0', sizeof(state->command_line));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 fc5c 	bl	80036f2 <memset>
    		return;
 8000e3a:	e022      	b.n	8000e82 <handle_uart+0xf6>
    }

    const uint32_t command_line_length = strlen(state->command_line);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9de 	bl	8000204 <strlen>
 8000e48:	60b8      	str	r0, [r7, #8]

    // overflow
    if (command_line_length == sizeof(state->command_line) - 1) {
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d10d      	bne.n	8000e6c <handle_uart+0xe0>
    	send_uart_message_string_nl(state, "\r\nInvalid command");
 8000e50:	4911      	ldr	r1, [pc, #68]	; (8000e98 <handle_uart+0x10c>)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fcd8 	bl	8000808 <send_uart_message_string_nl>
    	memset(state->command_line, '\0', sizeof(state->command_line));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fc44 	bl	80036f2 <memset>
    	return;
 8000e6a:	e00a      	b.n	8000e82 <handle_uart+0xf6>
    }

    state->command_line[command_line_length] = received_char;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <handle_uart+0x100>)
 8000e6e:	7819      	ldrb	r1, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	f203 2351 	addw	r3, r3, #593	; 0x251
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e000      	b.n	8000e82 <handle_uart+0xf6>
    		return;
 8000e80:	bf00      	nop
}
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001fd 	.word	0x200001fd
 8000e8c:	200001fc 	.word	0x200001fc
 8000e90:	2000060c 	.word	0x2000060c
 8000e94:	080049d4 	.word	0x080049d4
 8000e98:	080049d8 	.word	0x080049d8

08000e9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    (void) huart;

    is_char_received = true;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_UART_RxCpltCallback+0x1c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001fd 	.word	0x200001fd

08000ebc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    (void) huart;

    is_transmitted = true;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_UART_TxCpltCallback+0x1c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000000 	.word	0x20000000

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fabe 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f90e 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f7ff fb68 	bl	80005c0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000ef0:	f000 fa14 	bl	800131c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  	set_green_led(false);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fbe1 	bl	80006bc <set_green_led>
  	set_yellow_led(false);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fbf0 	bl	80006e0 <set_yellow_led>
  	set_red_led(false);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff fbff 	bl	8000704 <set_red_led>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    struct state state = {
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f44f 7367 	mov.w	r3, #924	; 0x39c
 8000f10:	461a      	mov	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f002 fbed 	bl	80036f2 <memset>
		.modes_n = default_modes.modes_n,
 8000f18:	2204      	movs	r2, #4
    struct state state = {
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2207      	movs	r2, #7
 8000f26:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
		.command_line = { 0 },
		.new_mode = { 0 },
		.await_n_timeouts = 0,
    };

    memcpy(state.modes, default_modes.modes, sizeof(state.modes));
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4a74      	ldr	r2, [pc, #464]	; (8001100 <main+0x224>)
 8000f30:	3304      	adds	r3, #4
 8000f32:	1d11      	adds	r1, r2, #4
 8000f34:	f44f 7208 	mov.w	r2, #544	; 0x220
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fbcf 	bl	80036dc <memcpy>

    if (state.modes_n == 0) {
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <main+0x70>
        return 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e0d3      	b.n	80010f4 <main+0x218>
    }

    if (state.modes[0].states_n > 0) {
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <main+0x8c>
        led_functions[state.modes[0].states[0].led](true);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	7a1b      	ldrb	r3, [r3, #8]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b69      	ldr	r3, [pc, #420]	; (8001104 <main+0x228>)
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	2001      	movs	r0, #1
 8000f66:	4798      	blx	r3
    }

    uint32_t lastPressTime = 0;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
    uint32_t t = HAL_GetTick();
 8000f6e:	f000 fadf 	bl	8001530 <HAL_GetTick>
 8000f72:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac
    while (1) {
        if (is_btn_clicked(&lastPressTime)) {
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fbd5 	bl	8000728 <is_btn_clicked>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <main+0xd0>
            set_active_mode(&state, (state.i + 1) % state.modes_n);
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	7812      	ldrb	r2, [r2, #0]
 8000f94:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f98:	fb02 f201 	mul.w	r2, r2, r1
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fcf6 	bl	8000998 <set_active_mode>
        }

        handle_uart(&state);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff feeb 	bl	8000d8c <handle_uart>

        state.elapsedStateTime[state.i] += HAL_GetTick() - t;
 8000fb6:	f000 fabb 	bl	8001530 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000fc0:	1ad2      	subs	r2, r2, r3
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	318c      	adds	r1, #140	; 0x8c
 8000fd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fd6:	f107 0108 	add.w	r1, r7, #8
 8000fda:	f891 1225 	ldrb.w	r1, [r1, #549]	; 0x225
 8000fde:	4608      	mov	r0, r1
 8000fe0:	18d1      	adds	r1, r2, r3
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	f100 028c 	add.w	r2, r0, #140	; 0x8c
 8000fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        t = HAL_GetTick();
 8000fee:	f000 fa9f 	bl	8001530 <HAL_GetTick>
 8000ff2:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac

        // assume that i and state[i] is always valid
        const struct mode * current_mode = state.modes + state.i;
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 8000ffe:	461a      	mov	r2, r3
 8001000:	4613      	mov	r3, r2
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	461a      	mov	r2, r3
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	3304      	adds	r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
        if (current_mode->states_n == 0) {
 8001016:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d067      	beq.n	80010f0 <main+0x214>
            continue;
        }

        const struct led_state * current_state = current_mode->states + state.state[state.i];
 8001020:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8001024:	1d1a      	adds	r2, r3, #4
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800102e:	4619      	mov	r1, r3
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	440b      	add	r3, r1
 8001036:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4

        if (state.elapsedStateTime[state.i] >= current_state->timeout) {
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800104a:	461a      	mov	r2, r3
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	328c      	adds	r2, #140	; 0x8c
 8001052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001056:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d38a      	bcc.n	8000f76 <main+0x9a>
            led_functions[current_state->led](false);
 8001060:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <main+0x228>)
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	2000      	movs	r0, #0
 8001070:	4798      	blx	r3

            state.elapsedStateTime[state.i] = 0;
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800107a:	461a      	mov	r2, r3
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	328c      	adds	r2, #140	; 0x8c
 8001082:	2100      	movs	r1, #0
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            state.state[state.i] = (state.state[state.i] + 1) % current_mode->states_n;
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 8001090:	461a      	mov	r2, r3
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4413      	add	r3, r2
 8001098:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 800109c:	3301      	adds	r3, #1
 800109e:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80010a8:	fb02 f201 	mul.w	r2, r2, r1
 80010ac:	1a9a      	subs	r2, r3, r2
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 80010b6:	4619      	mov	r1, r3
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226

            led_functions[current_mode->states[state.state[state.i]].led](true);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 80010cc:	461a      	mov	r2, r3
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4413      	add	r3, r2
 80010d4:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 80010d8:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <main+0x228>)
 80010e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ea:	2001      	movs	r0, #1
 80010ec:	4798      	blx	r3
 80010ee:	e742      	b.n	8000f76 <main+0x9a>
            continue;
 80010f0:	bf00      	nop
    while (1) {
 80010f2:	e740      	b.n	8000f76 <main+0x9a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
  /* USER CODE END 3 */
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08004a08 	.word	0x08004a08
 8001104:	080049f8 	.word	0x080049f8

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f002 faeb 	bl	80036f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <SystemClock_Config+0xb8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <SystemClock_Config+0xb8>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <SystemClock_Config+0xb8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <SystemClock_Config+0xbc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <SystemClock_Config+0xbc>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <SystemClock_Config+0xbc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fd63 	bl	8001c48 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001188:	f000 f81e 	bl	80011c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 ffc6 	bl	8002138 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011b2:	f000 f809 	bl	80011c8 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3750      	adds	r7, #80	; 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 f944 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <USART6_IRQHandler+0x10>)
 800128a:	f001 fb17 	bl	80028bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000060c 	.word	0x2000060c

08001298 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x50>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x16>
		heap_end = &end;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <_sbrk+0x50>)
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <_sbrk+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <_sbrk+0x50>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <_sbrk+0x50>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	466a      	mov	r2, sp
 80012be:	4293      	cmp	r3, r2
 80012c0:	d907      	bls.n	80012d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012c2:	f002 f9bd 	bl	8003640 <__errno>
 80012c6:	4602      	mov	r2, r0
 80012c8:	230c      	movs	r3, #12
 80012ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	e006      	b.n	80012e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_sbrk+0x50>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <_sbrk+0x50>)
 80012dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000600 	.word	0x20000600
 80012ec:	20000658 	.word	0x20000658

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SystemInit+0x28>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <SystemInit+0x28>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SystemInit+0x28>)
 8001306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130a:	609a      	str	r2, [r3, #8]
#endif
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART6_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART6_UART_Init+0x4c>)
 8001354:	f001 f8bc 	bl	80024d0 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f7ff ff33 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000060c 	.word	0x2000060c
 800136c:	40011400 	.word	0x40011400

08001370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_UART_MspInit+0x94>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d133      	bne.n	80013fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_UART_MspInit+0x98>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_UART_MspInit+0x98>)
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013da:	2308      	movs	r3, #8
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_UART_MspInit+0x9c>)
 80013e6:	f000 fa53 	bl	8001890 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2047      	movs	r0, #71	; 0x47
 80013f0:	f000 f985 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013f4:	2047      	movs	r0, #71	; 0x47
 80013f6:	f000 f99e 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40011400 	.word	0x40011400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020800 	.word	0x40020800

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff ff59 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f002 f905 	bl	800364c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fd4b 	bl	8000edc <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001454:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8001458:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800145c:	20000658 	.word	0x20000658

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f92b 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fe9e 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f943 	bl	8001752 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f90b 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000004 	.word	0x20000004
 8001500:	2000000c 	.word	0x2000000c
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000000c 	.word	0x2000000c
 800152c:	20000650 	.word	0x20000650

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000650 	.word	0x20000650

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff29 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff3e 	bl	8001590 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff31 	bl	80015ac <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff feda 	bl	8001530 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d008      	beq.n	800179c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e052      	b.n	8001842 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0216 	bic.w	r2, r2, #22
 80017aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <HAL_DMA_Abort+0x62>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0208 	bic.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ec:	e013      	b.n	8001816 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ee:	f7ff fe9f 	bl	8001530 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d90c      	bls.n	8001816 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e015      	b.n	8001842 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e4      	bne.n	80017ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	223f      	movs	r2, #63	; 0x3f
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d004      	beq.n	8001868 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e00c      	b.n	8001882 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e177      	b.n	8001b9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8166 	bne.w	8001b96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d130      	bne.n	8001944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80c0 	beq.w	8001b96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a64      	ldr	r2, [pc, #400]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a60      	ldr	r2, [pc, #384]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_GPIO_Init+0x328>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d037      	beq.n	8001ace <HAL_GPIO_Init+0x23e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d031      	beq.n	8001aca <HAL_GPIO_Init+0x23a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a55      	ldr	r2, [pc, #340]	; (8001bc0 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d02b      	beq.n	8001ac6 <HAL_GPIO_Init+0x236>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d025      	beq.n	8001ac2 <HAL_GPIO_Init+0x232>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a53      	ldr	r2, [pc, #332]	; (8001bc8 <HAL_GPIO_Init+0x338>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01f      	beq.n	8001abe <HAL_GPIO_Init+0x22e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_GPIO_Init+0x33c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0x22a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x340>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x226>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_GPIO_Init+0x344>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x222>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x348>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x21e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x34c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001aa6:	2309      	movs	r3, #9
 8001aa8:	e012      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aaa:	230a      	movs	r3, #10
 8001aac:	e010      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e00e      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00c      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	e00a      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae0:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b12:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3c:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b90:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	f67f ae84 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3724      	adds	r7, #36	; 0x24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40021c00 	.word	0x40021c00
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40022400 	.word	0x40022400
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e264      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	4ba3      	ldr	r3, [pc, #652]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b9d      	ldr	r3, [pc, #628]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e23f      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a90      	ldr	r2, [pc, #576]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a83      	ldr	r2, [pc, #524]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a80      	ldr	r2, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc16 	bl	8001530 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fc12 	bl	8001530 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e204      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fc02 	bl	8001530 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fbfe 	bl	8001530 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1f0      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1c4      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4952      	ldr	r1, [pc, #328]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <HAL_RCC_OscConfig+0x2b0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fbb7 	bl	8001530 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fbb3 	bl	8001530 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1a5      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4940      	ldr	r1, [pc, #256]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x2b0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fb96 	bl	8001530 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fb92 	bl	8001530 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e184      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCC_OscConfig+0x2b4>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fb76 	bl	8001530 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fb72 	bl	8001530 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e164      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e015      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x2b4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb5f 	bl	8001530 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fb5b 	bl	8001530 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e14d      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a0 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d121      	bne.n	8001f22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb21 	bl	8001530 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e011      	b.n	8001f16 <HAL_RCC_OscConfig+0x2ce>
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	42470000 	.word	0x42470000
 8001efc:	42470e80 	.word	0x42470e80
 8001f00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff fb14 	bl	8001530 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e106      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b85      	ldr	r3, [pc, #532]	; (800212c <HAL_RCC_OscConfig+0x4e4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a80      	ldr	r2, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f40:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a7a      	ldr	r2, [pc, #488]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b78      	ldr	r3, [pc, #480]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a77      	ldr	r2, [pc, #476]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x32a>
 8001f5a:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a74      	ldr	r2, [pc, #464]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a71      	ldr	r2, [pc, #452]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fad9 	bl	8001530 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff fad5 	bl	8001530 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0c5      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x33a>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fac3 	bl	8001530 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff fabf 	bl	8001530 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0af      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a55      	ldr	r2, [pc, #340]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 809b 	beq.w	8002122 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d05c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d141      	bne.n	8002084 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fa93 	bl	8001530 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fa8f 	bl	8001530 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e081      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	3b01      	subs	r3, #1
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fa68 	bl	8001530 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fa64 	bl	8001530 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e056      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x41c>
 8002082:	e04e      	b.n	8002122 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fa51 	bl	8001530 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fa4d 	bl	8001530 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e03f      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x44a>
 80020b0:	e037      	b.n	8002122 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e032      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d028      	beq.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d121      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d11a      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d111      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d107      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40007000 	.word	0x40007000
 8002130:	40023800 	.word	0x40023800
 8002134:	42470060 	.word	0x42470060

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff f982 	bl	8001530 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7ff f97e 	bl	8001530 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4601      	mov	r1, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	fa21 f303 	lsr.w	r3, r1, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f8e2 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08004c2c 	.word	0x08004c2c
 80022fc:	20000004 	.word	0x20000004
 8002300:	20000008 	.word	0x20000008

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_GetSysClockFreq+0x158>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d007      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x32>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d008      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x38>
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 808d 	bne.w	800244a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002332:	60bb      	str	r3, [r7, #8]
       break;
 8002334:	e08c      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002336:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 8002338:	60bb      	str	r3, [r7, #8]
      break;
 800233a:	e089      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800233c:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_GetSysClockFreq+0x158>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <HAL_RCC_GetSysClockFreq+0x158>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d023      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002352:	4b42      	ldr	r3, [pc, #264]	; (800245c <HAL_RCC_GetSysClockFreq+0x158>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	ea03 0501 	and.w	r5, r3, r1
 8002368:	ea04 0602 	and.w	r6, r4, r2
 800236c:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 800236e:	fb02 f106 	mul.w	r1, r2, r6
 8002372:	2200      	movs	r2, #0
 8002374:	fb02 f205 	mul.w	r2, r2, r5
 8002378:	440a      	add	r2, r1
 800237a:	493a      	ldr	r1, [pc, #232]	; (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 800237c:	fba5 0101 	umull	r0, r1, r5, r1
 8002380:	1853      	adds	r3, r2, r1
 8002382:	4619      	mov	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f04f 0400 	mov.w	r4, #0
 800238a:	461a      	mov	r2, r3
 800238c:	4623      	mov	r3, r4
 800238e:	f7fd ff97 	bl	80002c0 <__aeabi_uldivmod>
 8002392:	4603      	mov	r3, r0
 8002394:	460c      	mov	r4, r1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e049      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_GetSysClockFreq+0x158>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	f04f 0400 	mov.w	r4, #0
 80023a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	ea03 0501 	and.w	r5, r3, r1
 80023b0:	ea04 0602 	and.w	r6, r4, r2
 80023b4:	4629      	mov	r1, r5
 80023b6:	4632      	mov	r2, r6
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	0154      	lsls	r4, r2, #5
 80023c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023c6:	014b      	lsls	r3, r1, #5
 80023c8:	4619      	mov	r1, r3
 80023ca:	4622      	mov	r2, r4
 80023cc:	1b49      	subs	r1, r1, r5
 80023ce:	eb62 0206 	sbc.w	r2, r2, r6
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	f04f 0400 	mov.w	r4, #0
 80023da:	0194      	lsls	r4, r2, #6
 80023dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023e0:	018b      	lsls	r3, r1, #6
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	eb64 0402 	sbc.w	r4, r4, r2
 80023e8:	f04f 0100 	mov.w	r1, #0
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	00e2      	lsls	r2, r4, #3
 80023f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023f6:	00d9      	lsls	r1, r3, #3
 80023f8:	460b      	mov	r3, r1
 80023fa:	4614      	mov	r4, r2
 80023fc:	195b      	adds	r3, r3, r5
 80023fe:	eb44 0406 	adc.w	r4, r4, r6
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	02a2      	lsls	r2, r4, #10
 800240c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002410:	0299      	lsls	r1, r3, #10
 8002412:	460b      	mov	r3, r1
 8002414:	4614      	mov	r4, r2
 8002416:	4618      	mov	r0, r3
 8002418:	4621      	mov	r1, r4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f04f 0400 	mov.w	r4, #0
 8002420:	461a      	mov	r2, r3
 8002422:	4623      	mov	r3, r4
 8002424:	f7fd ff4c 	bl	80002c0 <__aeabi_uldivmod>
 8002428:	4603      	mov	r3, r0
 800242a:	460c      	mov	r4, r1
 800242c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0x158>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	3301      	adds	r3, #1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	60bb      	str	r3, [r7, #8]
      break;
 8002448:	e002      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x15c>)
 800244c:	60bb      	str	r3, [r7, #8]
      break;
 800244e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002450:	68bb      	ldr	r3, [r7, #8]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	017d7840 	.word	0x017d7840

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000004 	.word	0x20000004

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4601      	mov	r1, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08004c3c 	.word	0x08004c3c

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff ffdc 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b0:	4601      	mov	r1, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08004c3c 	.word	0x08004c3c

080024d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e03f      	b.n	8002562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe ff3a 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 feb7 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b08a      	sub	sp, #40	; 0x28
 800256e:	af02      	add	r7, sp, #8
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	d17c      	bne.n	8002684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_UART_Transmit+0x2c>
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e075      	b.n	8002686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_UART_Transmit+0x3e>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e06e      	b.n	8002686 <HAL_UART_Transmit+0x11c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025be:	f7fe ffb7 	bl	8001530 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0x82>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025fc:	e02a      	b.n	8002654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fbfb 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e036      	b.n	8002686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3302      	adds	r3, #2
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e007      	b.n	8002646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1cf      	bne.n	80025fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fbcb 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e006      	b.n	8002686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b08a      	sub	sp, #40	; 0x28
 8002692:	af02      	add	r7, sp, #8
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	f040 808c 	bne.w	80027c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Receive+0x2e>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e084      	b.n	80027ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Receive+0x40>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e07d      	b.n	80027ca <HAL_UART_Receive+0x13c>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2222      	movs	r2, #34	; 0x22
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ea:	f7fe ff21 	bl	8001530 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Receive+0x8a>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002728:	e043      	b.n	80027b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2120      	movs	r1, #32
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fb65 	bl	8002e04 <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e042      	b.n	80027ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	b29a      	uxth	r2, r3
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3302      	adds	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e01f      	b.n	80027a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276c:	d007      	beq.n	800277e <HAL_UART_Receive+0xf0>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <HAL_UART_Receive+0xfe>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e008      	b.n	800279e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002798:	b2da      	uxtb	r2, r3
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1b6      	bne.n	800272a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d130      	bne.n	800284e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_UART_Transmit_IT+0x26>
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e029      	b.n	8002850 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Transmit_IT+0x38>
 8002806:	2302      	movs	r3, #2
 8002808:	e022      	b.n	8002850 <HAL_UART_Transmit_IT+0x7e>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	; 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002848:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	d11d      	bne.n	80028b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_Receive_IT+0x26>
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e016      	b.n	80028b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_UART_Receive_IT+0x38>
 8002890:	2302      	movs	r3, #2
 8002892:	e00f      	b.n	80028b4 <HAL_UART_Receive_IT+0x58>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fb19 	bl	8002ee0 <UART_Start_Receive_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	e000      	b.n	80028b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0ba      	sub	sp, #232	; 0xe8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_UART_IRQHandler+0x66>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fbf9 	bl	8003112 <UART_Receive_IT>
      return;
 8002920:	e257      	b.n	8002dd2 <HAL_UART_IRQHandler+0x516>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80de 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x22c>
 800292c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80d1 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_UART_IRQHandler+0xae>
 8002952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800296a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_UART_IRQHandler+0xd2>
 8002976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_UART_IRQHandler+0xf6>
 800299a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d011      	beq.n	80029e2 <HAL_UART_IRQHandler+0x126>
 80029be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0208 	orr.w	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 81ee 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x50c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_UART_IRQHandler+0x14e>
 80029f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb84 	bl	8003112 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_UART_IRQHandler+0x17a>
 8002a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d04f      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa8c 	bl	8002f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d141      	bne.n	8002ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3314      	adds	r3, #20
 8002a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1d9      	bne.n	8002a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d013      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <HAL_UART_IRQHandler+0x3dc>)
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fecd 	bl	800184a <HAL_DMA_Abort_IT>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	e00e      	b.n	8002ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f986 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	e00a      	b.n	8002ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f982 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	e006      	b.n	8002ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f97e 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ae2:	e171      	b.n	8002dc8 <HAL_UART_IRQHandler+0x50c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	bf00      	nop
    return;
 8002ae6:	e16f      	b.n	8002dc8 <HAL_UART_IRQHandler+0x50c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 814a 	bne.w	8002d86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8143 	beq.w	8002d86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 813c 	beq.w	8002d86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	f040 80b4 	bne.w	8002c9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8141 	beq.w	8002dcc <HAL_UART_IRQHandler+0x510>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f080 813a 	bcs.w	8002dcc <HAL_UART_IRQHandler+0x510>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6a:	f000 8088 	beq.w	8002c7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1d9      	bne.n	8002b6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002be2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e1      	bne.n	8002bba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3314      	adds	r3, #20
 8002bfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3314      	adds	r3, #20
 8002c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e3      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c60:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e3      	bne.n	8002c3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fd76 	bl	800176a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8ac 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c94:	e09a      	b.n	8002dcc <HAL_UART_IRQHandler+0x510>
 8002c96:	bf00      	nop
 8002c98:	0800301b 	.word	0x0800301b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 808c 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x514>
          && (nb_rx_data > 0U))
 8002cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8087 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x514>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ce6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ce8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e3      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3314      	adds	r3, #20
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	623b      	str	r3, [r7, #32]
   return(result);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3314      	adds	r3, #20
 8002d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e3      	bne.n	8002cfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0310 	bic.w	r3, r3, #16
 8002d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d64:	61fa      	str	r2, [r7, #28]
 8002d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	69b9      	ldr	r1, [r7, #24]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	617b      	str	r3, [r7, #20]
   return(result);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e3      	bne.n	8002d40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f834 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d84:	e024      	b.n	8002dd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_UART_IRQHandler+0x4ea>
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f94f 	bl	8003042 <UART_Transmit_IT>
    return;
 8002da4:	e015      	b.n	8002dd2 <HAL_UART_IRQHandler+0x516>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00f      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x516>
 8002db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x516>
  {
    UART_EndTransmit_IT(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f98f 	bl	80030e2 <UART_EndTransmit_IT>
    return;
 8002dc4:	bf00      	nop
 8002dc6:	e004      	b.n	8002dd2 <HAL_UART_IRQHandler+0x516>
    return;
 8002dc8:	bf00      	nop
 8002dca:	e002      	b.n	8002dd2 <HAL_UART_IRQHandler+0x516>
      return;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_IRQHandler+0x516>
      return;
 8002dd0:	bf00      	nop
  }
}
 8002dd2:	37e8      	adds	r7, #232	; 0xe8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b090      	sub	sp, #64	; 0x40
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e14:	e050      	b.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d04c      	beq.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e24:	f7fe fb84 	bl	8001530 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d241      	bcs.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e54:	637a      	str	r2, [r7, #52]	; 0x34
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e5      	bne.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	613b      	str	r3, [r7, #16]
   return(result);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e88:	623a      	str	r2, [r7, #32]
 8002e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e00f      	b.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d09f      	beq.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3740      	adds	r7, #64	; 0x40
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2222      	movs	r2, #34	; 0x22
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b095      	sub	sp, #84	; 0x54
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f7c:	643a      	str	r2, [r7, #64]	; 0x40
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e5      	bne.n	8002f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3314      	adds	r3, #20
 8002f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e5      	bne.n	8002f90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d119      	bne.n	8003000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f023 0310 	bic.w	r3, r3, #16
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fec:	61ba      	str	r2, [r7, #24]
 8002fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800300e:	bf00      	nop
 8003010:	3754      	adds	r7, #84	; 0x54
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff fecf 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b21      	cmp	r3, #33	; 0x21
 8003054:	d13e      	bne.n	80030d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d114      	bne.n	800308a <UART_Transmit_IT+0x48>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d110      	bne.n	800308a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	1c9a      	adds	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	621a      	str	r2, [r3, #32]
 8003088:	e008      	b.n	800309c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6211      	str	r1, [r2, #32]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4619      	mov	r1, r3
 80030aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10f      	bne.n	80030d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd feda 	bl	8000ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b08c      	sub	sp, #48	; 0x30
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b22      	cmp	r3, #34	; 0x22
 8003124:	f040 80ab 	bne.w	800327e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d117      	bne.n	8003162 <UART_Receive_IT+0x50>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d113      	bne.n	8003162 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	b29a      	uxth	r2, r3
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	1c9a      	adds	r2, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
 8003160:	e026      	b.n	80031b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003174:	d007      	beq.n	8003186 <UART_Receive_IT+0x74>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <UART_Receive_IT+0x82>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e008      	b.n	80031a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4619      	mov	r1, r3
 80031be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d15a      	bne.n	800327a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0220 	bic.w	r2, r2, #32
 80031d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d135      	bne.n	8003270 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	613b      	str	r3, [r7, #16]
   return(result);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f023 0310 	bic.w	r3, r3, #16
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322a:	623a      	str	r2, [r7, #32]
 800322c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	69f9      	ldr	r1, [r7, #28]
 8003230:	6a3a      	ldr	r2, [r7, #32]
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	61bb      	str	r3, [r7, #24]
   return(result);
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e5      	bne.n	800320a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b10      	cmp	r3, #16
 800324a:	d10a      	bne.n	8003262 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fdbf 	bl	8002dec <HAL_UARTEx_RxEventCallback>
 800326e:	e002      	b.n	8003276 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd fe13 	bl	8000e9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e002      	b.n	8003280 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3730      	adds	r7, #48	; 0x30
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032ca:	f023 030c 	bic.w	r3, r3, #12
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4ad0      	ldr	r2, [pc, #832]	; (8003634 <UART_SetConfig+0x3ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <UART_SetConfig+0x7a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4ace      	ldr	r2, [pc, #824]	; (8003638 <UART_SetConfig+0x3b0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d103      	bne.n	800330a <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003302:	f7ff f8d1 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	e002      	b.n	8003310 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800330a:	f7ff f8b9 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 800330e:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	f040 80ba 	bne.w	8003490 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	461d      	mov	r5, r3
 8003320:	f04f 0600 	mov.w	r6, #0
 8003324:	46a8      	mov	r8, r5
 8003326:	46b1      	mov	r9, r6
 8003328:	eb18 0308 	adds.w	r3, r8, r8
 800332c:	eb49 0409 	adc.w	r4, r9, r9
 8003330:	4698      	mov	r8, r3
 8003332:	46a1      	mov	r9, r4
 8003334:	eb18 0805 	adds.w	r8, r8, r5
 8003338:	eb49 0906 	adc.w	r9, r9, r6
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003348:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800334c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003350:	4688      	mov	r8, r1
 8003352:	4691      	mov	r9, r2
 8003354:	eb18 0005 	adds.w	r0, r8, r5
 8003358:	eb49 0106 	adc.w	r1, r9, r6
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	461d      	mov	r5, r3
 8003362:	f04f 0600 	mov.w	r6, #0
 8003366:	196b      	adds	r3, r5, r5
 8003368:	eb46 0406 	adc.w	r4, r6, r6
 800336c:	461a      	mov	r2, r3
 800336e:	4623      	mov	r3, r4
 8003370:	f7fc ffa6 	bl	80002c0 <__aeabi_uldivmod>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	461a      	mov	r2, r3
 800337a:	4bb0      	ldr	r3, [pc, #704]	; (800363c <UART_SetConfig+0x3b4>)
 800337c:	fba3 2302 	umull	r2, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	461d      	mov	r5, r3
 800338a:	f04f 0600 	mov.w	r6, #0
 800338e:	46a9      	mov	r9, r5
 8003390:	46b2      	mov	sl, r6
 8003392:	eb19 0309 	adds.w	r3, r9, r9
 8003396:	eb4a 040a 	adc.w	r4, sl, sl
 800339a:	4699      	mov	r9, r3
 800339c:	46a2      	mov	sl, r4
 800339e:	eb19 0905 	adds.w	r9, r9, r5
 80033a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ba:	4689      	mov	r9, r1
 80033bc:	4692      	mov	sl, r2
 80033be:	eb19 0005 	adds.w	r0, r9, r5
 80033c2:	eb4a 0106 	adc.w	r1, sl, r6
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	461d      	mov	r5, r3
 80033cc:	f04f 0600 	mov.w	r6, #0
 80033d0:	196b      	adds	r3, r5, r5
 80033d2:	eb46 0406 	adc.w	r4, r6, r6
 80033d6:	461a      	mov	r2, r3
 80033d8:	4623      	mov	r3, r4
 80033da:	f7fc ff71 	bl	80002c0 <__aeabi_uldivmod>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b95      	ldr	r3, [pc, #596]	; (800363c <UART_SetConfig+0x3b4>)
 80033e6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	3332      	adds	r3, #50	; 0x32
 80033f8:	4a90      	ldr	r2, [pc, #576]	; (800363c <UART_SetConfig+0x3b4>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003406:	4498      	add	r8, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	461d      	mov	r5, r3
 800340c:	f04f 0600 	mov.w	r6, #0
 8003410:	46a9      	mov	r9, r5
 8003412:	46b2      	mov	sl, r6
 8003414:	eb19 0309 	adds.w	r3, r9, r9
 8003418:	eb4a 040a 	adc.w	r4, sl, sl
 800341c:	4699      	mov	r9, r3
 800341e:	46a2      	mov	sl, r4
 8003420:	eb19 0905 	adds.w	r9, r9, r5
 8003424:	eb4a 0a06 	adc.w	sl, sl, r6
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003434:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003438:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800343c:	4689      	mov	r9, r1
 800343e:	4692      	mov	sl, r2
 8003440:	eb19 0005 	adds.w	r0, r9, r5
 8003444:	eb4a 0106 	adc.w	r1, sl, r6
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	461d      	mov	r5, r3
 800344e:	f04f 0600 	mov.w	r6, #0
 8003452:	196b      	adds	r3, r5, r5
 8003454:	eb46 0406 	adc.w	r4, r6, r6
 8003458:	461a      	mov	r2, r3
 800345a:	4623      	mov	r3, r4
 800345c:	f7fc ff30 	bl	80002c0 <__aeabi_uldivmod>
 8003460:	4603      	mov	r3, r0
 8003462:	460c      	mov	r4, r1
 8003464:	461a      	mov	r2, r3
 8003466:	4b75      	ldr	r3, [pc, #468]	; (800363c <UART_SetConfig+0x3b4>)
 8003468:	fba3 1302 	umull	r1, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	2164      	movs	r1, #100	; 0x64
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	3332      	adds	r3, #50	; 0x32
 800347a:	4a70      	ldr	r2, [pc, #448]	; (800363c <UART_SetConfig+0x3b4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4442      	add	r2, r8
 800348c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800348e:	e0cc      	b.n	800362a <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	469a      	mov	sl, r3
 8003494:	f04f 0b00 	mov.w	fp, #0
 8003498:	46d0      	mov	r8, sl
 800349a:	46d9      	mov	r9, fp
 800349c:	eb18 0308 	adds.w	r3, r8, r8
 80034a0:	eb49 0409 	adc.w	r4, r9, r9
 80034a4:	4698      	mov	r8, r3
 80034a6:	46a1      	mov	r9, r4
 80034a8:	eb18 080a 	adds.w	r8, r8, sl
 80034ac:	eb49 090b 	adc.w	r9, r9, fp
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034c4:	4688      	mov	r8, r1
 80034c6:	4691      	mov	r9, r2
 80034c8:	eb1a 0508 	adds.w	r5, sl, r8
 80034cc:	eb4b 0609 	adc.w	r6, fp, r9
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	0094      	lsls	r4, r2, #2
 80034e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034e8:	008b      	lsls	r3, r1, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	4623      	mov	r3, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	4631      	mov	r1, r6
 80034f2:	f7fc fee5 	bl	80002c0 <__aeabi_uldivmod>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b4f      	ldr	r3, [pc, #316]	; (800363c <UART_SetConfig+0x3b4>)
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	469b      	mov	fp, r3
 800350c:	f04f 0c00 	mov.w	ip, #0
 8003510:	46d9      	mov	r9, fp
 8003512:	46e2      	mov	sl, ip
 8003514:	eb19 0309 	adds.w	r3, r9, r9
 8003518:	eb4a 040a 	adc.w	r4, sl, sl
 800351c:	4699      	mov	r9, r3
 800351e:	46a2      	mov	sl, r4
 8003520:	eb19 090b 	adds.w	r9, r9, fp
 8003524:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003528:	f04f 0100 	mov.w	r1, #0
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003534:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003538:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800353c:	4689      	mov	r9, r1
 800353e:	4692      	mov	sl, r2
 8003540:	eb1b 0509 	adds.w	r5, fp, r9
 8003544:	eb4c 060a 	adc.w	r6, ip, sl
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4619      	mov	r1, r3
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f04f 0400 	mov.w	r4, #0
 800355a:	0094      	lsls	r4, r2, #2
 800355c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003560:	008b      	lsls	r3, r1, #2
 8003562:	461a      	mov	r2, r3
 8003564:	4623      	mov	r3, r4
 8003566:	4628      	mov	r0, r5
 8003568:	4631      	mov	r1, r6
 800356a:	f7fc fea9 	bl	80002c0 <__aeabi_uldivmod>
 800356e:	4603      	mov	r3, r0
 8003570:	460c      	mov	r4, r1
 8003572:	461a      	mov	r2, r3
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <UART_SetConfig+0x3b4>)
 8003576:	fba3 1302 	umull	r1, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2164      	movs	r1, #100	; 0x64
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	3332      	adds	r3, #50	; 0x32
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <UART_SetConfig+0x3b4>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003594:	4498      	add	r8, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	469b      	mov	fp, r3
 800359a:	f04f 0c00 	mov.w	ip, #0
 800359e:	46d9      	mov	r9, fp
 80035a0:	46e2      	mov	sl, ip
 80035a2:	eb19 0309 	adds.w	r3, r9, r9
 80035a6:	eb4a 040a 	adc.w	r4, sl, sl
 80035aa:	4699      	mov	r9, r3
 80035ac:	46a2      	mov	sl, r4
 80035ae:	eb19 090b 	adds.w	r9, r9, fp
 80035b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ca:	4689      	mov	r9, r1
 80035cc:	4692      	mov	sl, r2
 80035ce:	eb1b 0509 	adds.w	r5, fp, r9
 80035d2:	eb4c 060a 	adc.w	r6, ip, sl
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4619      	mov	r1, r3
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	f04f 0400 	mov.w	r4, #0
 80035e8:	0094      	lsls	r4, r2, #2
 80035ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ee:	008b      	lsls	r3, r1, #2
 80035f0:	461a      	mov	r2, r3
 80035f2:	4623      	mov	r3, r4
 80035f4:	4628      	mov	r0, r5
 80035f6:	4631      	mov	r1, r6
 80035f8:	f7fc fe62 	bl	80002c0 <__aeabi_uldivmod>
 80035fc:	4603      	mov	r3, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	461a      	mov	r2, r3
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <UART_SetConfig+0x3b4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	3332      	adds	r3, #50	; 0x32
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <UART_SetConfig+0x3b4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4442      	add	r2, r8
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003634:	40011000 	.word	0x40011000
 8003638:	40011400 	.word	0x40011400
 800363c:	51eb851f 	.word	0x51eb851f

08003640 <__errno>:
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <__errno+0x8>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000010 	.word	0x20000010

0800364c <__libc_init_array>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0d      	ldr	r6, [pc, #52]	; (8003684 <__libc_init_array+0x38>)
 8003650:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <__libc_init_array+0x3c>)
 8003652:	1ba4      	subs	r4, r4, r6
 8003654:	10a4      	asrs	r4, r4, #2
 8003656:	2500      	movs	r5, #0
 8003658:	42a5      	cmp	r5, r4
 800365a:	d109      	bne.n	8003670 <__libc_init_array+0x24>
 800365c:	4e0b      	ldr	r6, [pc, #44]	; (800368c <__libc_init_array+0x40>)
 800365e:	4c0c      	ldr	r4, [pc, #48]	; (8003690 <__libc_init_array+0x44>)
 8003660:	f001 f93a 	bl	80048d8 <_init>
 8003664:	1ba4      	subs	r4, r4, r6
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	2500      	movs	r5, #0
 800366a:	42a5      	cmp	r5, r4
 800366c:	d105      	bne.n	800367a <__libc_init_array+0x2e>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003674:	4798      	blx	r3
 8003676:	3501      	adds	r5, #1
 8003678:	e7ee      	b.n	8003658 <__libc_init_array+0xc>
 800367a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367e:	4798      	blx	r3
 8003680:	3501      	adds	r5, #1
 8003682:	e7f2      	b.n	800366a <__libc_init_array+0x1e>
 8003684:	08004e08 	.word	0x08004e08
 8003688:	08004e08 	.word	0x08004e08
 800368c:	08004e08 	.word	0x08004e08
 8003690:	08004e0c 	.word	0x08004e0c

08003694 <__locale_ctype_ptr_l>:
 8003694:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003698:	4770      	bx	lr
	...

0800369c <__locale_ctype_ptr>:
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__locale_ctype_ptr+0x14>)
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <__locale_ctype_ptr+0x18>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf08      	it	eq
 80036a8:	4613      	moveq	r3, r2
 80036aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80036ae:	4770      	bx	lr
 80036b0:	20000010 	.word	0x20000010
 80036b4:	20000074 	.word	0x20000074

080036b8 <__ascii_mbtowc>:
 80036b8:	b082      	sub	sp, #8
 80036ba:	b901      	cbnz	r1, 80036be <__ascii_mbtowc+0x6>
 80036bc:	a901      	add	r1, sp, #4
 80036be:	b142      	cbz	r2, 80036d2 <__ascii_mbtowc+0x1a>
 80036c0:	b14b      	cbz	r3, 80036d6 <__ascii_mbtowc+0x1e>
 80036c2:	7813      	ldrb	r3, [r2, #0]
 80036c4:	600b      	str	r3, [r1, #0]
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	1c10      	adds	r0, r2, #0
 80036ca:	bf18      	it	ne
 80036cc:	2001      	movne	r0, #1
 80036ce:	b002      	add	sp, #8
 80036d0:	4770      	bx	lr
 80036d2:	4610      	mov	r0, r2
 80036d4:	e7fb      	b.n	80036ce <__ascii_mbtowc+0x16>
 80036d6:	f06f 0001 	mvn.w	r0, #1
 80036da:	e7f8      	b.n	80036ce <__ascii_mbtowc+0x16>

080036dc <memcpy>:
 80036dc:	b510      	push	{r4, lr}
 80036de:	1e43      	subs	r3, r0, #1
 80036e0:	440a      	add	r2, r1
 80036e2:	4291      	cmp	r1, r2
 80036e4:	d100      	bne.n	80036e8 <memcpy+0xc>
 80036e6:	bd10      	pop	{r4, pc}
 80036e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036f0:	e7f7      	b.n	80036e2 <memcpy+0x6>

080036f2 <memset>:
 80036f2:	4402      	add	r2, r0
 80036f4:	4603      	mov	r3, r0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d100      	bne.n	80036fc <memset+0xa>
 80036fa:	4770      	bx	lr
 80036fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003700:	e7f9      	b.n	80036f6 <memset+0x4>
	...

08003704 <siscanf>:
 8003704:	b40e      	push	{r1, r2, r3}
 8003706:	b530      	push	{r4, r5, lr}
 8003708:	b09c      	sub	sp, #112	; 0x70
 800370a:	ac1f      	add	r4, sp, #124	; 0x7c
 800370c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003710:	f854 5b04 	ldr.w	r5, [r4], #4
 8003714:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003718:	9002      	str	r0, [sp, #8]
 800371a:	9006      	str	r0, [sp, #24]
 800371c:	f7fc fd72 	bl	8000204 <strlen>
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <siscanf+0x4c>)
 8003722:	9003      	str	r0, [sp, #12]
 8003724:	9007      	str	r0, [sp, #28]
 8003726:	930b      	str	r3, [sp, #44]	; 0x2c
 8003728:	480a      	ldr	r0, [pc, #40]	; (8003754 <siscanf+0x50>)
 800372a:	9401      	str	r4, [sp, #4]
 800372c:	2300      	movs	r3, #0
 800372e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003730:	9314      	str	r3, [sp, #80]	; 0x50
 8003732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003736:	f8ad 3016 	strh.w	r3, [sp, #22]
 800373a:	462a      	mov	r2, r5
 800373c:	4623      	mov	r3, r4
 800373e:	a902      	add	r1, sp, #8
 8003740:	6800      	ldr	r0, [r0, #0]
 8003742:	f000 fa11 	bl	8003b68 <__ssvfiscanf_r>
 8003746:	b01c      	add	sp, #112	; 0x70
 8003748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800374c:	b003      	add	sp, #12
 800374e:	4770      	bx	lr
 8003750:	08003759 	.word	0x08003759
 8003754:	20000010 	.word	0x20000010

08003758 <__seofread>:
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr

0800375c <strncmp>:
 800375c:	b510      	push	{r4, lr}
 800375e:	b16a      	cbz	r2, 800377c <strncmp+0x20>
 8003760:	3901      	subs	r1, #1
 8003762:	1884      	adds	r4, r0, r2
 8003764:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003768:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800376c:	4293      	cmp	r3, r2
 800376e:	d103      	bne.n	8003778 <strncmp+0x1c>
 8003770:	42a0      	cmp	r0, r4
 8003772:	d001      	beq.n	8003778 <strncmp+0x1c>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f5      	bne.n	8003764 <strncmp+0x8>
 8003778:	1a98      	subs	r0, r3, r2
 800377a:	bd10      	pop	{r4, pc}
 800377c:	4610      	mov	r0, r2
 800377e:	e7fc      	b.n	800377a <strncmp+0x1e>

08003780 <_vsniprintf_r>:
 8003780:	b530      	push	{r4, r5, lr}
 8003782:	1e14      	subs	r4, r2, #0
 8003784:	4605      	mov	r5, r0
 8003786:	b09b      	sub	sp, #108	; 0x6c
 8003788:	4618      	mov	r0, r3
 800378a:	da05      	bge.n	8003798 <_vsniprintf_r+0x18>
 800378c:	238b      	movs	r3, #139	; 0x8b
 800378e:	602b      	str	r3, [r5, #0]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	b01b      	add	sp, #108	; 0x6c
 8003796:	bd30      	pop	{r4, r5, pc}
 8003798:	f44f 7302 	mov.w	r3, #520	; 0x208
 800379c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80037a0:	bf14      	ite	ne
 80037a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80037a6:	4623      	moveq	r3, r4
 80037a8:	9302      	str	r3, [sp, #8]
 80037aa:	9305      	str	r3, [sp, #20]
 80037ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037b0:	9100      	str	r1, [sp, #0]
 80037b2:	9104      	str	r1, [sp, #16]
 80037b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80037b8:	4602      	mov	r2, r0
 80037ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80037bc:	4669      	mov	r1, sp
 80037be:	4628      	mov	r0, r5
 80037c0:	f000 f880 	bl	80038c4 <_svfiprintf_r>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	bfbc      	itt	lt
 80037c8:	238b      	movlt	r3, #139	; 0x8b
 80037ca:	602b      	strlt	r3, [r5, #0]
 80037cc:	2c00      	cmp	r4, #0
 80037ce:	d0e1      	beq.n	8003794 <_vsniprintf_r+0x14>
 80037d0:	9b00      	ldr	r3, [sp, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e7dd      	b.n	8003794 <_vsniprintf_r+0x14>

080037d8 <vsniprintf>:
 80037d8:	b507      	push	{r0, r1, r2, lr}
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	460a      	mov	r2, r1
 80037e0:	4601      	mov	r1, r0
 80037e2:	4803      	ldr	r0, [pc, #12]	; (80037f0 <vsniprintf+0x18>)
 80037e4:	6800      	ldr	r0, [r0, #0]
 80037e6:	f7ff ffcb 	bl	8003780 <_vsniprintf_r>
 80037ea:	b003      	add	sp, #12
 80037ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80037f0:	20000010 	.word	0x20000010

080037f4 <__ascii_wctomb>:
 80037f4:	b149      	cbz	r1, 800380a <__ascii_wctomb+0x16>
 80037f6:	2aff      	cmp	r2, #255	; 0xff
 80037f8:	bf85      	ittet	hi
 80037fa:	238a      	movhi	r3, #138	; 0x8a
 80037fc:	6003      	strhi	r3, [r0, #0]
 80037fe:	700a      	strbls	r2, [r1, #0]
 8003800:	f04f 30ff 	movhi.w	r0, #4294967295
 8003804:	bf98      	it	ls
 8003806:	2001      	movls	r0, #1
 8003808:	4770      	bx	lr
 800380a:	4608      	mov	r0, r1
 800380c:	4770      	bx	lr

0800380e <__ssputs_r>:
 800380e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003812:	688e      	ldr	r6, [r1, #8]
 8003814:	429e      	cmp	r6, r3
 8003816:	4682      	mov	sl, r0
 8003818:	460c      	mov	r4, r1
 800381a:	4690      	mov	r8, r2
 800381c:	4699      	mov	r9, r3
 800381e:	d837      	bhi.n	8003890 <__ssputs_r+0x82>
 8003820:	898a      	ldrh	r2, [r1, #12]
 8003822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003826:	d031      	beq.n	800388c <__ssputs_r+0x7e>
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	6909      	ldr	r1, [r1, #16]
 800382c:	1a6f      	subs	r7, r5, r1
 800382e:	6965      	ldr	r5, [r4, #20]
 8003830:	2302      	movs	r3, #2
 8003832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003836:	fb95 f5f3 	sdiv	r5, r5, r3
 800383a:	f109 0301 	add.w	r3, r9, #1
 800383e:	443b      	add	r3, r7
 8003840:	429d      	cmp	r5, r3
 8003842:	bf38      	it	cc
 8003844:	461d      	movcc	r5, r3
 8003846:	0553      	lsls	r3, r2, #21
 8003848:	d530      	bpl.n	80038ac <__ssputs_r+0x9e>
 800384a:	4629      	mov	r1, r5
 800384c:	f000 ffaa 	bl	80047a4 <_malloc_r>
 8003850:	4606      	mov	r6, r0
 8003852:	b950      	cbnz	r0, 800386a <__ssputs_r+0x5c>
 8003854:	230c      	movs	r3, #12
 8003856:	f8ca 3000 	str.w	r3, [sl]
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	f04f 30ff 	mov.w	r0, #4294967295
 8003866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386a:	463a      	mov	r2, r7
 800386c:	6921      	ldr	r1, [r4, #16]
 800386e:	f7ff ff35 	bl	80036dc <memcpy>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	6126      	str	r6, [r4, #16]
 8003880:	6165      	str	r5, [r4, #20]
 8003882:	443e      	add	r6, r7
 8003884:	1bed      	subs	r5, r5, r7
 8003886:	6026      	str	r6, [r4, #0]
 8003888:	60a5      	str	r5, [r4, #8]
 800388a:	464e      	mov	r6, r9
 800388c:	454e      	cmp	r6, r9
 800388e:	d900      	bls.n	8003892 <__ssputs_r+0x84>
 8003890:	464e      	mov	r6, r9
 8003892:	4632      	mov	r2, r6
 8003894:	4641      	mov	r1, r8
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	f000 ff1c 	bl	80046d4 <memmove>
 800389c:	68a3      	ldr	r3, [r4, #8]
 800389e:	1b9b      	subs	r3, r3, r6
 80038a0:	60a3      	str	r3, [r4, #8]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	441e      	add	r6, r3
 80038a6:	6026      	str	r6, [r4, #0]
 80038a8:	2000      	movs	r0, #0
 80038aa:	e7dc      	b.n	8003866 <__ssputs_r+0x58>
 80038ac:	462a      	mov	r2, r5
 80038ae:	f000 ffd3 	bl	8004858 <_realloc_r>
 80038b2:	4606      	mov	r6, r0
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d1e2      	bne.n	800387e <__ssputs_r+0x70>
 80038b8:	6921      	ldr	r1, [r4, #16]
 80038ba:	4650      	mov	r0, sl
 80038bc:	f000 ff24 	bl	8004708 <_free_r>
 80038c0:	e7c8      	b.n	8003854 <__ssputs_r+0x46>
	...

080038c4 <_svfiprintf_r>:
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c8:	461d      	mov	r5, r3
 80038ca:	898b      	ldrh	r3, [r1, #12]
 80038cc:	061f      	lsls	r7, r3, #24
 80038ce:	b09d      	sub	sp, #116	; 0x74
 80038d0:	4680      	mov	r8, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	4616      	mov	r6, r2
 80038d6:	d50f      	bpl.n	80038f8 <_svfiprintf_r+0x34>
 80038d8:	690b      	ldr	r3, [r1, #16]
 80038da:	b96b      	cbnz	r3, 80038f8 <_svfiprintf_r+0x34>
 80038dc:	2140      	movs	r1, #64	; 0x40
 80038de:	f000 ff61 	bl	80047a4 <_malloc_r>
 80038e2:	6020      	str	r0, [r4, #0]
 80038e4:	6120      	str	r0, [r4, #16]
 80038e6:	b928      	cbnz	r0, 80038f4 <_svfiprintf_r+0x30>
 80038e8:	230c      	movs	r3, #12
 80038ea:	f8c8 3000 	str.w	r3, [r8]
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	e0c8      	b.n	8003a86 <_svfiprintf_r+0x1c2>
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	6163      	str	r3, [r4, #20]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9309      	str	r3, [sp, #36]	; 0x24
 80038fc:	2320      	movs	r3, #32
 80038fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003902:	2330      	movs	r3, #48	; 0x30
 8003904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003908:	9503      	str	r5, [sp, #12]
 800390a:	f04f 0b01 	mov.w	fp, #1
 800390e:	4637      	mov	r7, r6
 8003910:	463d      	mov	r5, r7
 8003912:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003916:	b10b      	cbz	r3, 800391c <_svfiprintf_r+0x58>
 8003918:	2b25      	cmp	r3, #37	; 0x25
 800391a:	d13e      	bne.n	800399a <_svfiprintf_r+0xd6>
 800391c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003920:	d00b      	beq.n	800393a <_svfiprintf_r+0x76>
 8003922:	4653      	mov	r3, sl
 8003924:	4632      	mov	r2, r6
 8003926:	4621      	mov	r1, r4
 8003928:	4640      	mov	r0, r8
 800392a:	f7ff ff70 	bl	800380e <__ssputs_r>
 800392e:	3001      	adds	r0, #1
 8003930:	f000 80a4 	beq.w	8003a7c <_svfiprintf_r+0x1b8>
 8003934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003936:	4453      	add	r3, sl
 8003938:	9309      	str	r3, [sp, #36]	; 0x24
 800393a:	783b      	ldrb	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 809d 	beq.w	8003a7c <_svfiprintf_r+0x1b8>
 8003942:	2300      	movs	r3, #0
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	9307      	str	r3, [sp, #28]
 8003950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003954:	931a      	str	r3, [sp, #104]	; 0x68
 8003956:	462f      	mov	r7, r5
 8003958:	2205      	movs	r2, #5
 800395a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800395e:	4850      	ldr	r0, [pc, #320]	; (8003aa0 <_svfiprintf_r+0x1dc>)
 8003960:	f7fc fc5e 	bl	8000220 <memchr>
 8003964:	9b04      	ldr	r3, [sp, #16]
 8003966:	b9d0      	cbnz	r0, 800399e <_svfiprintf_r+0xda>
 8003968:	06d9      	lsls	r1, r3, #27
 800396a:	bf44      	itt	mi
 800396c:	2220      	movmi	r2, #32
 800396e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003972:	071a      	lsls	r2, r3, #28
 8003974:	bf44      	itt	mi
 8003976:	222b      	movmi	r2, #43	; 0x2b
 8003978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800397c:	782a      	ldrb	r2, [r5, #0]
 800397e:	2a2a      	cmp	r2, #42	; 0x2a
 8003980:	d015      	beq.n	80039ae <_svfiprintf_r+0xea>
 8003982:	9a07      	ldr	r2, [sp, #28]
 8003984:	462f      	mov	r7, r5
 8003986:	2000      	movs	r0, #0
 8003988:	250a      	movs	r5, #10
 800398a:	4639      	mov	r1, r7
 800398c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003990:	3b30      	subs	r3, #48	; 0x30
 8003992:	2b09      	cmp	r3, #9
 8003994:	d94d      	bls.n	8003a32 <_svfiprintf_r+0x16e>
 8003996:	b1b8      	cbz	r0, 80039c8 <_svfiprintf_r+0x104>
 8003998:	e00f      	b.n	80039ba <_svfiprintf_r+0xf6>
 800399a:	462f      	mov	r7, r5
 800399c:	e7b8      	b.n	8003910 <_svfiprintf_r+0x4c>
 800399e:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <_svfiprintf_r+0x1dc>)
 80039a0:	1a80      	subs	r0, r0, r2
 80039a2:	fa0b f000 	lsl.w	r0, fp, r0
 80039a6:	4318      	orrs	r0, r3
 80039a8:	9004      	str	r0, [sp, #16]
 80039aa:	463d      	mov	r5, r7
 80039ac:	e7d3      	b.n	8003956 <_svfiprintf_r+0x92>
 80039ae:	9a03      	ldr	r2, [sp, #12]
 80039b0:	1d11      	adds	r1, r2, #4
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	9103      	str	r1, [sp, #12]
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	db01      	blt.n	80039be <_svfiprintf_r+0xfa>
 80039ba:	9207      	str	r2, [sp, #28]
 80039bc:	e004      	b.n	80039c8 <_svfiprintf_r+0x104>
 80039be:	4252      	negs	r2, r2
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	9207      	str	r2, [sp, #28]
 80039c6:	9304      	str	r3, [sp, #16]
 80039c8:	783b      	ldrb	r3, [r7, #0]
 80039ca:	2b2e      	cmp	r3, #46	; 0x2e
 80039cc:	d10c      	bne.n	80039e8 <_svfiprintf_r+0x124>
 80039ce:	787b      	ldrb	r3, [r7, #1]
 80039d0:	2b2a      	cmp	r3, #42	; 0x2a
 80039d2:	d133      	bne.n	8003a3c <_svfiprintf_r+0x178>
 80039d4:	9b03      	ldr	r3, [sp, #12]
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	9203      	str	r2, [sp, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bfb8      	it	lt
 80039e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80039e4:	3702      	adds	r7, #2
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	4d2e      	ldr	r5, [pc, #184]	; (8003aa4 <_svfiprintf_r+0x1e0>)
 80039ea:	7839      	ldrb	r1, [r7, #0]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4628      	mov	r0, r5
 80039f0:	f7fc fc16 	bl	8000220 <memchr>
 80039f4:	b138      	cbz	r0, 8003a06 <_svfiprintf_r+0x142>
 80039f6:	2340      	movs	r3, #64	; 0x40
 80039f8:	1b40      	subs	r0, r0, r5
 80039fa:	fa03 f000 	lsl.w	r0, r3, r0
 80039fe:	9b04      	ldr	r3, [sp, #16]
 8003a00:	4303      	orrs	r3, r0
 8003a02:	3701      	adds	r7, #1
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	7839      	ldrb	r1, [r7, #0]
 8003a08:	4827      	ldr	r0, [pc, #156]	; (8003aa8 <_svfiprintf_r+0x1e4>)
 8003a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a0e:	2206      	movs	r2, #6
 8003a10:	1c7e      	adds	r6, r7, #1
 8003a12:	f7fc fc05 	bl	8000220 <memchr>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d038      	beq.n	8003a8c <_svfiprintf_r+0x1c8>
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <_svfiprintf_r+0x1e8>)
 8003a1c:	bb13      	cbnz	r3, 8003a64 <_svfiprintf_r+0x1a0>
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	3307      	adds	r3, #7
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	3308      	adds	r3, #8
 8003a28:	9303      	str	r3, [sp, #12]
 8003a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a2c:	444b      	add	r3, r9
 8003a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a30:	e76d      	b.n	800390e <_svfiprintf_r+0x4a>
 8003a32:	fb05 3202 	mla	r2, r5, r2, r3
 8003a36:	2001      	movs	r0, #1
 8003a38:	460f      	mov	r7, r1
 8003a3a:	e7a6      	b.n	800398a <_svfiprintf_r+0xc6>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	3701      	adds	r7, #1
 8003a40:	9305      	str	r3, [sp, #20]
 8003a42:	4619      	mov	r1, r3
 8003a44:	250a      	movs	r5, #10
 8003a46:	4638      	mov	r0, r7
 8003a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a4c:	3a30      	subs	r2, #48	; 0x30
 8003a4e:	2a09      	cmp	r2, #9
 8003a50:	d903      	bls.n	8003a5a <_svfiprintf_r+0x196>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0c8      	beq.n	80039e8 <_svfiprintf_r+0x124>
 8003a56:	9105      	str	r1, [sp, #20]
 8003a58:	e7c6      	b.n	80039e8 <_svfiprintf_r+0x124>
 8003a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4607      	mov	r7, r0
 8003a62:	e7f0      	b.n	8003a46 <_svfiprintf_r+0x182>
 8003a64:	ab03      	add	r3, sp, #12
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	4622      	mov	r2, r4
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <_svfiprintf_r+0x1ec>)
 8003a6c:	a904      	add	r1, sp, #16
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f3af 8000 	nop.w
 8003a74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a78:	4681      	mov	r9, r0
 8003a7a:	d1d6      	bne.n	8003a2a <_svfiprintf_r+0x166>
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	065b      	lsls	r3, r3, #25
 8003a80:	f53f af35 	bmi.w	80038ee <_svfiprintf_r+0x2a>
 8003a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a86:	b01d      	add	sp, #116	; 0x74
 8003a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8c:	ab03      	add	r3, sp, #12
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4622      	mov	r2, r4
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <_svfiprintf_r+0x1ec>)
 8003a94:	a904      	add	r1, sp, #16
 8003a96:	4640      	mov	r0, r8
 8003a98:	f000 fa2c 	bl	8003ef4 <_printf_i>
 8003a9c:	e7ea      	b.n	8003a74 <_svfiprintf_r+0x1b0>
 8003a9e:	bf00      	nop
 8003aa0:	08004d4f 	.word	0x08004d4f
 8003aa4:	08004d55 	.word	0x08004d55
 8003aa8:	08004d59 	.word	0x08004d59
 8003aac:	00000000 	.word	0x00000000
 8003ab0:	0800380f 	.word	0x0800380f

08003ab4 <_sungetc_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	1c4b      	adds	r3, r1, #1
 8003ab8:	4614      	mov	r4, r2
 8003aba:	d103      	bne.n	8003ac4 <_sungetc_r+0x10>
 8003abc:	f04f 35ff 	mov.w	r5, #4294967295
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	8993      	ldrh	r3, [r2, #12]
 8003ac6:	f023 0320 	bic.w	r3, r3, #32
 8003aca:	8193      	strh	r3, [r2, #12]
 8003acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	b2cd      	uxtb	r5, r1
 8003ad2:	b18b      	cbz	r3, 8003af8 <_sungetc_r+0x44>
 8003ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	dd08      	ble.n	8003aec <_sungetc_r+0x38>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	6022      	str	r2, [r4, #0]
 8003ae0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6063      	str	r3, [r4, #4]
 8003aea:	e7e9      	b.n	8003ac0 <_sungetc_r+0xc>
 8003aec:	4621      	mov	r1, r4
 8003aee:	f000 fdb7 	bl	8004660 <__submore>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0f1      	beq.n	8003ada <_sungetc_r+0x26>
 8003af6:	e7e1      	b.n	8003abc <_sungetc_r+0x8>
 8003af8:	6921      	ldr	r1, [r4, #16]
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	b151      	cbz	r1, 8003b14 <_sungetc_r+0x60>
 8003afe:	4299      	cmp	r1, r3
 8003b00:	d208      	bcs.n	8003b14 <_sungetc_r+0x60>
 8003b02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003b06:	42a9      	cmp	r1, r5
 8003b08:	d104      	bne.n	8003b14 <_sungetc_r+0x60>
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	3201      	adds	r2, #1
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	6062      	str	r2, [r4, #4]
 8003b12:	e7d5      	b.n	8003ac0 <_sungetc_r+0xc>
 8003b14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b1e:	2303      	movs	r3, #3
 8003b20:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b22:	4623      	mov	r3, r4
 8003b24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e7dc      	b.n	8003ae8 <_sungetc_r+0x34>

08003b2e <__ssrefill_r>:
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	460c      	mov	r4, r1
 8003b32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003b34:	b169      	cbz	r1, 8003b52 <__ssrefill_r+0x24>
 8003b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b3a:	4299      	cmp	r1, r3
 8003b3c:	d001      	beq.n	8003b42 <__ssrefill_r+0x14>
 8003b3e:	f000 fde3 	bl	8004708 <_free_r>
 8003b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b44:	6063      	str	r3, [r4, #4]
 8003b46:	2000      	movs	r0, #0
 8003b48:	6360      	str	r0, [r4, #52]	; 0x34
 8003b4a:	b113      	cbz	r3, 8003b52 <__ssrefill_r+0x24>
 8003b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	6063      	str	r3, [r4, #4]
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	f043 0320 	orr.w	r3, r3, #32
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	e7f3      	b.n	8003b50 <__ssrefill_r+0x22>

08003b68 <__ssvfiscanf_r>:
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003b70:	460c      	mov	r4, r1
 8003b72:	2100      	movs	r1, #0
 8003b74:	9144      	str	r1, [sp, #272]	; 0x110
 8003b76:	9145      	str	r1, [sp, #276]	; 0x114
 8003b78:	499f      	ldr	r1, [pc, #636]	; (8003df8 <__ssvfiscanf_r+0x290>)
 8003b7a:	91a0      	str	r1, [sp, #640]	; 0x280
 8003b7c:	f10d 0804 	add.w	r8, sp, #4
 8003b80:	499e      	ldr	r1, [pc, #632]	; (8003dfc <__ssvfiscanf_r+0x294>)
 8003b82:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003e00 <__ssvfiscanf_r+0x298>
 8003b86:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	4692      	mov	sl, r2
 8003b8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	270a      	movs	r7, #10
 8003b94:	f89a 3000 	ldrb.w	r3, [sl]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 812a 	beq.w	8003df2 <__ssvfiscanf_r+0x28a>
 8003b9e:	4655      	mov	r5, sl
 8003ba0:	f7ff fd7c 	bl	800369c <__locale_ctype_ptr>
 8003ba4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8003ba8:	4458      	add	r0, fp
 8003baa:	7843      	ldrb	r3, [r0, #1]
 8003bac:	f013 0308 	ands.w	r3, r3, #8
 8003bb0:	d01c      	beq.n	8003bec <__ssvfiscanf_r+0x84>
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	dd12      	ble.n	8003bde <__ssvfiscanf_r+0x76>
 8003bb8:	f7ff fd70 	bl	800369c <__locale_ctype_ptr>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	4410      	add	r0, r2
 8003bc2:	7842      	ldrb	r2, [r0, #1]
 8003bc4:	0712      	lsls	r2, r2, #28
 8003bc6:	d401      	bmi.n	8003bcc <__ssvfiscanf_r+0x64>
 8003bc8:	46aa      	mov	sl, r5
 8003bca:	e7e3      	b.n	8003b94 <__ssvfiscanf_r+0x2c>
 8003bcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003bce:	3201      	adds	r2, #1
 8003bd0:	9245      	str	r2, [sp, #276]	; 0x114
 8003bd2:	6862      	ldr	r2, [r4, #4]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	6062      	str	r2, [r4, #4]
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	e7e9      	b.n	8003bb2 <__ssvfiscanf_r+0x4a>
 8003bde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003be0:	4621      	mov	r1, r4
 8003be2:	4630      	mov	r0, r6
 8003be4:	4798      	blx	r3
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d0e6      	beq.n	8003bb8 <__ssvfiscanf_r+0x50>
 8003bea:	e7ed      	b.n	8003bc8 <__ssvfiscanf_r+0x60>
 8003bec:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003bf0:	f040 8082 	bne.w	8003cf8 <__ssvfiscanf_r+0x190>
 8003bf4:	9343      	str	r3, [sp, #268]	; 0x10c
 8003bf6:	9341      	str	r3, [sp, #260]	; 0x104
 8003bf8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfe:	d103      	bne.n	8003c08 <__ssvfiscanf_r+0xa0>
 8003c00:	2310      	movs	r3, #16
 8003c02:	9341      	str	r3, [sp, #260]	; 0x104
 8003c04:	f10a 0502 	add.w	r5, sl, #2
 8003c08:	46aa      	mov	sl, r5
 8003c0a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003c0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003c12:	2a09      	cmp	r2, #9
 8003c14:	d922      	bls.n	8003c5c <__ssvfiscanf_r+0xf4>
 8003c16:	2203      	movs	r2, #3
 8003c18:	4879      	ldr	r0, [pc, #484]	; (8003e00 <__ssvfiscanf_r+0x298>)
 8003c1a:	f7fc fb01 	bl	8000220 <memchr>
 8003c1e:	b138      	cbz	r0, 8003c30 <__ssvfiscanf_r+0xc8>
 8003c20:	eba0 0309 	sub.w	r3, r0, r9
 8003c24:	2001      	movs	r0, #1
 8003c26:	4098      	lsls	r0, r3
 8003c28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c2a:	4318      	orrs	r0, r3
 8003c2c:	9041      	str	r0, [sp, #260]	; 0x104
 8003c2e:	46aa      	mov	sl, r5
 8003c30:	f89a 3000 	ldrb.w	r3, [sl]
 8003c34:	2b67      	cmp	r3, #103	; 0x67
 8003c36:	f10a 0501 	add.w	r5, sl, #1
 8003c3a:	d82b      	bhi.n	8003c94 <__ssvfiscanf_r+0x12c>
 8003c3c:	2b65      	cmp	r3, #101	; 0x65
 8003c3e:	f080 809f 	bcs.w	8003d80 <__ssvfiscanf_r+0x218>
 8003c42:	2b47      	cmp	r3, #71	; 0x47
 8003c44:	d810      	bhi.n	8003c68 <__ssvfiscanf_r+0x100>
 8003c46:	2b45      	cmp	r3, #69	; 0x45
 8003c48:	f080 809a 	bcs.w	8003d80 <__ssvfiscanf_r+0x218>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06c      	beq.n	8003d2a <__ssvfiscanf_r+0x1c2>
 8003c50:	2b25      	cmp	r3, #37	; 0x25
 8003c52:	d051      	beq.n	8003cf8 <__ssvfiscanf_r+0x190>
 8003c54:	2303      	movs	r3, #3
 8003c56:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c58:	9742      	str	r7, [sp, #264]	; 0x108
 8003c5a:	e027      	b.n	8003cac <__ssvfiscanf_r+0x144>
 8003c5c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003c5e:	fb07 1303 	mla	r3, r7, r3, r1
 8003c62:	3b30      	subs	r3, #48	; 0x30
 8003c64:	9343      	str	r3, [sp, #268]	; 0x10c
 8003c66:	e7cf      	b.n	8003c08 <__ssvfiscanf_r+0xa0>
 8003c68:	2b5b      	cmp	r3, #91	; 0x5b
 8003c6a:	d06a      	beq.n	8003d42 <__ssvfiscanf_r+0x1da>
 8003c6c:	d80c      	bhi.n	8003c88 <__ssvfiscanf_r+0x120>
 8003c6e:	2b58      	cmp	r3, #88	; 0x58
 8003c70:	d1f0      	bne.n	8003c54 <__ssvfiscanf_r+0xec>
 8003c72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	9241      	str	r2, [sp, #260]	; 0x104
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	9242      	str	r2, [sp, #264]	; 0x108
 8003c7e:	2b6e      	cmp	r3, #110	; 0x6e
 8003c80:	bf8c      	ite	hi
 8003c82:	2304      	movhi	r3, #4
 8003c84:	2303      	movls	r3, #3
 8003c86:	e010      	b.n	8003caa <__ssvfiscanf_r+0x142>
 8003c88:	2b63      	cmp	r3, #99	; 0x63
 8003c8a:	d065      	beq.n	8003d58 <__ssvfiscanf_r+0x1f0>
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d1e1      	bne.n	8003c54 <__ssvfiscanf_r+0xec>
 8003c90:	9742      	str	r7, [sp, #264]	; 0x108
 8003c92:	e7f4      	b.n	8003c7e <__ssvfiscanf_r+0x116>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d04b      	beq.n	8003d30 <__ssvfiscanf_r+0x1c8>
 8003c98:	d826      	bhi.n	8003ce8 <__ssvfiscanf_r+0x180>
 8003c9a:	2b6e      	cmp	r3, #110	; 0x6e
 8003c9c:	d062      	beq.n	8003d64 <__ssvfiscanf_r+0x1fc>
 8003c9e:	d84c      	bhi.n	8003d3a <__ssvfiscanf_r+0x1d2>
 8003ca0:	2b69      	cmp	r3, #105	; 0x69
 8003ca2:	d1d7      	bne.n	8003c54 <__ssvfiscanf_r+0xec>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9342      	str	r3, [sp, #264]	; 0x108
 8003ca8:	2303      	movs	r3, #3
 8003caa:	9347      	str	r3, [sp, #284]	; 0x11c
 8003cac:	6863      	ldr	r3, [r4, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	dd68      	ble.n	8003d84 <__ssvfiscanf_r+0x21c>
 8003cb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cb4:	0659      	lsls	r1, r3, #25
 8003cb6:	d407      	bmi.n	8003cc8 <__ssvfiscanf_r+0x160>
 8003cb8:	f7ff fcf0 	bl	800369c <__locale_ctype_ptr>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	4410      	add	r0, r2
 8003cc2:	7842      	ldrb	r2, [r0, #1]
 8003cc4:	0712      	lsls	r2, r2, #28
 8003cc6:	d464      	bmi.n	8003d92 <__ssvfiscanf_r+0x22a>
 8003cc8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	dc73      	bgt.n	8003db6 <__ssvfiscanf_r+0x24e>
 8003cce:	466b      	mov	r3, sp
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	a941      	add	r1, sp, #260	; 0x104
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 fa1f 	bl	8004118 <_scanf_chars>
 8003cda:	2801      	cmp	r0, #1
 8003cdc:	f000 8089 	beq.w	8003df2 <__ssvfiscanf_r+0x28a>
 8003ce0:	2802      	cmp	r0, #2
 8003ce2:	f47f af71 	bne.w	8003bc8 <__ssvfiscanf_r+0x60>
 8003ce6:	e01d      	b.n	8003d24 <__ssvfiscanf_r+0x1bc>
 8003ce8:	2b75      	cmp	r3, #117	; 0x75
 8003cea:	d0d1      	beq.n	8003c90 <__ssvfiscanf_r+0x128>
 8003cec:	2b78      	cmp	r3, #120	; 0x78
 8003cee:	d0c0      	beq.n	8003c72 <__ssvfiscanf_r+0x10a>
 8003cf0:	2b73      	cmp	r3, #115	; 0x73
 8003cf2:	d1af      	bne.n	8003c54 <__ssvfiscanf_r+0xec>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e7d8      	b.n	8003caa <__ssvfiscanf_r+0x142>
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	dd0c      	ble.n	8003d18 <__ssvfiscanf_r+0x1b0>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	455a      	cmp	r2, fp
 8003d04:	d175      	bne.n	8003df2 <__ssvfiscanf_r+0x28a>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6862      	ldr	r2, [r4, #4]
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	3301      	adds	r3, #1
 8003d12:	6062      	str	r2, [r4, #4]
 8003d14:	9345      	str	r3, [sp, #276]	; 0x114
 8003d16:	e757      	b.n	8003bc8 <__ssvfiscanf_r+0x60>
 8003d18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4798      	blx	r3
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0ec      	beq.n	8003cfe <__ssvfiscanf_r+0x196>
 8003d24:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d159      	bne.n	8003dde <__ssvfiscanf_r+0x276>
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	e05c      	b.n	8003dea <__ssvfiscanf_r+0x282>
 8003d30:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d32:	f042 0220 	orr.w	r2, r2, #32
 8003d36:	9241      	str	r2, [sp, #260]	; 0x104
 8003d38:	e79b      	b.n	8003c72 <__ssvfiscanf_r+0x10a>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	9342      	str	r3, [sp, #264]	; 0x108
 8003d3e:	2304      	movs	r3, #4
 8003d40:	e7b3      	b.n	8003caa <__ssvfiscanf_r+0x142>
 8003d42:	4629      	mov	r1, r5
 8003d44:	4640      	mov	r0, r8
 8003d46:	f000 fb3f 	bl	80043c8 <__sccl>
 8003d4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d50:	9341      	str	r3, [sp, #260]	; 0x104
 8003d52:	4605      	mov	r5, r0
 8003d54:	2301      	movs	r3, #1
 8003d56:	e7a8      	b.n	8003caa <__ssvfiscanf_r+0x142>
 8003d58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5e:	9341      	str	r3, [sp, #260]	; 0x104
 8003d60:	2300      	movs	r3, #0
 8003d62:	e7a2      	b.n	8003caa <__ssvfiscanf_r+0x142>
 8003d64:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003d66:	06c3      	lsls	r3, r0, #27
 8003d68:	f53f af2e 	bmi.w	8003bc8 <__ssvfiscanf_r+0x60>
 8003d6c:	9b00      	ldr	r3, [sp, #0]
 8003d6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d70:	1d19      	adds	r1, r3, #4
 8003d72:	9100      	str	r1, [sp, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	07c0      	lsls	r0, r0, #31
 8003d78:	bf4c      	ite	mi
 8003d7a:	801a      	strhmi	r2, [r3, #0]
 8003d7c:	601a      	strpl	r2, [r3, #0]
 8003d7e:	e723      	b.n	8003bc8 <__ssvfiscanf_r+0x60>
 8003d80:	2305      	movs	r3, #5
 8003d82:	e792      	b.n	8003caa <__ssvfiscanf_r+0x142>
 8003d84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d86:	4621      	mov	r1, r4
 8003d88:	4630      	mov	r0, r6
 8003d8a:	4798      	blx	r3
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d090      	beq.n	8003cb2 <__ssvfiscanf_r+0x14a>
 8003d90:	e7c8      	b.n	8003d24 <__ssvfiscanf_r+0x1bc>
 8003d92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d94:	3201      	adds	r2, #1
 8003d96:	9245      	str	r2, [sp, #276]	; 0x114
 8003d98:	6862      	ldr	r2, [r4, #4]
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	6062      	str	r2, [r4, #4]
 8003da0:	dd02      	ble.n	8003da8 <__ssvfiscanf_r+0x240>
 8003da2:	3301      	adds	r3, #1
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	e787      	b.n	8003cb8 <__ssvfiscanf_r+0x150>
 8003da8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003daa:	4621      	mov	r1, r4
 8003dac:	4630      	mov	r0, r6
 8003dae:	4798      	blx	r3
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d081      	beq.n	8003cb8 <__ssvfiscanf_r+0x150>
 8003db4:	e7b6      	b.n	8003d24 <__ssvfiscanf_r+0x1bc>
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	dc06      	bgt.n	8003dc8 <__ssvfiscanf_r+0x260>
 8003dba:	466b      	mov	r3, sp
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	a941      	add	r1, sp, #260	; 0x104
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f000 fa0d 	bl	80041e0 <_scanf_i>
 8003dc6:	e788      	b.n	8003cda <__ssvfiscanf_r+0x172>
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <__ssvfiscanf_r+0x29c>)
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f43f aefc 	beq.w	8003bc8 <__ssvfiscanf_r+0x60>
 8003dd0:	466b      	mov	r3, sp
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	a941      	add	r1, sp, #260	; 0x104
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f3af 8000 	nop.w
 8003ddc:	e77d      	b.n	8003cda <__ssvfiscanf_r+0x172>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003de4:	bf18      	it	ne
 8003de6:	f04f 30ff 	movne.w	r0, #4294967295
 8003dea:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003df4:	e7f9      	b.n	8003dea <__ssvfiscanf_r+0x282>
 8003df6:	bf00      	nop
 8003df8:	08003ab5 	.word	0x08003ab5
 8003dfc:	08003b2f 	.word	0x08003b2f
 8003e00:	08004d55 	.word	0x08004d55
 8003e04:	00000000 	.word	0x00000000

08003e08 <_printf_common>:
 8003e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	4691      	mov	r9, r2
 8003e0e:	461f      	mov	r7, r3
 8003e10:	688a      	ldr	r2, [r1, #8]
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfb8      	it	lt
 8003e1c:	4613      	movlt	r3, r2
 8003e1e:	f8c9 3000 	str.w	r3, [r9]
 8003e22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e26:	4606      	mov	r6, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	b112      	cbz	r2, 8003e32 <_printf_common+0x2a>
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f8c9 3000 	str.w	r3, [r9]
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	0699      	lsls	r1, r3, #26
 8003e36:	bf42      	ittt	mi
 8003e38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e3c:	3302      	addmi	r3, #2
 8003e3e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e42:	6825      	ldr	r5, [r4, #0]
 8003e44:	f015 0506 	ands.w	r5, r5, #6
 8003e48:	d107      	bne.n	8003e5a <_printf_common+0x52>
 8003e4a:	f104 0a19 	add.w	sl, r4, #25
 8003e4e:	68e3      	ldr	r3, [r4, #12]
 8003e50:	f8d9 2000 	ldr.w	r2, [r9]
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	42ab      	cmp	r3, r5
 8003e58:	dc28      	bgt.n	8003eac <_printf_common+0xa4>
 8003e5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	3300      	adds	r3, #0
 8003e62:	bf18      	it	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	0692      	lsls	r2, r2, #26
 8003e68:	d42d      	bmi.n	8003ec6 <_printf_common+0xbe>
 8003e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e6e:	4639      	mov	r1, r7
 8003e70:	4630      	mov	r0, r6
 8003e72:	47c0      	blx	r8
 8003e74:	3001      	adds	r0, #1
 8003e76:	d020      	beq.n	8003eba <_printf_common+0xb2>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	68e5      	ldr	r5, [r4, #12]
 8003e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e80:	f003 0306 	and.w	r3, r3, #6
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	bf08      	it	eq
 8003e88:	1aad      	subeq	r5, r5, r2
 8003e8a:	68a3      	ldr	r3, [r4, #8]
 8003e8c:	6922      	ldr	r2, [r4, #16]
 8003e8e:	bf0c      	ite	eq
 8003e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e94:	2500      	movne	r5, #0
 8003e96:	4293      	cmp	r3, r2
 8003e98:	bfc4      	itt	gt
 8003e9a:	1a9b      	subgt	r3, r3, r2
 8003e9c:	18ed      	addgt	r5, r5, r3
 8003e9e:	f04f 0900 	mov.w	r9, #0
 8003ea2:	341a      	adds	r4, #26
 8003ea4:	454d      	cmp	r5, r9
 8003ea6:	d11a      	bne.n	8003ede <_printf_common+0xd6>
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e008      	b.n	8003ebe <_printf_common+0xb6>
 8003eac:	2301      	movs	r3, #1
 8003eae:	4652      	mov	r2, sl
 8003eb0:	4639      	mov	r1, r7
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	47c0      	blx	r8
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d103      	bne.n	8003ec2 <_printf_common+0xba>
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec2:	3501      	adds	r5, #1
 8003ec4:	e7c3      	b.n	8003e4e <_printf_common+0x46>
 8003ec6:	18e1      	adds	r1, r4, r3
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	2030      	movs	r0, #48	; 0x30
 8003ecc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ed0:	4422      	add	r2, r4
 8003ed2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eda:	3302      	adds	r3, #2
 8003edc:	e7c5      	b.n	8003e6a <_printf_common+0x62>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4639      	mov	r1, r7
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	47c0      	blx	r8
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d0e6      	beq.n	8003eba <_printf_common+0xb2>
 8003eec:	f109 0901 	add.w	r9, r9, #1
 8003ef0:	e7d8      	b.n	8003ea4 <_printf_common+0x9c>
	...

08003ef4 <_printf_i>:
 8003ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003efc:	460c      	mov	r4, r1
 8003efe:	7e09      	ldrb	r1, [r1, #24]
 8003f00:	b085      	sub	sp, #20
 8003f02:	296e      	cmp	r1, #110	; 0x6e
 8003f04:	4617      	mov	r7, r2
 8003f06:	4606      	mov	r6, r0
 8003f08:	4698      	mov	r8, r3
 8003f0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f0c:	f000 80b3 	beq.w	8004076 <_printf_i+0x182>
 8003f10:	d822      	bhi.n	8003f58 <_printf_i+0x64>
 8003f12:	2963      	cmp	r1, #99	; 0x63
 8003f14:	d036      	beq.n	8003f84 <_printf_i+0x90>
 8003f16:	d80a      	bhi.n	8003f2e <_printf_i+0x3a>
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	f000 80b9 	beq.w	8004090 <_printf_i+0x19c>
 8003f1e:	2958      	cmp	r1, #88	; 0x58
 8003f20:	f000 8083 	beq.w	800402a <_printf_i+0x136>
 8003f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f2c:	e032      	b.n	8003f94 <_printf_i+0xa0>
 8003f2e:	2964      	cmp	r1, #100	; 0x64
 8003f30:	d001      	beq.n	8003f36 <_printf_i+0x42>
 8003f32:	2969      	cmp	r1, #105	; 0x69
 8003f34:	d1f6      	bne.n	8003f24 <_printf_i+0x30>
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	0605      	lsls	r5, r0, #24
 8003f3c:	f103 0104 	add.w	r1, r3, #4
 8003f40:	d52a      	bpl.n	8003f98 <_printf_i+0xa4>
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6011      	str	r1, [r2, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da03      	bge.n	8003f52 <_printf_i+0x5e>
 8003f4a:	222d      	movs	r2, #45	; 0x2d
 8003f4c:	425b      	negs	r3, r3
 8003f4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f52:	486f      	ldr	r0, [pc, #444]	; (8004110 <_printf_i+0x21c>)
 8003f54:	220a      	movs	r2, #10
 8003f56:	e039      	b.n	8003fcc <_printf_i+0xd8>
 8003f58:	2973      	cmp	r1, #115	; 0x73
 8003f5a:	f000 809d 	beq.w	8004098 <_printf_i+0x1a4>
 8003f5e:	d808      	bhi.n	8003f72 <_printf_i+0x7e>
 8003f60:	296f      	cmp	r1, #111	; 0x6f
 8003f62:	d020      	beq.n	8003fa6 <_printf_i+0xb2>
 8003f64:	2970      	cmp	r1, #112	; 0x70
 8003f66:	d1dd      	bne.n	8003f24 <_printf_i+0x30>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	f043 0320 	orr.w	r3, r3, #32
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	e003      	b.n	8003f7a <_printf_i+0x86>
 8003f72:	2975      	cmp	r1, #117	; 0x75
 8003f74:	d017      	beq.n	8003fa6 <_printf_i+0xb2>
 8003f76:	2978      	cmp	r1, #120	; 0x78
 8003f78:	d1d4      	bne.n	8003f24 <_printf_i+0x30>
 8003f7a:	2378      	movs	r3, #120	; 0x78
 8003f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f80:	4864      	ldr	r0, [pc, #400]	; (8004114 <_printf_i+0x220>)
 8003f82:	e055      	b.n	8004030 <_printf_i+0x13c>
 8003f84:	6813      	ldr	r3, [r2, #0]
 8003f86:	1d19      	adds	r1, r3, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f94:	2301      	movs	r3, #1
 8003f96:	e08c      	b.n	80040b2 <_printf_i+0x1be>
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6011      	str	r1, [r2, #0]
 8003f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fa0:	bf18      	it	ne
 8003fa2:	b21b      	sxthne	r3, r3
 8003fa4:	e7cf      	b.n	8003f46 <_printf_i+0x52>
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	6825      	ldr	r5, [r4, #0]
 8003faa:	1d18      	adds	r0, r3, #4
 8003fac:	6010      	str	r0, [r2, #0]
 8003fae:	0628      	lsls	r0, r5, #24
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_i+0xc2>
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <_printf_i+0xc8>
 8003fb6:	0668      	lsls	r0, r5, #25
 8003fb8:	d5fb      	bpl.n	8003fb2 <_printf_i+0xbe>
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	4854      	ldr	r0, [pc, #336]	; (8004110 <_printf_i+0x21c>)
 8003fbe:	296f      	cmp	r1, #111	; 0x6f
 8003fc0:	bf14      	ite	ne
 8003fc2:	220a      	movne	r2, #10
 8003fc4:	2208      	moveq	r2, #8
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fcc:	6865      	ldr	r5, [r4, #4]
 8003fce:	60a5      	str	r5, [r4, #8]
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	f2c0 8095 	blt.w	8004100 <_printf_i+0x20c>
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	f021 0104 	bic.w	r1, r1, #4
 8003fdc:	6021      	str	r1, [r4, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d13d      	bne.n	800405e <_printf_i+0x16a>
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	f040 808e 	bne.w	8004104 <_printf_i+0x210>
 8003fe8:	4665      	mov	r5, ip
 8003fea:	2a08      	cmp	r2, #8
 8003fec:	d10b      	bne.n	8004006 <_printf_i+0x112>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	07db      	lsls	r3, r3, #31
 8003ff2:	d508      	bpl.n	8004006 <_printf_i+0x112>
 8003ff4:	6923      	ldr	r3, [r4, #16]
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	bfde      	ittt	le
 8003ffc:	2330      	movle	r3, #48	; 0x30
 8003ffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004002:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004006:	ebac 0305 	sub.w	r3, ip, r5
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	f8cd 8000 	str.w	r8, [sp]
 8004010:	463b      	mov	r3, r7
 8004012:	aa03      	add	r2, sp, #12
 8004014:	4621      	mov	r1, r4
 8004016:	4630      	mov	r0, r6
 8004018:	f7ff fef6 	bl	8003e08 <_printf_common>
 800401c:	3001      	adds	r0, #1
 800401e:	d14d      	bne.n	80040bc <_printf_i+0x1c8>
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	b005      	add	sp, #20
 8004026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800402a:	4839      	ldr	r0, [pc, #228]	; (8004110 <_printf_i+0x21c>)
 800402c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004030:	6813      	ldr	r3, [r2, #0]
 8004032:	6821      	ldr	r1, [r4, #0]
 8004034:	1d1d      	adds	r5, r3, #4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6015      	str	r5, [r2, #0]
 800403a:	060a      	lsls	r2, r1, #24
 800403c:	d50b      	bpl.n	8004056 <_printf_i+0x162>
 800403e:	07ca      	lsls	r2, r1, #31
 8004040:	bf44      	itt	mi
 8004042:	f041 0120 	orrmi.w	r1, r1, #32
 8004046:	6021      	strmi	r1, [r4, #0]
 8004048:	b91b      	cbnz	r3, 8004052 <_printf_i+0x15e>
 800404a:	6822      	ldr	r2, [r4, #0]
 800404c:	f022 0220 	bic.w	r2, r2, #32
 8004050:	6022      	str	r2, [r4, #0]
 8004052:	2210      	movs	r2, #16
 8004054:	e7b7      	b.n	8003fc6 <_printf_i+0xd2>
 8004056:	064d      	lsls	r5, r1, #25
 8004058:	bf48      	it	mi
 800405a:	b29b      	uxthmi	r3, r3
 800405c:	e7ef      	b.n	800403e <_printf_i+0x14a>
 800405e:	4665      	mov	r5, ip
 8004060:	fbb3 f1f2 	udiv	r1, r3, r2
 8004064:	fb02 3311 	mls	r3, r2, r1, r3
 8004068:	5cc3      	ldrb	r3, [r0, r3]
 800406a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800406e:	460b      	mov	r3, r1
 8004070:	2900      	cmp	r1, #0
 8004072:	d1f5      	bne.n	8004060 <_printf_i+0x16c>
 8004074:	e7b9      	b.n	8003fea <_printf_i+0xf6>
 8004076:	6813      	ldr	r3, [r2, #0]
 8004078:	6825      	ldr	r5, [r4, #0]
 800407a:	6961      	ldr	r1, [r4, #20]
 800407c:	1d18      	adds	r0, r3, #4
 800407e:	6010      	str	r0, [r2, #0]
 8004080:	0628      	lsls	r0, r5, #24
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	d501      	bpl.n	800408a <_printf_i+0x196>
 8004086:	6019      	str	r1, [r3, #0]
 8004088:	e002      	b.n	8004090 <_printf_i+0x19c>
 800408a:	066a      	lsls	r2, r5, #25
 800408c:	d5fb      	bpl.n	8004086 <_printf_i+0x192>
 800408e:	8019      	strh	r1, [r3, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	4665      	mov	r5, ip
 8004096:	e7b9      	b.n	800400c <_printf_i+0x118>
 8004098:	6813      	ldr	r3, [r2, #0]
 800409a:	1d19      	adds	r1, r3, #4
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	681d      	ldr	r5, [r3, #0]
 80040a0:	6862      	ldr	r2, [r4, #4]
 80040a2:	2100      	movs	r1, #0
 80040a4:	4628      	mov	r0, r5
 80040a6:	f7fc f8bb 	bl	8000220 <memchr>
 80040aa:	b108      	cbz	r0, 80040b0 <_printf_i+0x1bc>
 80040ac:	1b40      	subs	r0, r0, r5
 80040ae:	6060      	str	r0, [r4, #4]
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	6123      	str	r3, [r4, #16]
 80040b4:	2300      	movs	r3, #0
 80040b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ba:	e7a7      	b.n	800400c <_printf_i+0x118>
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	462a      	mov	r2, r5
 80040c0:	4639      	mov	r1, r7
 80040c2:	4630      	mov	r0, r6
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d0aa      	beq.n	8004020 <_printf_i+0x12c>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	079b      	lsls	r3, r3, #30
 80040ce:	d413      	bmi.n	80040f8 <_printf_i+0x204>
 80040d0:	68e0      	ldr	r0, [r4, #12]
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	4298      	cmp	r0, r3
 80040d6:	bfb8      	it	lt
 80040d8:	4618      	movlt	r0, r3
 80040da:	e7a3      	b.n	8004024 <_printf_i+0x130>
 80040dc:	2301      	movs	r3, #1
 80040de:	464a      	mov	r2, r9
 80040e0:	4639      	mov	r1, r7
 80040e2:	4630      	mov	r0, r6
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d09a      	beq.n	8004020 <_printf_i+0x12c>
 80040ea:	3501      	adds	r5, #1
 80040ec:	68e3      	ldr	r3, [r4, #12]
 80040ee:	9a03      	ldr	r2, [sp, #12]
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	42ab      	cmp	r3, r5
 80040f4:	dcf2      	bgt.n	80040dc <_printf_i+0x1e8>
 80040f6:	e7eb      	b.n	80040d0 <_printf_i+0x1dc>
 80040f8:	2500      	movs	r5, #0
 80040fa:	f104 0919 	add.w	r9, r4, #25
 80040fe:	e7f5      	b.n	80040ec <_printf_i+0x1f8>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ac      	bne.n	800405e <_printf_i+0x16a>
 8004104:	7803      	ldrb	r3, [r0, #0]
 8004106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800410a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800410e:	e76c      	b.n	8003fea <_printf_i+0xf6>
 8004110:	08004d60 	.word	0x08004d60
 8004114:	08004d71 	.word	0x08004d71

08004118 <_scanf_chars>:
 8004118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800411c:	4615      	mov	r5, r2
 800411e:	688a      	ldr	r2, [r1, #8]
 8004120:	4680      	mov	r8, r0
 8004122:	460c      	mov	r4, r1
 8004124:	b932      	cbnz	r2, 8004134 <_scanf_chars+0x1c>
 8004126:	698a      	ldr	r2, [r1, #24]
 8004128:	2a00      	cmp	r2, #0
 800412a:	bf14      	ite	ne
 800412c:	f04f 32ff 	movne.w	r2, #4294967295
 8004130:	2201      	moveq	r2, #1
 8004132:	608a      	str	r2, [r1, #8]
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	06d1      	lsls	r1, r2, #27
 8004138:	bf5f      	itttt	pl
 800413a:	681a      	ldrpl	r2, [r3, #0]
 800413c:	1d11      	addpl	r1, r2, #4
 800413e:	6019      	strpl	r1, [r3, #0]
 8004140:	6817      	ldrpl	r7, [r2, #0]
 8004142:	2600      	movs	r6, #0
 8004144:	69a3      	ldr	r3, [r4, #24]
 8004146:	b1db      	cbz	r3, 8004180 <_scanf_chars+0x68>
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <_scanf_chars+0x44>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	6962      	ldr	r2, [r4, #20]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	5cd3      	ldrb	r3, [r2, r3]
 8004154:	b9a3      	cbnz	r3, 8004180 <_scanf_chars+0x68>
 8004156:	2e00      	cmp	r6, #0
 8004158:	d132      	bne.n	80041c0 <_scanf_chars+0xa8>
 800415a:	e006      	b.n	800416a <_scanf_chars+0x52>
 800415c:	2b02      	cmp	r3, #2
 800415e:	d007      	beq.n	8004170 <_scanf_chars+0x58>
 8004160:	2e00      	cmp	r6, #0
 8004162:	d12d      	bne.n	80041c0 <_scanf_chars+0xa8>
 8004164:	69a3      	ldr	r3, [r4, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d12a      	bne.n	80041c0 <_scanf_chars+0xa8>
 800416a:	2001      	movs	r0, #1
 800416c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004170:	f7ff fa94 	bl	800369c <__locale_ctype_ptr>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	4418      	add	r0, r3
 800417a:	7843      	ldrb	r3, [r0, #1]
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	d4ef      	bmi.n	8004160 <_scanf_chars+0x48>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	06da      	lsls	r2, r3, #27
 8004184:	bf5e      	ittt	pl
 8004186:	682b      	ldrpl	r3, [r5, #0]
 8004188:	781b      	ldrbpl	r3, [r3, #0]
 800418a:	703b      	strbpl	r3, [r7, #0]
 800418c:	682a      	ldr	r2, [r5, #0]
 800418e:	686b      	ldr	r3, [r5, #4]
 8004190:	f102 0201 	add.w	r2, r2, #1
 8004194:	602a      	str	r2, [r5, #0]
 8004196:	68a2      	ldr	r2, [r4, #8]
 8004198:	f103 33ff 	add.w	r3, r3, #4294967295
 800419c:	f102 32ff 	add.w	r2, r2, #4294967295
 80041a0:	606b      	str	r3, [r5, #4]
 80041a2:	f106 0601 	add.w	r6, r6, #1
 80041a6:	bf58      	it	pl
 80041a8:	3701      	addpl	r7, #1
 80041aa:	60a2      	str	r2, [r4, #8]
 80041ac:	b142      	cbz	r2, 80041c0 <_scanf_chars+0xa8>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dcc8      	bgt.n	8004144 <_scanf_chars+0x2c>
 80041b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041b6:	4629      	mov	r1, r5
 80041b8:	4640      	mov	r0, r8
 80041ba:	4798      	blx	r3
 80041bc:	2800      	cmp	r0, #0
 80041be:	d0c1      	beq.n	8004144 <_scanf_chars+0x2c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	f013 0310 	ands.w	r3, r3, #16
 80041c6:	d105      	bne.n	80041d4 <_scanf_chars+0xbc>
 80041c8:	68e2      	ldr	r2, [r4, #12]
 80041ca:	3201      	adds	r2, #1
 80041cc:	60e2      	str	r2, [r4, #12]
 80041ce:	69a2      	ldr	r2, [r4, #24]
 80041d0:	b102      	cbz	r2, 80041d4 <_scanf_chars+0xbc>
 80041d2:	703b      	strb	r3, [r7, #0]
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	441e      	add	r6, r3
 80041d8:	6126      	str	r6, [r4, #16]
 80041da:	2000      	movs	r0, #0
 80041dc:	e7c6      	b.n	800416c <_scanf_chars+0x54>
	...

080041e0 <_scanf_i>:
 80041e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e4:	469a      	mov	sl, r3
 80041e6:	4b74      	ldr	r3, [pc, #464]	; (80043b8 <_scanf_i+0x1d8>)
 80041e8:	460c      	mov	r4, r1
 80041ea:	4683      	mov	fp, r0
 80041ec:	4616      	mov	r6, r2
 80041ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041f2:	b087      	sub	sp, #28
 80041f4:	ab03      	add	r3, sp, #12
 80041f6:	68a7      	ldr	r7, [r4, #8]
 80041f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <_scanf_i+0x1dc>)
 80041fe:	69a1      	ldr	r1, [r4, #24]
 8004200:	4a6f      	ldr	r2, [pc, #444]	; (80043c0 <_scanf_i+0x1e0>)
 8004202:	2903      	cmp	r1, #3
 8004204:	bf08      	it	eq
 8004206:	461a      	moveq	r2, r3
 8004208:	1e7b      	subs	r3, r7, #1
 800420a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800420e:	bf84      	itt	hi
 8004210:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004214:	60a3      	strhi	r3, [r4, #8]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	9200      	str	r2, [sp, #0]
 800421a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800421e:	bf88      	it	hi
 8004220:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004224:	f104 091c 	add.w	r9, r4, #28
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	bf8c      	ite	hi
 800422c:	197f      	addhi	r7, r7, r5
 800422e:	2700      	movls	r7, #0
 8004230:	464b      	mov	r3, r9
 8004232:	f04f 0800 	mov.w	r8, #0
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	6831      	ldr	r1, [r6, #0]
 800423a:	ab03      	add	r3, sp, #12
 800423c:	2202      	movs	r2, #2
 800423e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004242:	7809      	ldrb	r1, [r1, #0]
 8004244:	f7fb ffec 	bl	8000220 <memchr>
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	b330      	cbz	r0, 800429a <_scanf_i+0xba>
 800424c:	f1b8 0f01 	cmp.w	r8, #1
 8004250:	d15a      	bne.n	8004308 <_scanf_i+0x128>
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	b92a      	cbnz	r2, 8004262 <_scanf_i+0x82>
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	2108      	movs	r1, #8
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	6061      	str	r1, [r4, #4]
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004268:	6022      	str	r2, [r4, #0]
 800426a:	68a2      	ldr	r2, [r4, #8]
 800426c:	1e51      	subs	r1, r2, #1
 800426e:	60a1      	str	r1, [r4, #8]
 8004270:	b19a      	cbz	r2, 800429a <_scanf_i+0xba>
 8004272:	6832      	ldr	r2, [r6, #0]
 8004274:	1c51      	adds	r1, r2, #1
 8004276:	6031      	str	r1, [r6, #0]
 8004278:	7812      	ldrb	r2, [r2, #0]
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	1c5d      	adds	r5, r3, #1
 800427e:	6873      	ldr	r3, [r6, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	6073      	str	r3, [r6, #4]
 8004286:	dc07      	bgt.n	8004298 <_scanf_i+0xb8>
 8004288:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800428c:	4631      	mov	r1, r6
 800428e:	4658      	mov	r0, fp
 8004290:	4798      	blx	r3
 8004292:	2800      	cmp	r0, #0
 8004294:	f040 8086 	bne.w	80043a4 <_scanf_i+0x1c4>
 8004298:	462b      	mov	r3, r5
 800429a:	f108 0801 	add.w	r8, r8, #1
 800429e:	f1b8 0f03 	cmp.w	r8, #3
 80042a2:	d1c8      	bne.n	8004236 <_scanf_i+0x56>
 80042a4:	6862      	ldr	r2, [r4, #4]
 80042a6:	b90a      	cbnz	r2, 80042ac <_scanf_i+0xcc>
 80042a8:	220a      	movs	r2, #10
 80042aa:	6062      	str	r2, [r4, #4]
 80042ac:	6862      	ldr	r2, [r4, #4]
 80042ae:	4945      	ldr	r1, [pc, #276]	; (80043c4 <_scanf_i+0x1e4>)
 80042b0:	6960      	ldr	r0, [r4, #20]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	1a89      	subs	r1, r1, r2
 80042b6:	f000 f887 	bl	80043c8 <__sccl>
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	f04f 0800 	mov.w	r8, #0
 80042c0:	461d      	mov	r5, r3
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03a      	beq.n	8004340 <_scanf_i+0x160>
 80042ca:	6831      	ldr	r1, [r6, #0]
 80042cc:	6960      	ldr	r0, [r4, #20]
 80042ce:	f891 c000 	ldrb.w	ip, [r1]
 80042d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d032      	beq.n	8004340 <_scanf_i+0x160>
 80042da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80042de:	d121      	bne.n	8004324 <_scanf_i+0x144>
 80042e0:	0510      	lsls	r0, r2, #20
 80042e2:	d51f      	bpl.n	8004324 <_scanf_i+0x144>
 80042e4:	f108 0801 	add.w	r8, r8, #1
 80042e8:	b117      	cbz	r7, 80042f0 <_scanf_i+0x110>
 80042ea:	3301      	adds	r3, #1
 80042ec:	3f01      	subs	r7, #1
 80042ee:	60a3      	str	r3, [r4, #8]
 80042f0:	6873      	ldr	r3, [r6, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	6073      	str	r3, [r6, #4]
 80042f8:	dd1b      	ble.n	8004332 <_scanf_i+0x152>
 80042fa:	6833      	ldr	r3, [r6, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	6033      	str	r3, [r6, #0]
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	3b01      	subs	r3, #1
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	e7dc      	b.n	80042c2 <_scanf_i+0xe2>
 8004308:	f1b8 0f02 	cmp.w	r8, #2
 800430c:	d1ad      	bne.n	800426a <_scanf_i+0x8a>
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004314:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004318:	d1bf      	bne.n	800429a <_scanf_i+0xba>
 800431a:	2110      	movs	r1, #16
 800431c:	6061      	str	r1, [r4, #4]
 800431e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004322:	e7a1      	b.n	8004268 <_scanf_i+0x88>
 8004324:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	780b      	ldrb	r3, [r1, #0]
 800432c:	702b      	strb	r3, [r5, #0]
 800432e:	3501      	adds	r5, #1
 8004330:	e7de      	b.n	80042f0 <_scanf_i+0x110>
 8004332:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004336:	4631      	mov	r1, r6
 8004338:	4658      	mov	r0, fp
 800433a:	4798      	blx	r3
 800433c:	2800      	cmp	r0, #0
 800433e:	d0df      	beq.n	8004300 <_scanf_i+0x120>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	05d9      	lsls	r1, r3, #23
 8004344:	d50c      	bpl.n	8004360 <_scanf_i+0x180>
 8004346:	454d      	cmp	r5, r9
 8004348:	d908      	bls.n	800435c <_scanf_i+0x17c>
 800434a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800434e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004352:	4632      	mov	r2, r6
 8004354:	4658      	mov	r0, fp
 8004356:	4798      	blx	r3
 8004358:	1e6f      	subs	r7, r5, #1
 800435a:	463d      	mov	r5, r7
 800435c:	454d      	cmp	r5, r9
 800435e:	d029      	beq.n	80043b4 <_scanf_i+0x1d4>
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	f012 0210 	ands.w	r2, r2, #16
 8004366:	d113      	bne.n	8004390 <_scanf_i+0x1b0>
 8004368:	702a      	strb	r2, [r5, #0]
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	9e00      	ldr	r6, [sp, #0]
 800436e:	4649      	mov	r1, r9
 8004370:	4658      	mov	r0, fp
 8004372:	47b0      	blx	r6
 8004374:	f8da 3000 	ldr.w	r3, [sl]
 8004378:	6821      	ldr	r1, [r4, #0]
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	f8ca 2000 	str.w	r2, [sl]
 8004380:	f011 0f20 	tst.w	r1, #32
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	d010      	beq.n	80043aa <_scanf_i+0x1ca>
 8004388:	6018      	str	r0, [r3, #0]
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60e3      	str	r3, [r4, #12]
 8004390:	eba5 0509 	sub.w	r5, r5, r9
 8004394:	44a8      	add	r8, r5
 8004396:	6925      	ldr	r5, [r4, #16]
 8004398:	4445      	add	r5, r8
 800439a:	6125      	str	r5, [r4, #16]
 800439c:	2000      	movs	r0, #0
 800439e:	b007      	add	sp, #28
 80043a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a4:	f04f 0800 	mov.w	r8, #0
 80043a8:	e7ca      	b.n	8004340 <_scanf_i+0x160>
 80043aa:	07ca      	lsls	r2, r1, #31
 80043ac:	bf4c      	ite	mi
 80043ae:	8018      	strhmi	r0, [r3, #0]
 80043b0:	6018      	strpl	r0, [r3, #0]
 80043b2:	e7ea      	b.n	800438a <_scanf_i+0x1aa>
 80043b4:	2001      	movs	r0, #1
 80043b6:	e7f2      	b.n	800439e <_scanf_i+0x1be>
 80043b8:	080049ec 	.word	0x080049ec
 80043bc:	08004525 	.word	0x08004525
 80043c0:	0800463d 	.word	0x0800463d
 80043c4:	08004d92 	.word	0x08004d92

080043c8 <__sccl>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	780b      	ldrb	r3, [r1, #0]
 80043cc:	2b5e      	cmp	r3, #94	; 0x5e
 80043ce:	bf13      	iteet	ne
 80043d0:	1c4a      	addne	r2, r1, #1
 80043d2:	1c8a      	addeq	r2, r1, #2
 80043d4:	784b      	ldrbeq	r3, [r1, #1]
 80043d6:	2100      	movne	r1, #0
 80043d8:	bf08      	it	eq
 80043da:	2101      	moveq	r1, #1
 80043dc:	1e44      	subs	r4, r0, #1
 80043de:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80043e2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80043e6:	42ac      	cmp	r4, r5
 80043e8:	d1fb      	bne.n	80043e2 <__sccl+0x1a>
 80043ea:	b913      	cbnz	r3, 80043f2 <__sccl+0x2a>
 80043ec:	3a01      	subs	r2, #1
 80043ee:	4610      	mov	r0, r2
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	f081 0401 	eor.w	r4, r1, #1
 80043f6:	54c4      	strb	r4, [r0, r3]
 80043f8:	1c51      	adds	r1, r2, #1
 80043fa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80043fe:	2d2d      	cmp	r5, #45	; 0x2d
 8004400:	f101 36ff 	add.w	r6, r1, #4294967295
 8004404:	460a      	mov	r2, r1
 8004406:	d006      	beq.n	8004416 <__sccl+0x4e>
 8004408:	2d5d      	cmp	r5, #93	; 0x5d
 800440a:	d0f0      	beq.n	80043ee <__sccl+0x26>
 800440c:	b90d      	cbnz	r5, 8004412 <__sccl+0x4a>
 800440e:	4632      	mov	r2, r6
 8004410:	e7ed      	b.n	80043ee <__sccl+0x26>
 8004412:	462b      	mov	r3, r5
 8004414:	e7ef      	b.n	80043f6 <__sccl+0x2e>
 8004416:	780e      	ldrb	r6, [r1, #0]
 8004418:	2e5d      	cmp	r6, #93	; 0x5d
 800441a:	d0fa      	beq.n	8004412 <__sccl+0x4a>
 800441c:	42b3      	cmp	r3, r6
 800441e:	dcf8      	bgt.n	8004412 <__sccl+0x4a>
 8004420:	3301      	adds	r3, #1
 8004422:	429e      	cmp	r6, r3
 8004424:	54c4      	strb	r4, [r0, r3]
 8004426:	dcfb      	bgt.n	8004420 <__sccl+0x58>
 8004428:	3102      	adds	r1, #2
 800442a:	e7e6      	b.n	80043fa <__sccl+0x32>

0800442c <_strtol_l.isra.0>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4680      	mov	r8, r0
 8004432:	4689      	mov	r9, r1
 8004434:	4692      	mov	sl, r2
 8004436:	461e      	mov	r6, r3
 8004438:	460f      	mov	r7, r1
 800443a:	463d      	mov	r5, r7
 800443c:	9808      	ldr	r0, [sp, #32]
 800443e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004442:	f7ff f927 	bl	8003694 <__locale_ctype_ptr_l>
 8004446:	4420      	add	r0, r4
 8004448:	7843      	ldrb	r3, [r0, #1]
 800444a:	f013 0308 	ands.w	r3, r3, #8
 800444e:	d132      	bne.n	80044b6 <_strtol_l.isra.0+0x8a>
 8004450:	2c2d      	cmp	r4, #45	; 0x2d
 8004452:	d132      	bne.n	80044ba <_strtol_l.isra.0+0x8e>
 8004454:	787c      	ldrb	r4, [r7, #1]
 8004456:	1cbd      	adds	r5, r7, #2
 8004458:	2201      	movs	r2, #1
 800445a:	2e00      	cmp	r6, #0
 800445c:	d05d      	beq.n	800451a <_strtol_l.isra.0+0xee>
 800445e:	2e10      	cmp	r6, #16
 8004460:	d109      	bne.n	8004476 <_strtol_l.isra.0+0x4a>
 8004462:	2c30      	cmp	r4, #48	; 0x30
 8004464:	d107      	bne.n	8004476 <_strtol_l.isra.0+0x4a>
 8004466:	782b      	ldrb	r3, [r5, #0]
 8004468:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800446c:	2b58      	cmp	r3, #88	; 0x58
 800446e:	d14f      	bne.n	8004510 <_strtol_l.isra.0+0xe4>
 8004470:	786c      	ldrb	r4, [r5, #1]
 8004472:	2610      	movs	r6, #16
 8004474:	3502      	adds	r5, #2
 8004476:	2a00      	cmp	r2, #0
 8004478:	bf14      	ite	ne
 800447a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800447e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004482:	2700      	movs	r7, #0
 8004484:	fbb1 fcf6 	udiv	ip, r1, r6
 8004488:	4638      	mov	r0, r7
 800448a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800448e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004492:	2b09      	cmp	r3, #9
 8004494:	d817      	bhi.n	80044c6 <_strtol_l.isra.0+0x9a>
 8004496:	461c      	mov	r4, r3
 8004498:	42a6      	cmp	r6, r4
 800449a:	dd23      	ble.n	80044e4 <_strtol_l.isra.0+0xb8>
 800449c:	1c7b      	adds	r3, r7, #1
 800449e:	d007      	beq.n	80044b0 <_strtol_l.isra.0+0x84>
 80044a0:	4584      	cmp	ip, r0
 80044a2:	d31c      	bcc.n	80044de <_strtol_l.isra.0+0xb2>
 80044a4:	d101      	bne.n	80044aa <_strtol_l.isra.0+0x7e>
 80044a6:	45a6      	cmp	lr, r4
 80044a8:	db19      	blt.n	80044de <_strtol_l.isra.0+0xb2>
 80044aa:	fb00 4006 	mla	r0, r0, r6, r4
 80044ae:	2701      	movs	r7, #1
 80044b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b4:	e7eb      	b.n	800448e <_strtol_l.isra.0+0x62>
 80044b6:	462f      	mov	r7, r5
 80044b8:	e7bf      	b.n	800443a <_strtol_l.isra.0+0xe>
 80044ba:	2c2b      	cmp	r4, #43	; 0x2b
 80044bc:	bf04      	itt	eq
 80044be:	1cbd      	addeq	r5, r7, #2
 80044c0:	787c      	ldrbeq	r4, [r7, #1]
 80044c2:	461a      	mov	r2, r3
 80044c4:	e7c9      	b.n	800445a <_strtol_l.isra.0+0x2e>
 80044c6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80044ca:	2b19      	cmp	r3, #25
 80044cc:	d801      	bhi.n	80044d2 <_strtol_l.isra.0+0xa6>
 80044ce:	3c37      	subs	r4, #55	; 0x37
 80044d0:	e7e2      	b.n	8004498 <_strtol_l.isra.0+0x6c>
 80044d2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80044d6:	2b19      	cmp	r3, #25
 80044d8:	d804      	bhi.n	80044e4 <_strtol_l.isra.0+0xb8>
 80044da:	3c57      	subs	r4, #87	; 0x57
 80044dc:	e7dc      	b.n	8004498 <_strtol_l.isra.0+0x6c>
 80044de:	f04f 37ff 	mov.w	r7, #4294967295
 80044e2:	e7e5      	b.n	80044b0 <_strtol_l.isra.0+0x84>
 80044e4:	1c7b      	adds	r3, r7, #1
 80044e6:	d108      	bne.n	80044fa <_strtol_l.isra.0+0xce>
 80044e8:	2322      	movs	r3, #34	; 0x22
 80044ea:	f8c8 3000 	str.w	r3, [r8]
 80044ee:	4608      	mov	r0, r1
 80044f0:	f1ba 0f00 	cmp.w	sl, #0
 80044f4:	d107      	bne.n	8004506 <_strtol_l.isra.0+0xda>
 80044f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fa:	b102      	cbz	r2, 80044fe <_strtol_l.isra.0+0xd2>
 80044fc:	4240      	negs	r0, r0
 80044fe:	f1ba 0f00 	cmp.w	sl, #0
 8004502:	d0f8      	beq.n	80044f6 <_strtol_l.isra.0+0xca>
 8004504:	b10f      	cbz	r7, 800450a <_strtol_l.isra.0+0xde>
 8004506:	f105 39ff 	add.w	r9, r5, #4294967295
 800450a:	f8ca 9000 	str.w	r9, [sl]
 800450e:	e7f2      	b.n	80044f6 <_strtol_l.isra.0+0xca>
 8004510:	2430      	movs	r4, #48	; 0x30
 8004512:	2e00      	cmp	r6, #0
 8004514:	d1af      	bne.n	8004476 <_strtol_l.isra.0+0x4a>
 8004516:	2608      	movs	r6, #8
 8004518:	e7ad      	b.n	8004476 <_strtol_l.isra.0+0x4a>
 800451a:	2c30      	cmp	r4, #48	; 0x30
 800451c:	d0a3      	beq.n	8004466 <_strtol_l.isra.0+0x3a>
 800451e:	260a      	movs	r6, #10
 8004520:	e7a9      	b.n	8004476 <_strtol_l.isra.0+0x4a>
	...

08004524 <_strtol_r>:
 8004524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004526:	4c06      	ldr	r4, [pc, #24]	; (8004540 <_strtol_r+0x1c>)
 8004528:	4d06      	ldr	r5, [pc, #24]	; (8004544 <_strtol_r+0x20>)
 800452a:	6824      	ldr	r4, [r4, #0]
 800452c:	6a24      	ldr	r4, [r4, #32]
 800452e:	2c00      	cmp	r4, #0
 8004530:	bf08      	it	eq
 8004532:	462c      	moveq	r4, r5
 8004534:	9400      	str	r4, [sp, #0]
 8004536:	f7ff ff79 	bl	800442c <_strtol_l.isra.0>
 800453a:	b003      	add	sp, #12
 800453c:	bd30      	pop	{r4, r5, pc}
 800453e:	bf00      	nop
 8004540:	20000010 	.word	0x20000010
 8004544:	20000074 	.word	0x20000074

08004548 <_strtoul_l.isra.0>:
 8004548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	4680      	mov	r8, r0
 800454e:	4689      	mov	r9, r1
 8004550:	4692      	mov	sl, r2
 8004552:	461e      	mov	r6, r3
 8004554:	460f      	mov	r7, r1
 8004556:	463d      	mov	r5, r7
 8004558:	9808      	ldr	r0, [sp, #32]
 800455a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800455e:	f7ff f899 	bl	8003694 <__locale_ctype_ptr_l>
 8004562:	4420      	add	r0, r4
 8004564:	7843      	ldrb	r3, [r0, #1]
 8004566:	f013 0308 	ands.w	r3, r3, #8
 800456a:	d130      	bne.n	80045ce <_strtoul_l.isra.0+0x86>
 800456c:	2c2d      	cmp	r4, #45	; 0x2d
 800456e:	d130      	bne.n	80045d2 <_strtoul_l.isra.0+0x8a>
 8004570:	787c      	ldrb	r4, [r7, #1]
 8004572:	1cbd      	adds	r5, r7, #2
 8004574:	2101      	movs	r1, #1
 8004576:	2e00      	cmp	r6, #0
 8004578:	d05c      	beq.n	8004634 <_strtoul_l.isra.0+0xec>
 800457a:	2e10      	cmp	r6, #16
 800457c:	d109      	bne.n	8004592 <_strtoul_l.isra.0+0x4a>
 800457e:	2c30      	cmp	r4, #48	; 0x30
 8004580:	d107      	bne.n	8004592 <_strtoul_l.isra.0+0x4a>
 8004582:	782b      	ldrb	r3, [r5, #0]
 8004584:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004588:	2b58      	cmp	r3, #88	; 0x58
 800458a:	d14e      	bne.n	800462a <_strtoul_l.isra.0+0xe2>
 800458c:	786c      	ldrb	r4, [r5, #1]
 800458e:	2610      	movs	r6, #16
 8004590:	3502      	adds	r5, #2
 8004592:	f04f 32ff 	mov.w	r2, #4294967295
 8004596:	2300      	movs	r3, #0
 8004598:	fbb2 f2f6 	udiv	r2, r2, r6
 800459c:	fb06 fc02 	mul.w	ip, r6, r2
 80045a0:	ea6f 0c0c 	mvn.w	ip, ip
 80045a4:	4618      	mov	r0, r3
 80045a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80045aa:	2f09      	cmp	r7, #9
 80045ac:	d817      	bhi.n	80045de <_strtoul_l.isra.0+0x96>
 80045ae:	463c      	mov	r4, r7
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	dd23      	ble.n	80045fc <_strtoul_l.isra.0+0xb4>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db1e      	blt.n	80045f6 <_strtoul_l.isra.0+0xae>
 80045b8:	4282      	cmp	r2, r0
 80045ba:	d31c      	bcc.n	80045f6 <_strtoul_l.isra.0+0xae>
 80045bc:	d101      	bne.n	80045c2 <_strtoul_l.isra.0+0x7a>
 80045be:	45a4      	cmp	ip, r4
 80045c0:	db19      	blt.n	80045f6 <_strtoul_l.isra.0+0xae>
 80045c2:	fb00 4006 	mla	r0, r0, r6, r4
 80045c6:	2301      	movs	r3, #1
 80045c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045cc:	e7eb      	b.n	80045a6 <_strtoul_l.isra.0+0x5e>
 80045ce:	462f      	mov	r7, r5
 80045d0:	e7c1      	b.n	8004556 <_strtoul_l.isra.0+0xe>
 80045d2:	2c2b      	cmp	r4, #43	; 0x2b
 80045d4:	bf04      	itt	eq
 80045d6:	1cbd      	addeq	r5, r7, #2
 80045d8:	787c      	ldrbeq	r4, [r7, #1]
 80045da:	4619      	mov	r1, r3
 80045dc:	e7cb      	b.n	8004576 <_strtoul_l.isra.0+0x2e>
 80045de:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80045e2:	2f19      	cmp	r7, #25
 80045e4:	d801      	bhi.n	80045ea <_strtoul_l.isra.0+0xa2>
 80045e6:	3c37      	subs	r4, #55	; 0x37
 80045e8:	e7e2      	b.n	80045b0 <_strtoul_l.isra.0+0x68>
 80045ea:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80045ee:	2f19      	cmp	r7, #25
 80045f0:	d804      	bhi.n	80045fc <_strtoul_l.isra.0+0xb4>
 80045f2:	3c57      	subs	r4, #87	; 0x57
 80045f4:	e7dc      	b.n	80045b0 <_strtoul_l.isra.0+0x68>
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e7e5      	b.n	80045c8 <_strtoul_l.isra.0+0x80>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da09      	bge.n	8004614 <_strtoul_l.isra.0+0xcc>
 8004600:	2322      	movs	r3, #34	; 0x22
 8004602:	f8c8 3000 	str.w	r3, [r8]
 8004606:	f04f 30ff 	mov.w	r0, #4294967295
 800460a:	f1ba 0f00 	cmp.w	sl, #0
 800460e:	d107      	bne.n	8004620 <_strtoul_l.isra.0+0xd8>
 8004610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004614:	b101      	cbz	r1, 8004618 <_strtoul_l.isra.0+0xd0>
 8004616:	4240      	negs	r0, r0
 8004618:	f1ba 0f00 	cmp.w	sl, #0
 800461c:	d0f8      	beq.n	8004610 <_strtoul_l.isra.0+0xc8>
 800461e:	b10b      	cbz	r3, 8004624 <_strtoul_l.isra.0+0xdc>
 8004620:	f105 39ff 	add.w	r9, r5, #4294967295
 8004624:	f8ca 9000 	str.w	r9, [sl]
 8004628:	e7f2      	b.n	8004610 <_strtoul_l.isra.0+0xc8>
 800462a:	2430      	movs	r4, #48	; 0x30
 800462c:	2e00      	cmp	r6, #0
 800462e:	d1b0      	bne.n	8004592 <_strtoul_l.isra.0+0x4a>
 8004630:	2608      	movs	r6, #8
 8004632:	e7ae      	b.n	8004592 <_strtoul_l.isra.0+0x4a>
 8004634:	2c30      	cmp	r4, #48	; 0x30
 8004636:	d0a4      	beq.n	8004582 <_strtoul_l.isra.0+0x3a>
 8004638:	260a      	movs	r6, #10
 800463a:	e7aa      	b.n	8004592 <_strtoul_l.isra.0+0x4a>

0800463c <_strtoul_r>:
 800463c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800463e:	4c06      	ldr	r4, [pc, #24]	; (8004658 <_strtoul_r+0x1c>)
 8004640:	4d06      	ldr	r5, [pc, #24]	; (800465c <_strtoul_r+0x20>)
 8004642:	6824      	ldr	r4, [r4, #0]
 8004644:	6a24      	ldr	r4, [r4, #32]
 8004646:	2c00      	cmp	r4, #0
 8004648:	bf08      	it	eq
 800464a:	462c      	moveq	r4, r5
 800464c:	9400      	str	r4, [sp, #0]
 800464e:	f7ff ff7b 	bl	8004548 <_strtoul_l.isra.0>
 8004652:	b003      	add	sp, #12
 8004654:	bd30      	pop	{r4, r5, pc}
 8004656:	bf00      	nop
 8004658:	20000010 	.word	0x20000010
 800465c:	20000074 	.word	0x20000074

08004660 <__submore>:
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	460c      	mov	r4, r1
 8004666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800466c:	4299      	cmp	r1, r3
 800466e:	d11d      	bne.n	80046ac <__submore+0x4c>
 8004670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004674:	f000 f896 	bl	80047a4 <_malloc_r>
 8004678:	b918      	cbnz	r0, 8004682 <__submore+0x22>
 800467a:	f04f 30ff 	mov.w	r0, #4294967295
 800467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004686:	63a3      	str	r3, [r4, #56]	; 0x38
 8004688:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800468c:	6360      	str	r0, [r4, #52]	; 0x34
 800468e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004696:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800469a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800469e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80046a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80046a6:	6020      	str	r0, [r4, #0]
 80046a8:	2000      	movs	r0, #0
 80046aa:	e7e8      	b.n	800467e <__submore+0x1e>
 80046ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80046ae:	0077      	lsls	r7, r6, #1
 80046b0:	463a      	mov	r2, r7
 80046b2:	f000 f8d1 	bl	8004858 <_realloc_r>
 80046b6:	4605      	mov	r5, r0
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d0de      	beq.n	800467a <__submore+0x1a>
 80046bc:	eb00 0806 	add.w	r8, r0, r6
 80046c0:	4601      	mov	r1, r0
 80046c2:	4632      	mov	r2, r6
 80046c4:	4640      	mov	r0, r8
 80046c6:	f7ff f809 	bl	80036dc <memcpy>
 80046ca:	f8c4 8000 	str.w	r8, [r4]
 80046ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80046d2:	e7e9      	b.n	80046a8 <__submore+0x48>

080046d4 <memmove>:
 80046d4:	4288      	cmp	r0, r1
 80046d6:	b510      	push	{r4, lr}
 80046d8:	eb01 0302 	add.w	r3, r1, r2
 80046dc:	d807      	bhi.n	80046ee <memmove+0x1a>
 80046de:	1e42      	subs	r2, r0, #1
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d00a      	beq.n	80046fa <memmove+0x26>
 80046e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046ec:	e7f8      	b.n	80046e0 <memmove+0xc>
 80046ee:	4283      	cmp	r3, r0
 80046f0:	d9f5      	bls.n	80046de <memmove+0xa>
 80046f2:	1881      	adds	r1, r0, r2
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	42d3      	cmn	r3, r2
 80046f8:	d100      	bne.n	80046fc <memmove+0x28>
 80046fa:	bd10      	pop	{r4, pc}
 80046fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004700:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004704:	e7f7      	b.n	80046f6 <memmove+0x22>
	...

08004708 <_free_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4605      	mov	r5, r0
 800470c:	2900      	cmp	r1, #0
 800470e:	d045      	beq.n	800479c <_free_r+0x94>
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f0c      	subs	r4, r1, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfb8      	it	lt
 800471a:	18e4      	addlt	r4, r4, r3
 800471c:	f000 f8d2 	bl	80048c4 <__malloc_lock>
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <_free_r+0x98>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	4610      	mov	r0, r2
 8004726:	b933      	cbnz	r3, 8004736 <_free_r+0x2e>
 8004728:	6063      	str	r3, [r4, #4]
 800472a:	6014      	str	r4, [r2, #0]
 800472c:	4628      	mov	r0, r5
 800472e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004732:	f000 b8c8 	b.w	80048c6 <__malloc_unlock>
 8004736:	42a3      	cmp	r3, r4
 8004738:	d90c      	bls.n	8004754 <_free_r+0x4c>
 800473a:	6821      	ldr	r1, [r4, #0]
 800473c:	1862      	adds	r2, r4, r1
 800473e:	4293      	cmp	r3, r2
 8004740:	bf04      	itt	eq
 8004742:	681a      	ldreq	r2, [r3, #0]
 8004744:	685b      	ldreq	r3, [r3, #4]
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	bf04      	itt	eq
 800474a:	1852      	addeq	r2, r2, r1
 800474c:	6022      	streq	r2, [r4, #0]
 800474e:	6004      	str	r4, [r0, #0]
 8004750:	e7ec      	b.n	800472c <_free_r+0x24>
 8004752:	4613      	mov	r3, r2
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	b10a      	cbz	r2, 800475c <_free_r+0x54>
 8004758:	42a2      	cmp	r2, r4
 800475a:	d9fa      	bls.n	8004752 <_free_r+0x4a>
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	1858      	adds	r0, r3, r1
 8004760:	42a0      	cmp	r0, r4
 8004762:	d10b      	bne.n	800477c <_free_r+0x74>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	4401      	add	r1, r0
 8004768:	1858      	adds	r0, r3, r1
 800476a:	4282      	cmp	r2, r0
 800476c:	6019      	str	r1, [r3, #0]
 800476e:	d1dd      	bne.n	800472c <_free_r+0x24>
 8004770:	6810      	ldr	r0, [r2, #0]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	4401      	add	r1, r0
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	e7d7      	b.n	800472c <_free_r+0x24>
 800477c:	d902      	bls.n	8004784 <_free_r+0x7c>
 800477e:	230c      	movs	r3, #12
 8004780:	602b      	str	r3, [r5, #0]
 8004782:	e7d3      	b.n	800472c <_free_r+0x24>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	1821      	adds	r1, r4, r0
 8004788:	428a      	cmp	r2, r1
 800478a:	bf04      	itt	eq
 800478c:	6811      	ldreq	r1, [r2, #0]
 800478e:	6852      	ldreq	r2, [r2, #4]
 8004790:	6062      	str	r2, [r4, #4]
 8004792:	bf04      	itt	eq
 8004794:	1809      	addeq	r1, r1, r0
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	605c      	str	r4, [r3, #4]
 800479a:	e7c7      	b.n	800472c <_free_r+0x24>
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	20000604 	.word	0x20000604

080047a4 <_malloc_r>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	1ccd      	adds	r5, r1, #3
 80047a8:	f025 0503 	bic.w	r5, r5, #3
 80047ac:	3508      	adds	r5, #8
 80047ae:	2d0c      	cmp	r5, #12
 80047b0:	bf38      	it	cc
 80047b2:	250c      	movcc	r5, #12
 80047b4:	2d00      	cmp	r5, #0
 80047b6:	4606      	mov	r6, r0
 80047b8:	db01      	blt.n	80047be <_malloc_r+0x1a>
 80047ba:	42a9      	cmp	r1, r5
 80047bc:	d903      	bls.n	80047c6 <_malloc_r+0x22>
 80047be:	230c      	movs	r3, #12
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	2000      	movs	r0, #0
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	f000 f87d 	bl	80048c4 <__malloc_lock>
 80047ca:	4a21      	ldr	r2, [pc, #132]	; (8004850 <_malloc_r+0xac>)
 80047cc:	6814      	ldr	r4, [r2, #0]
 80047ce:	4621      	mov	r1, r4
 80047d0:	b991      	cbnz	r1, 80047f8 <_malloc_r+0x54>
 80047d2:	4c20      	ldr	r4, [pc, #128]	; (8004854 <_malloc_r+0xb0>)
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	b91b      	cbnz	r3, 80047e0 <_malloc_r+0x3c>
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 f863 	bl	80048a4 <_sbrk_r>
 80047de:	6020      	str	r0, [r4, #0]
 80047e0:	4629      	mov	r1, r5
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 f85e 	bl	80048a4 <_sbrk_r>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d124      	bne.n	8004836 <_malloc_r+0x92>
 80047ec:	230c      	movs	r3, #12
 80047ee:	6033      	str	r3, [r6, #0]
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f868 	bl	80048c6 <__malloc_unlock>
 80047f6:	e7e4      	b.n	80047c2 <_malloc_r+0x1e>
 80047f8:	680b      	ldr	r3, [r1, #0]
 80047fa:	1b5b      	subs	r3, r3, r5
 80047fc:	d418      	bmi.n	8004830 <_malloc_r+0x8c>
 80047fe:	2b0b      	cmp	r3, #11
 8004800:	d90f      	bls.n	8004822 <_malloc_r+0x7e>
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	50cd      	str	r5, [r1, r3]
 8004806:	18cc      	adds	r4, r1, r3
 8004808:	4630      	mov	r0, r6
 800480a:	f000 f85c 	bl	80048c6 <__malloc_unlock>
 800480e:	f104 000b 	add.w	r0, r4, #11
 8004812:	1d23      	adds	r3, r4, #4
 8004814:	f020 0007 	bic.w	r0, r0, #7
 8004818:	1ac3      	subs	r3, r0, r3
 800481a:	d0d3      	beq.n	80047c4 <_malloc_r+0x20>
 800481c:	425a      	negs	r2, r3
 800481e:	50e2      	str	r2, [r4, r3]
 8004820:	e7d0      	b.n	80047c4 <_malloc_r+0x20>
 8004822:	428c      	cmp	r4, r1
 8004824:	684b      	ldr	r3, [r1, #4]
 8004826:	bf16      	itet	ne
 8004828:	6063      	strne	r3, [r4, #4]
 800482a:	6013      	streq	r3, [r2, #0]
 800482c:	460c      	movne	r4, r1
 800482e:	e7eb      	b.n	8004808 <_malloc_r+0x64>
 8004830:	460c      	mov	r4, r1
 8004832:	6849      	ldr	r1, [r1, #4]
 8004834:	e7cc      	b.n	80047d0 <_malloc_r+0x2c>
 8004836:	1cc4      	adds	r4, r0, #3
 8004838:	f024 0403 	bic.w	r4, r4, #3
 800483c:	42a0      	cmp	r0, r4
 800483e:	d005      	beq.n	800484c <_malloc_r+0xa8>
 8004840:	1a21      	subs	r1, r4, r0
 8004842:	4630      	mov	r0, r6
 8004844:	f000 f82e 	bl	80048a4 <_sbrk_r>
 8004848:	3001      	adds	r0, #1
 800484a:	d0cf      	beq.n	80047ec <_malloc_r+0x48>
 800484c:	6025      	str	r5, [r4, #0]
 800484e:	e7db      	b.n	8004808 <_malloc_r+0x64>
 8004850:	20000604 	.word	0x20000604
 8004854:	20000608 	.word	0x20000608

08004858 <_realloc_r>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	4607      	mov	r7, r0
 800485c:	4614      	mov	r4, r2
 800485e:	460e      	mov	r6, r1
 8004860:	b921      	cbnz	r1, 800486c <_realloc_r+0x14>
 8004862:	4611      	mov	r1, r2
 8004864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004868:	f7ff bf9c 	b.w	80047a4 <_malloc_r>
 800486c:	b922      	cbnz	r2, 8004878 <_realloc_r+0x20>
 800486e:	f7ff ff4b 	bl	8004708 <_free_r>
 8004872:	4625      	mov	r5, r4
 8004874:	4628      	mov	r0, r5
 8004876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004878:	f000 f826 	bl	80048c8 <_malloc_usable_size_r>
 800487c:	42a0      	cmp	r0, r4
 800487e:	d20f      	bcs.n	80048a0 <_realloc_r+0x48>
 8004880:	4621      	mov	r1, r4
 8004882:	4638      	mov	r0, r7
 8004884:	f7ff ff8e 	bl	80047a4 <_malloc_r>
 8004888:	4605      	mov	r5, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d0f2      	beq.n	8004874 <_realloc_r+0x1c>
 800488e:	4631      	mov	r1, r6
 8004890:	4622      	mov	r2, r4
 8004892:	f7fe ff23 	bl	80036dc <memcpy>
 8004896:	4631      	mov	r1, r6
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff ff35 	bl	8004708 <_free_r>
 800489e:	e7e9      	b.n	8004874 <_realloc_r+0x1c>
 80048a0:	4635      	mov	r5, r6
 80048a2:	e7e7      	b.n	8004874 <_realloc_r+0x1c>

080048a4 <_sbrk_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4c06      	ldr	r4, [pc, #24]	; (80048c0 <_sbrk_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4605      	mov	r5, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	f7fc fcf2 	bl	8001298 <_sbrk>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_sbrk_r+0x1a>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	b103      	cbz	r3, 80048be <_sbrk_r+0x1a>
 80048bc:	602b      	str	r3, [r5, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000654 	.word	0x20000654

080048c4 <__malloc_lock>:
 80048c4:	4770      	bx	lr

080048c6 <__malloc_unlock>:
 80048c6:	4770      	bx	lr

080048c8 <_malloc_usable_size_r>:
 80048c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048cc:	1f18      	subs	r0, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bfbc      	itt	lt
 80048d2:	580b      	ldrlt	r3, [r1, r0]
 80048d4:	18c0      	addlt	r0, r0, r3
 80048d6:	4770      	bx	lr

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
