
Lab3_PVS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d20  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000010  08005fc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08005fc8  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a7a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a4  00000000  00000000  00030aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00032d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00033ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ae7  00000000  00000000  00034b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2fb  00000000  00000000  0005864f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9284  00000000  00000000  0006494a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004168  00000000  00000000  0013dc4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005eb4 	.word	0x08005eb4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08005eb4 	.word	0x08005eb4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <kb_event_push>:
static struct kb_event buffer[BUFFER_CAPACITY] = { 0 };
static size_t buffer_start_idx = 0;
static size_t buffer_end_idx = 0;


static void kb_event_push(struct kb_event event) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	80b8      	strh	r0, [r7, #4]
	buffer[buffer_end_idx] = event;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <kb_event_push+0x30>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4909      	ldr	r1, [pc, #36]	; (8000530 <kb_event_push+0x34>)
 800050a:	88ba      	ldrh	r2, [r7, #4]
 800050c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	INC_BUFFER_IDX(buffer_end_idx);
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <kb_event_push+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	f003 031f 	and.w	r3, r3, #31
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <kb_event_push+0x30>)
 800051c:	6013      	str	r3, [r2, #0]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000070 	.word	0x20000070
 8000530:	2000002c 	.word	0x2000002c

08000534 <kb_event_has>:

bool kb_event_has() {
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	return buffer_start_idx != buffer_end_idx;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <kb_event_has+0x20>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <kb_event_has+0x24>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	bf14      	ite	ne
 8000544:	2301      	movne	r3, #1
 8000546:	2300      	moveq	r3, #0
 8000548:	b2db      	uxtb	r3, r3
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	2000006c 	.word	0x2000006c
 8000558:	20000070 	.word	0x20000070

0800055c <kb_event_pop>:

struct kb_event kb_event_pop() {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
	const struct kb_event evt = buffer[buffer_start_idx];
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <kb_event_pop+0x30>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <kb_event_pop+0x34>)
 8000568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056c:	80bb      	strh	r3, [r7, #4]

	INC_BUFFER_IDX(buffer_start_idx);
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <kb_event_pop+0x30>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	f003 031f 	and.w	r3, r3, #31
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <kb_event_pop+0x30>)
 800057a:	6013      	str	r3, [r2, #0]
	return evt;
 800057c:	88bb      	ldrh	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000006c 	.word	0x2000006c
 8000590:	2000002c 	.word	0x2000002c

08000594 <kb_init>:

void kb_init(I2C_HandleTypeDef * i2c) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	6078      	str	r0, [r7, #4]
	uint8_t config = 0x70;
 800059c:	2370      	movs	r3, #112	; 0x70
 800059e:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(i2c, 0xE2, 3, 1, &config, 1, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2301      	movs	r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	f107 030f 	add.w	r3, r7, #15
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	2203      	movs	r2, #3
 80005b2:	21e2      	movs	r1, #226	; 0xe2
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f001 fa43 	bl	8001a40 <HAL_I2C_Mem_Write>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <kb_write_output>:

static inline void kb_write_output(I2C_HandleTypeDef * i2c, uint8_t data) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af02      	add	r7, sp, #8
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write_IT(i2c, 0xE2, 1, 1, &data, 1);
 80005ce:	2301      	movs	r3, #1
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	1cfb      	adds	r3, r7, #3
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	2201      	movs	r2, #1
 80005da:	21e2      	movs	r1, #226	; 0xe2
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f001 fb29 	bl	8001c34 <HAL_I2C_Mem_Write_IT>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <kb_read_input>:

static inline void kb_read_input(I2C_HandleTypeDef * i2c, uint8_t * data) {
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af02      	add	r7, sp, #8
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read_IT(i2c, 0xE3, 1, 1, data, 1);
 80005f4:	2301      	movs	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	2201      	movs	r2, #1
 8000600:	21e3      	movs	r1, #227	; 0xe3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f001 fbc8 	bl	8001d98 <HAL_I2C_Mem_Read_IT>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <kb_scan_step>:

void kb_scan_step(I2C_HandleTypeDef * i2c) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	static int row = 0;
	static bool read = false;
	static kb_event_key keys = 0;

	if (HAL_I2C_GetState(i2c) != HAL_I2C_STATE_READY) {
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f001 fe49 	bl	80022b0 <HAL_I2C_GetState>
 800061e:	4603      	mov	r3, r0
 8000620:	2b20      	cmp	r3, #32
 8000622:	f040 809a 	bne.w	800075a <kb_scan_step+0x14a>
		// uart_send_message_format("%d keyboard is busy\n", HAL_GetTick());
		return;
	}

	if (!read) {
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <kb_scan_step+0x154>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	f083 0301 	eor.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d07e      	beq.n	8000732 <kb_scan_step+0x122>
		// handle read data
		for (int i = 0, mask = 0x10; i < 3; ++i, mask <<= 1) {
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
 8000638:	2310      	movs	r3, #16
 800063a:	623b      	str	r3, [r7, #32]
 800063c:	e01f      	b.n	800067e <kb_scan_step+0x6e>
			if ((reg_buffer & mask) == 0) {
 800063e:	4b4a      	ldr	r3, [pc, #296]	; (8000768 <kb_scan_step+0x158>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	4013      	ands	r3, r2
 8000648:	2b00      	cmp	r3, #0
 800064a:	d112      	bne.n	8000672 <kb_scan_step+0x62>
				keys |= 0x1 << (row * 3 + i);
 800064c:	4b47      	ldr	r3, [pc, #284]	; (800076c <kb_scan_step+0x15c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	441a      	add	r2, r3
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	4413      	add	r3, r2
 800065a:	2201      	movs	r2, #1
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	b21a      	sxth	r2, r3
 8000662:	4b43      	ldr	r3, [pc, #268]	; (8000770 <kb_scan_step+0x160>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	b21b      	sxth	r3, r3
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b40      	ldr	r3, [pc, #256]	; (8000770 <kb_scan_step+0x160>)
 8000670:	801a      	strh	r2, [r3, #0]
		for (int i = 0, mask = 0x10; i < 3; ++i, mask <<= 1) {
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	3301      	adds	r3, #1
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	623b      	str	r3, [r7, #32]
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	2b02      	cmp	r3, #2
 8000682:	dddc      	ble.n	800063e <kb_scan_step+0x2e>
			}
		}

		// move to next row
		row = (row + 1) % 4;
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <kb_scan_step+0x15c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	425a      	negs	r2, r3
 800068c:	f003 0303 	and.w	r3, r3, #3
 8000690:	f002 0203 	and.w	r2, r2, #3
 8000694:	bf58      	it	pl
 8000696:	4253      	negpl	r3, r2
 8000698:	4a34      	ldr	r2, [pc, #208]	; (800076c <kb_scan_step+0x15c>)
 800069a:	6013      	str	r3, [r2, #0]

		// if read all rows - handle results
		if (row == 0) {
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <kb_scan_step+0x15c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d139      	bne.n	8000718 <kb_scan_step+0x108>
			int count = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
			for (int i = 0, key = 0x1; i < 12; ++i, key <<= 1) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	2301      	movs	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e00f      	b.n	80006d2 <kb_scan_step+0xc2>
				if ((keys & key) != 0) {
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <kb_scan_step+0x160>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4013      	ands	r3, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <kb_scan_step+0xb6>
					++count;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	3301      	adds	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
			for (int i = 0, key = 0x1; i < 12; ++i, key <<= 1) {
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	3301      	adds	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b0b      	cmp	r3, #11
 80006d6:	ddec      	ble.n	80006b2 <kb_scan_step+0xa2>
				}
			}

			if (count <= 2) {
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	dc19      	bgt.n	8000712 <kb_scan_step+0x102>
				for (int i = 0, key = 0x1; i < 12; ++i, key <<= 1) {
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	2301      	movs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e011      	b.n	800070c <kb_scan_step+0xfc>
					if ((keys & key) != 0) {
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <kb_scan_step+0x160>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <kb_scan_step+0xf0>
						kb_event_push((struct kb_event) { .key = key });
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fefe 	bl	80004fc <kb_event_push>
				for (int i = 0, key = 0x1; i < 12; ++i, key <<= 1) {
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3301      	adds	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b0b      	cmp	r3, #11
 8000710:	ddea      	ble.n	80006e8 <kb_scan_step+0xd8>
					}
				}
			}

			keys = 0;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <kb_scan_step+0x160>)
 8000714:	2200      	movs	r2, #0
 8000716:	801a      	strh	r2, [r3, #0]
		}

		// start write
		kb_write_output(i2c, ~((uint8_t) (1 << row)));
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <kb_scan_step+0x15c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2201      	movs	r2, #1
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ff49 	bl	80005c2 <kb_write_output>
 8000730:	e003      	b.n	800073a <kb_scan_step+0x12a>
	} else {
		// start read
		kb_read_input(i2c, &reg_buffer);
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <kb_scan_step+0x158>)
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff58 	bl	80005ea <kb_read_input>
	}

	read = !read;
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <kb_scan_step+0x154>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <kb_scan_step+0x154>)
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e000      	b.n	800075c <kb_scan_step+0x14c>
		return;
 800075a:	bf00      	nop
}
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000074 	.word	0x20000074
 8000768:	20000000 	.word	0x20000000
 800076c:	20000078 	.word	0x20000078
 8000770:	2000007c 	.word	0x2000007c

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fccb 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f89d 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 fa39 	bl	8000bf8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000786:	f000 f949 	bl	8000a1c <MX_TIM4_Init>
  MX_TIM6_Init();
 800078a:	f000 f9d5 	bl	8000b38 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 800078e:	f000 fa09 	bl	8000ba4 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000792:	f000 f903 	bl	800099c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  kb_init(&hi2c1);
 8000796:	483a      	ldr	r0, [pc, #232]	; (8000880 <main+0x10c>)
 8000798:	f7ff fefc 	bl	8000594 <kb_init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800079c:	2104      	movs	r1, #4
 800079e:	4839      	ldr	r0, [pc, #228]	; (8000884 <main+0x110>)
 80007a0:	f003 fe64 	bl	800446c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007a4:	2108      	movs	r1, #8
 80007a6:	4837      	ldr	r0, [pc, #220]	; (8000884 <main+0x110>)
 80007a8:	f003 fe60 	bl	800446c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80007ac:	210c      	movs	r1, #12
 80007ae:	4835      	ldr	r0, [pc, #212]	; (8000884 <main+0x110>)
 80007b0:	f003 fe5c 	bl	800446c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80007b4:	4834      	ldr	r0, [pc, #208]	; (8000888 <main+0x114>)
 80007b6:	f003 fe00 	bl	80043ba <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

	  while (kb_event_has()) {
 80007ba:	e05b      	b.n	8000874 <main+0x100>
		  struct kb_event evt = kb_event_pop();
 80007bc:	f7ff fece 	bl	800055c <kb_event_pop>
 80007c0:	4603      	mov	r3, r0
 80007c2:	80bb      	strh	r3, [r7, #4]

		  switch (evt.key) {
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	2b20      	cmp	r3, #32
 80007c8:	d038      	beq.n	800083c <main+0xc8>
 80007ca:	2b20      	cmp	r3, #32
 80007cc:	dc0d      	bgt.n	80007ea <main+0x76>
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d028      	beq.n	8000824 <main+0xb0>
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	dc04      	bgt.n	80007e0 <main+0x6c>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d01c      	beq.n	8000814 <main+0xa0>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d01e      	beq.n	800081c <main+0xa8>
 80007de:	e049      	b.n	8000874 <main+0x100>
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	d023      	beq.n	800082c <main+0xb8>
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	d025      	beq.n	8000834 <main+0xc0>
 80007e8:	e044      	b.n	8000874 <main+0x100>
 80007ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007ee:	d031      	beq.n	8000854 <main+0xe0>
 80007f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007f4:	dc04      	bgt.n	8000800 <main+0x8c>
 80007f6:	2b40      	cmp	r3, #64	; 0x40
 80007f8:	d024      	beq.n	8000844 <main+0xd0>
 80007fa:	2b80      	cmp	r3, #128	; 0x80
 80007fc:	d026      	beq.n	800084c <main+0xd8>
 80007fe:	e039      	b.n	8000874 <main+0x100>
 8000800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000804:	d02e      	beq.n	8000864 <main+0xf0>
 8000806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080a:	d02f      	beq.n	800086c <main+0xf8>
 800080c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000810:	d024      	beq.n	800085c <main+0xe8>
 8000812:	e02f      	b.n	8000874 <main+0x100>
		  case KB_EVENT_KEY_1:
			  uart_send_message_string_nl("key 1 pressed");
 8000814:	481d      	ldr	r0, [pc, #116]	; (800088c <main+0x118>)
 8000816:	f000 fc41 	bl	800109c <uart_send_message_string_nl>
			  break;
 800081a:	e02b      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_2:
			  uart_send_message_string_nl("key 2 pressed");
 800081c:	481c      	ldr	r0, [pc, #112]	; (8000890 <main+0x11c>)
 800081e:	f000 fc3d 	bl	800109c <uart_send_message_string_nl>
			  break;
 8000822:	e027      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_3:
			  uart_send_message_string_nl("key 3 pressed");
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <main+0x120>)
 8000826:	f000 fc39 	bl	800109c <uart_send_message_string_nl>
			  break;
 800082a:	e023      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_4:
			  uart_send_message_string_nl("key 4 pressed");
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <main+0x124>)
 800082e:	f000 fc35 	bl	800109c <uart_send_message_string_nl>
			  break;
 8000832:	e01f      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_5:
			  uart_send_message_string_nl("key 5 pressed");
 8000834:	4819      	ldr	r0, [pc, #100]	; (800089c <main+0x128>)
 8000836:	f000 fc31 	bl	800109c <uart_send_message_string_nl>
			  break;
 800083a:	e01b      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_6:
			  uart_send_message_string_nl("key 6 pressed");
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <main+0x12c>)
 800083e:	f000 fc2d 	bl	800109c <uart_send_message_string_nl>
			  break;
 8000842:	e017      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_7:
			  uart_send_message_string_nl("key 7 pressed");
 8000844:	4817      	ldr	r0, [pc, #92]	; (80008a4 <main+0x130>)
 8000846:	f000 fc29 	bl	800109c <uart_send_message_string_nl>
			  break;
 800084a:	e013      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_8:
			  uart_send_message_string_nl("key 8 pressed");
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <main+0x134>)
 800084e:	f000 fc25 	bl	800109c <uart_send_message_string_nl>
			  break;
 8000852:	e00f      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_9:
			  uart_send_message_string_nl("key 9 pressed");
 8000854:	4815      	ldr	r0, [pc, #84]	; (80008ac <main+0x138>)
 8000856:	f000 fc21 	bl	800109c <uart_send_message_string_nl>
			  break;
 800085a:	e00b      	b.n	8000874 <main+0x100>

		  case KB_EVENT_KEY_10:
			  uart_send_message_string_nl("key 10 pressed");
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <main+0x13c>)
 800085e:	f000 fc1d 	bl	800109c <uart_send_message_string_nl>
			  break;
 8000862:	e007      	b.n	8000874 <main+0x100>


		  case KB_EVENT_KEY_11:
			  uart_send_message_string_nl("key 11 pressed");
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <main+0x140>)
 8000866:	f000 fc19 	bl	800109c <uart_send_message_string_nl>
			  break;
 800086a:	e003      	b.n	8000874 <main+0x100>


		  case KB_EVENT_KEY_12:
			  uart_send_message_string_nl("key 12 pressed");
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <main+0x144>)
 800086e:	f000 fc15 	bl	800109c <uart_send_message_string_nl>
			  break;
 8000872:	bf00      	nop
	  while (kb_event_has()) {
 8000874:	f7ff fe5e 	bl	8000534 <kb_event_has>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d19e      	bne.n	80007bc <main+0x48>
 800087e:	e7f9      	b.n	8000874 <main+0x100>
 8000880:	200000c0 	.word	0x200000c0
 8000884:	20000080 	.word	0x20000080
 8000888:	20000114 	.word	0x20000114
 800088c:	08005ecc 	.word	0x08005ecc
 8000890:	08005edc 	.word	0x08005edc
 8000894:	08005eec 	.word	0x08005eec
 8000898:	08005efc 	.word	0x08005efc
 800089c:	08005f0c 	.word	0x08005f0c
 80008a0:	08005f1c 	.word	0x08005f1c
 80008a4:	08005f2c 	.word	0x08005f2c
 80008a8:	08005f3c 	.word	0x08005f3c
 80008ac:	08005f4c 	.word	0x08005f4c
 80008b0:	08005f5c 	.word	0x08005f5c
 80008b4:	08005f6c 	.word	0x08005f6c
 80008b8:	08005f7c 	.word	0x08005f7c

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	; 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 faea 	bl	8005ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <SystemClock_Config+0xd8>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <SystemClock_Config+0xd8>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0xd8>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <SystemClock_Config+0xdc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a24      	ldr	r2, [pc, #144]	; (8000998 <SystemClock_Config+0xdc>)
 8000906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xdc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800092c:	230f      	movs	r3, #15
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000930:	23d8      	movs	r3, #216	; 0xd8
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f8d3 	bl	8003aec <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800094c:	f000 f9c0 	bl	8000cd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000950:	f003 f87c 	bl	8003a4c <HAL_PWREx_EnableOverDrive>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800095a:	f000 f9b9 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2302      	movs	r3, #2
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2105      	movs	r1, #5
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fb25 	bl	8003fcc <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000988:	f000 f9a2 	bl	8000cd0 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	; 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_I2C1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009da:	f000 fef9 	bl	80017d0 <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 f974 	bl	8000cd0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ec:	f002 ffb3 	bl	8003956 <HAL_I2CEx_ConfigAnalogFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009f6:	f000 f96b 	bl	8000cd0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009fe:	f002 ffe6 	bl	80039ce <HAL_I2CEx_ConfigDigitalFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f962 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000c0 	.word	0x200000c0
 8000a14:	40005400 	.word	0x40005400
 8000a18:	00061a80 	.word	0x00061a80

08000a1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	; 0x38
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4c:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a4e:	4a39      	ldr	r2, [pc, #228]	; (8000b34 <MX_TIM4_Init+0x118>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a54:	2259      	movs	r2, #89	; 0x59
 8000a56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a72:	482f      	ldr	r0, [pc, #188]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a74:	f003 fc76 	bl	8004364 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a7e:	f000 f927 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4828      	ldr	r0, [pc, #160]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000a90:	f003 fef8 	bl	8004884 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a9a:	f000 f919 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a9e:	4824      	ldr	r0, [pc, #144]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000aa0:	f003 fcaf 	bl	8004402 <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000aaa:	f000 f911 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000abe:	f004 fad1 	bl	8005064 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ac8:	f000 f902 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000ae4:	f003 fe08 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000aee:	f000 f8ef 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2208      	movs	r2, #8
 8000afa:	4619      	mov	r1, r3
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000afe:	f003 fdfb 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000b08:	f000 f8e2 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	220c      	movs	r2, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000b14:	f003 fdf0 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8000b1e:	f000 f8d7 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM4_Init+0x114>)
 8000b24:	f000 f992 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 8000b28:	bf00      	nop
 8000b2a:	3738      	adds	r7, #56	; 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000080 	.word	0x20000080
 8000b34:	40000800 	.word	0x40000800

08000b38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_TIM6_Init+0x68>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b4e:	f242 3227 	movw	r2, #8999	; 0x2327
 8000b52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b5c:	2209      	movs	r2, #9
 8000b5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b68:	f003 fbfc 	bl	8004364 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b72:	f000 f8ad 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM6_Init+0x64>)
 8000b84:	f004 fa6e 	bl	8005064 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b8e:	f000 f89f 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000114 	.word	0x20000114
 8000ba0:	40001000 	.word	0x40001000

08000ba4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART6_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART6_UART_Init+0x4c>)
 8000bdc:	f004 fad2 	bl	8005184 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f000 f873 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000154 	.word	0x20000154
 8000bf4:	40011400 	.word	0x40011400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_GPIO_Init+0xac>)
 8000c94:	f000 fbf2 	bl	800147c <HAL_GPIO_Init>

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800

08000ca8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d102      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x18>
		kb_scan_step(&hi2c1);
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cbc:	f7ff fca8 	bl	8000610 <kb_scan_step>
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40001000 	.word	0x40001000
 8000ccc:	200000c0 	.word	0x200000c0

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_I2C_MspInit+0x94>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d134      	bne.n	8000dbc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_I2C_MspInit+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_I2C_MspInit+0x98>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_I2C_MspInit+0x98>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d80:	2304      	movs	r3, #4
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4810      	ldr	r0, [pc, #64]	; (8000dcc <HAL_I2C_MspInit+0x9c>)
 8000d8c:	f000 fb76 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_I2C_MspInit+0x98>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_I2C_MspInit+0x98>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_I2C_MspInit+0x98>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	201f      	movs	r0, #31
 8000db2:	f000 fafc 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000db6:	201f      	movs	r0, #31
 8000db8:	f000 fb15 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_TIM_Base_MspInit+0x70>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10e      	bne.n	8000e00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_TIM_Base_MspInit+0x74>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_TIM_Base_MspInit+0x74>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_TIM_Base_MspInit+0x74>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dfe:	e01a      	b.n	8000e36 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_TIM_Base_MspInit+0x78>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d115      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_TIM_Base_MspInit+0x74>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_TIM_Base_MspInit+0x74>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_Base_MspInit+0x74>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2036      	movs	r0, #54	; 0x36
 8000e2c:	f000 fabf 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e30:	2036      	movs	r0, #54	; 0x36
 8000e32:	f000 fad8 	bl	80013e6 <HAL_NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40000800 	.word	0x40000800
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40001000 	.word	0x40001000

08000e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_TIM_MspPostInit+0x68>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11e      	bne.n	8000eac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_TIM_MspPostInit+0x70>)
 8000ea8:	f000 fae8 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40000800 	.word	0x40000800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0x94>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d133      	bne.n	8000f4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_UART_MspInit+0x9c>)
 8000f36:	f000 faa1 	bl	800147c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2047      	movs	r0, #71	; 0x47
 8000f40:	f000 fa35 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f44:	2047      	movs	r0, #71	; 0x47
 8000f46:	f000 fa4e 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f900 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <I2C1_EV_IRQHandler+0x10>)
 8000fc2:	f000 ffa7 	bl	8001f14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000c0 	.word	0x200000c0

08000fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM6_DAC_IRQHandler+0x10>)
 8000fd6:	f003 fa87 	bl	80044e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000114 	.word	0x20000114

08000fe4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <USART6_IRQHandler+0x10>)
 8000fea:	f004 f95d 	bl	80052a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000154 	.word	0x20000154

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <SystemInit+0x28>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <SystemInit+0x28>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SystemInit+0x28>)
 800100e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001012:	609a      	str	r2, [r3, #8]
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <uart_send_message_string>:

void uart_send_message(const char * content, uint32_t length);
void uart_send_message_string_nl(const char * message);
void uart_send_message_format(const char * format, ...);

static inline void uart_send_message_string(const char * message) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	uart_send_message(message, strlen(message));
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff f8dd 	bl	80001ec <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f814 	bl	8001064 <uart_send_message>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <uart_is_ready>:


extern UART_HandleTypeDef huart6;


static inline bool uart_is_ready() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart6) == HAL_UART_STATE_READY;
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <uart_is_ready+0x1c>)
 800104a:	f004 fa4b 	bl	80054e4 <HAL_UART_GetState>
 800104e:	4603      	mov	r3, r0
 8001050:	2b20      	cmp	r3, #32
 8001052:	bf0c      	ite	eq
 8001054:	2301      	moveq	r3, #1
 8001056:	2300      	movne	r3, #0
 8001058:	b2db      	uxtb	r3, r3
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000154 	.word	0x20000154

08001064 <uart_send_message>:

void uart_send_message(const char * content, uint32_t length) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	while (!uart_is_ready());
 800106e:	bf00      	nop
 8001070:	f7ff ffe8 	bl	8001044 <uart_is_ready>
 8001074:	4603      	mov	r3, r0
 8001076:	f083 0301 	eor.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f7      	bne.n	8001070 <uart_send_message+0xc>

	HAL_UART_Transmit_IT(&huart6, (void *) content, length);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <uart_send_message+0x34>)
 800108a:	f004 f8c8 	bl	800521e <HAL_UART_Transmit_IT>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000154 	.word	0x20000154

0800109c <uart_send_message_string_nl>:

void uart_send_message_string_nl(const char * message) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	uart_send_message_string(message);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffbd 	bl	8001024 <uart_send_message_string>
	uart_send_message("\r\n", 2);
 80010aa:	2102      	movs	r1, #2
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <uart_send_message_string_nl+0x20>)
 80010ae:	f7ff ffd9 	bl	8001064 <uart_send_message>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08005f8c 	.word	0x08005f8c

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
  ldr  r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e0:	f842 3b04 	str.w	r3, [r2], #4

080010e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ea:	f7ff ff85 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f004 feb5 	bl	8005e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fb3f 	bl	8000774 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010fc:	08005fb8 	.word	0x08005fb8
  ldr  r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001104:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001108:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800110c:	20000198 	.word	0x20000198

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f92b 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fdca 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f943 	bl	8001402 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f90b 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000004 	.word	0x20000004
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000000c 	.word	0x2000000c
 80011dc:	20000194 	.word	0x20000194

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000194 	.word	0x20000194

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d004      	beq.n	8001438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00c      	b.n	8001452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2205      	movs	r2, #5
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146c:	b2db      	uxtb	r3, r3
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e177      	b.n	8001788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8166 	bne.w	8001782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00b      	beq.n	80014d6 <HAL_GPIO_Init+0x5a>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d130      	bne.n	8001538 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0xfc>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b12      	cmp	r3, #18
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80c0 	beq.w	8001782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <HAL_GPIO_Init+0x320>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a64      	ldr	r2, [pc, #400]	; (800179c <HAL_GPIO_Init+0x320>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_GPIO_Init+0x320>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_GPIO_Init+0x328>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d037      	beq.n	80016ba <HAL_GPIO_Init+0x23e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <HAL_GPIO_Init+0x32c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d031      	beq.n	80016b6 <HAL_GPIO_Init+0x23a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a55      	ldr	r2, [pc, #340]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d02b      	beq.n	80016b2 <HAL_GPIO_Init+0x236>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x334>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d025      	beq.n	80016ae <HAL_GPIO_Init+0x232>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a53      	ldr	r2, [pc, #332]	; (80017b4 <HAL_GPIO_Init+0x338>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d01f      	beq.n	80016aa <HAL_GPIO_Init+0x22e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_GPIO_Init+0x33c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x22a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x340>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <HAL_GPIO_Init+0x344>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x222>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x348>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x21e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_GPIO_Init+0x34c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x21a>
 8001692:	2309      	movs	r3, #9
 8001694:	e012      	b.n	80016bc <HAL_GPIO_Init+0x240>
 8001696:	230a      	movs	r3, #10
 8001698:	e010      	b.n	80016bc <HAL_GPIO_Init+0x240>
 800169a:	2308      	movs	r3, #8
 800169c:	e00e      	b.n	80016bc <HAL_GPIO_Init+0x240>
 800169e:	2307      	movs	r3, #7
 80016a0:	e00c      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016a2:	2306      	movs	r3, #6
 80016a4:	e00a      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e008      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x240>
 80016ba:	2300      	movs	r3, #0
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f002 0203 	and.w	r2, r2, #3
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016cc:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_GPIO_Init+0x350>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016fe:	4a33      	ldr	r2, [pc, #204]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001728:	4a28      	ldr	r2, [pc, #160]	; (80017cc <HAL_GPIO_Init+0x350>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_GPIO_Init+0x350>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_GPIO_Init+0x350>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f ae84 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001790:	bf00      	nop
 8001792:	3724      	adds	r7, #36	; 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40023800 	.word	0x40023800
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40021400 	.word	0x40021400
 80017bc:	40021800 	.word	0x40021800
 80017c0:	40021c00 	.word	0x40021c00
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40022400 	.word	0x40022400
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e11f      	b.n	8001a22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fa9a 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	; 0x24
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001834:	f002 fd6e 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8001838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a7b      	ldr	r2, [pc, #492]	; (8001a2c <HAL_I2C_Init+0x25c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d807      	bhi.n	8001854 <HAL_I2C_Init+0x84>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a7a      	ldr	r2, [pc, #488]	; (8001a30 <HAL_I2C_Init+0x260>)
 8001848:	4293      	cmp	r3, r2
 800184a:	bf94      	ite	ls
 800184c:	2301      	movls	r3, #1
 800184e:	2300      	movhi	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	e006      	b.n	8001862 <HAL_I2C_Init+0x92>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a77      	ldr	r2, [pc, #476]	; (8001a34 <HAL_I2C_Init+0x264>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0db      	b.n	8001a22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a72      	ldr	r2, [pc, #456]	; (8001a38 <HAL_I2C_Init+0x268>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a64      	ldr	r2, [pc, #400]	; (8001a2c <HAL_I2C_Init+0x25c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d802      	bhi.n	80018a4 <HAL_I2C_Init+0xd4>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	e009      	b.n	80018b8 <HAL_I2C_Init+0xe8>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <HAL_I2C_Init+0x26c>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	3301      	adds	r3, #1
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	430b      	orrs	r3, r1
 80018be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4956      	ldr	r1, [pc, #344]	; (8001a2c <HAL_I2C_Init+0x25c>)
 80018d4:	428b      	cmp	r3, r1
 80018d6:	d80d      	bhi.n	80018f4 <HAL_I2C_Init+0x124>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e59      	subs	r1, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	bf38      	it	cc
 80018f0:	2304      	movcc	r3, #4
 80018f2:	e04f      	b.n	8001994 <HAL_I2C_Init+0x1c4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <HAL_I2C_Init+0x150>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	440b      	add	r3, r1
 800190a:	fbb0 f3f3 	udiv	r3, r0, r3
 800190e:	3301      	adds	r3, #1
 8001910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e012      	b.n	8001946 <HAL_I2C_Init+0x176>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1e58      	subs	r0, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	0099      	lsls	r1, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Init+0x17e>
 800194a:	2301      	movs	r3, #1
 800194c:	e022      	b.n	8001994 <HAL_I2C_Init+0x1c4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10e      	bne.n	8001974 <HAL_I2C_Init+0x1a4>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1e58      	subs	r0, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6859      	ldr	r1, [r3, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	440b      	add	r3, r1
 8001964:	fbb0 f3f3 	udiv	r3, r0, r3
 8001968:	3301      	adds	r3, #1
 800196a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001972:	e00f      	b.n	8001994 <HAL_I2C_Init+0x1c4>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e58      	subs	r0, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	0099      	lsls	r1, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	6809      	ldr	r1, [r1, #0]
 8001998:	4313      	orrs	r3, r2
 800199a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6911      	ldr	r1, [r2, #16]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68d2      	ldr	r2, [r2, #12]
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	000186a0 	.word	0x000186a0
 8001a30:	001e847f 	.word	0x001e847f
 8001a34:	003d08ff 	.word	0x003d08ff
 8001a38:	431bde83 	.word	0x431bde83
 8001a3c:	10624dd3 	.word	0x10624dd3

08001a40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	817b      	strh	r3, [r7, #10]
 8001a52:	460b      	mov	r3, r1
 8001a54:	813b      	strh	r3, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a5a:	f7ff fbc1 	bl	80011e0 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	f040 80d9 	bne.w	8001c20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2319      	movs	r3, #25
 8001a74:	2201      	movs	r2, #1
 8001a76:	496d      	ldr	r1, [pc, #436]	; (8001c2c <HAL_I2C_Mem_Write+0x1ec>)
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f001 fdca 	bl	8003612 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0cc      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Mem_Write+0x56>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e0c5      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1e2>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d007      	beq.n	8001abc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2221      	movs	r2, #33	; 0x21
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a3a      	ldr	r2, [r7, #32]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a4d      	ldr	r2, [pc, #308]	; (8001c30 <HAL_I2C_Mem_Write+0x1f0>)
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001afe:	88f8      	ldrh	r0, [r7, #6]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	8979      	ldrh	r1, [r7, #10]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f001 fc6c 	bl	80033ec <I2C_RequestMemoryWrite>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d052      	beq.n	8001bc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e081      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f001 fe4b 	bl	80037be <I2C_WaitOnTXEFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d107      	bne.n	8001b46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06b      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d11b      	bne.n	8001bc0 <HAL_I2C_Mem_Write+0x180>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d017      	beq.n	8001bc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1aa      	bne.n	8001b1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f001 fe37 	bl	8003840 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e016      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	00100002 	.word	0x00100002
 8001c30:	ffff0000 	.word	0xffff0000

08001c34 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	460b      	mov	r3, r1
 8001c48:	813b      	strh	r3, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	f040 808e 	bne.w	8001d7c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c60:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_I2C_Mem_Write_IT+0x158>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_I2C_Mem_Write_IT+0x15c>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	0a1a      	lsrs	r2, r3, #8
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	009a      	lsls	r2, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e064      	b.n	8001d7e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d0db      	beq.n	8001c7a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2C_Mem_Write_IT+0x9c>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e056      	b.n	8001d7e <HAL_I2C_Mem_Write_IT+0x14a>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d007      	beq.n	8001cf6 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a3a      	ldr	r2, [r7, #32]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_I2C_Mem_Write_IT+0x160>)
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001d38:	897a      	ldrh	r2, [r7, #10]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001d3e:	893a      	ldrh	r2, [r7, #8]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d76:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	14f8b589 	.word	0x14f8b589
 8001d94:	ffff0000 	.word	0xffff0000

08001d98 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	f040 809a 	bne.w	8001ef8 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_I2C_Mem_Read_IT+0x170>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_I2C_Mem_Read_IT+0x174>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0a1a      	lsrs	r2, r3, #8
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009a      	lsls	r2, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e070      	b.n	8001efa <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d0db      	beq.n	8001dde <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2C_Mem_Read_IT+0x9c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e062      	b.n	8001efa <HAL_I2C_Mem_Read_IT+0x162>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d007      	beq.n	8001e5a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e68:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2222      	movs	r2, #34	; 0x22
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2240      	movs	r2, #64	; 0x40
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a3a      	ldr	r2, [r7, #32]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_I2C_Mem_Read_IT+0x178>)
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001e9c:	897a      	ldrh	r2, [r7, #10]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001ea2:	893a      	ldrh	r2, [r7, #8]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ef2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	14f8b589 	.word	0x14f8b589
 8001f10:	ffff0000 	.word	0xffff0000

08001f14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b10      	cmp	r3, #16
 8001f42:	d003      	beq.n	8001f4c <HAL_I2C_EV_IRQHandler+0x38>
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	f040 80b6 	bne.w	80020b8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10d      	bne.n	8001f82 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f6c:	d003      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x62>
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_EV_IRQHandler+0x66>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_I2C_EV_IRQHandler+0x68>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f000 8127 	beq.w	80021d0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00c      	beq.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x92>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	0a5b      	lsrs	r3, r3, #9
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f001 fcc1 	bl	8003920 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fc83 	bl	80028aa <I2C_Master_SB>
 8001fa4:	e087      	b.n	80020b6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_I2C_EV_IRQHandler+0xb2>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	0a5b      	lsrs	r3, r3, #9
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fcf9 	bl	80029b6 <I2C_Master_ADD10>
 8001fc4:	e077      	b.n	80020b6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0xd2>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	0a5b      	lsrs	r3, r3, #9
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fd13 	bl	8002a0a <I2C_Master_ADDR>
 8001fe4:	e067      	b.n	80020b6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d030      	beq.n	8002054 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002000:	f000 80e8 	beq.w	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	09db      	lsrs	r3, r3, #7
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00f      	beq.n	8002030 <HAL_I2C_EV_IRQHandler+0x11c>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_I2C_EV_IRQHandler+0x11c>
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f94f 	bl	80022cc <I2C_MasterTransmit_TXE>
 800202e:	e042      	b.n	80020b6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80cb 	beq.w	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	0a5b      	lsrs	r3, r3, #9
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80c4 	beq.w	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f9d9 	bl	8002404 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002052:	e0bf      	b.n	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002062:	f000 80b7 	beq.w	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00f      	beq.n	8002092 <HAL_I2C_EV_IRQHandler+0x17e>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	0a9b      	lsrs	r3, r3, #10
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_I2C_EV_IRQHandler+0x17e>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 faa1 	bl	80025d2 <I2C_MasterReceive_RXNE>
 8002090:	e011      	b.n	80020b6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 809a 	beq.w	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	0a5b      	lsrs	r3, r3, #9
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8093 	beq.w	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fb11 	bl	80026d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b4:	e08e      	b.n	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
 80020b6:	e08d      	b.n	80021d4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	e007      	b.n	80020da <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_I2C_EV_IRQHandler+0x1f8>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	0a5b      	lsrs	r3, r3, #9
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fecf 	bl	8002ea8 <I2C_Slave_ADDR>
 800210a:	e066      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x218>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 ff03 	bl	8002f30 <I2C_Slave_STOPF>
 800212a:	e056      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	2b21      	cmp	r3, #33	; 0x21
 8002130:	d002      	beq.n	8002138 <HAL_I2C_EV_IRQHandler+0x224>
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	2b29      	cmp	r3, #41	; 0x29
 8002136:	d125      	bne.n	8002184 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	09db      	lsrs	r3, r3, #7
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00f      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x250>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	0a9b      	lsrs	r3, r3, #10
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x250>
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fde5 	bl	8002d2c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002162:	e039      	b.n	80021d8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d033      	beq.n	80021d8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	0a5b      	lsrs	r3, r3, #9
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02d      	beq.n	80021d8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fe12 	bl	8002da6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002182:	e029      	b.n	80021d8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00f      	beq.n	80021b0 <HAL_I2C_EV_IRQHandler+0x29c>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <HAL_I2C_EV_IRQHandler+0x29c>
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fe1d 	bl	8002de8 <I2C_SlaveReceive_RXNE>
 80021ae:	e014      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	0a5b      	lsrs	r3, r3, #9
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fe4b 	bl	8002e64 <I2C_SlaveReceive_BTF>
 80021ce:	e004      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80021d0:	bf00      	nop
 80021d2:	e002      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d4:	bf00      	nop
 80021d6:	e000      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021d8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
 800223c:	4613      	mov	r3, r2
 800223e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022be:	b2db      	uxtb	r3, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d150      	bne.n	8002394 <I2C_MasterTransmit_TXE+0xc8>
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b21      	cmp	r3, #33	; 0x21
 80022f6:	d14d      	bne.n	8002394 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d01d      	beq.n	800233a <I2C_MasterTransmit_TXE+0x6e>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b20      	cmp	r3, #32
 8002302:	d01a      	beq.n	800233a <I2C_MasterTransmit_TXE+0x6e>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800230a:	d016      	beq.n	800233a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800231a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2211      	movs	r2, #17
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff54 	bl	80021e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002338:	e060      	b.n	80023fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002348:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002358:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d107      	bne.n	8002384 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff6f 	bl	8002260 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002382:	e03b      	b.n	80023fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff27 	bl	80021e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002392:	e033      	b.n	80023fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2b21      	cmp	r3, #33	; 0x21
 8002398:	d005      	beq.n	80023a6 <I2C_MasterTransmit_TXE+0xda>
 800239a:	7bbb      	ldrb	r3, [r7, #14]
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d12d      	bne.n	80023fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b22      	cmp	r3, #34	; 0x22
 80023a4:	d12a      	bne.n	80023fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d108      	bne.n	80023c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023c0:	e01c      	b.n	80023fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d103      	bne.n	80023d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f898 	bl	8002504 <I2C_MemoryTransmit_TXE_BTF>
}
 80023d4:	e012      	b.n	80023fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023fa:	e7ff      	b.n	80023fc <I2C_MasterTransmit_TXE+0x130>
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b21      	cmp	r3, #33	; 0x21
 800241c:	d165      	bne.n	80024ea <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d012      	beq.n	800244e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800244c:	e056      	b.n	80024fc <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d01d      	beq.n	8002490 <I2C_MasterTransmit_BTF+0x8c>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b20      	cmp	r3, #32
 8002458:	d01a      	beq.n	8002490 <I2C_MasterTransmit_BTF+0x8c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002460:	d016      	beq.n	8002490 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002470:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2211      	movs	r2, #17
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fea9 	bl	80021e0 <HAL_I2C_MasterTxCpltCallback>
}
 800248e:	e035      	b.n	80024fc <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800249e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d107      	bne.n	80024da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fec4 	bl	8002260 <HAL_I2C_MemTxCpltCallback>
}
 80024d8:	e010      	b.n	80024fc <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fe7c 	bl	80021e0 <HAL_I2C_MasterTxCpltCallback>
}
 80024e8:	e008      	b.n	80024fc <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d102      	bne.n	80024fc <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f804 	bl	8002504 <I2C_MemoryTransmit_TXE_BTF>
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10b      	bne.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	b2da      	uxtb	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002532:	e048      	b.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	b29b      	uxth	r3, r3
 800253a:	121b      	asrs	r3, r3, #8
 800253c:	b2da      	uxtb	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800254e:	e03a      	b.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10b      	bne.n	8002570 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800256e:	e02a      	b.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	2b02      	cmp	r3, #2
 8002576:	d126      	bne.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b22      	cmp	r3, #34	; 0x22
 8002582:	d108      	bne.n	8002596 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	e017      	b.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b21      	cmp	r3, #33	; 0x21
 80025a0:	d111      	bne.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b22      	cmp	r3, #34	; 0x22
 80025e4:	d173      	bne.n	80026ce <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d920      	bls.n	8002636 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d154      	bne.n	80026ce <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002634:	e04b      	b.n	80026ce <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	2b02      	cmp	r3, #2
 800263c:	d047      	beq.n	80026ce <I2C_MasterReceive_RXNE+0xfc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <I2C_MasterReceive_RXNE+0x78>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d141      	bne.n	80026ce <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002658:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002668:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d10a      	bne.n	80026ba <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff fdde 	bl	8002274 <HAL_I2C_MemRxCpltCallback>
}
 80026b8:	e009      	b.n	80026ce <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2212      	movs	r2, #18
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fd93 	bl	80021f4 <HAL_I2C_MasterRxCpltCallback>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d11b      	bne.n	8002726 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002724:	e0bd      	b.n	80028a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d129      	bne.n	8002784 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d00a      	beq.n	800275c <I2C_MasterReceive_BTF+0x86>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d007      	beq.n	800275c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002782:	e08e      	b.n	80028a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d176      	bne.n	800287c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <I2C_MasterReceive_BTF+0xc4>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b10      	cmp	r3, #16
 8002798:	d108      	bne.n	80027ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e019      	b.n	80027e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <I2C_MasterReceive_BTF+0xe2>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d108      	bne.n	80027ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e00a      	b.n	80027e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d007      	beq.n	80027e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800283a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d10a      	bne.n	8002866 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fd08 	bl	8002274 <HAL_I2C_MemRxCpltCallback>
}
 8002864:	e01d      	b.n	80028a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2212      	movs	r2, #18
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fcbd 	bl	80021f4 <HAL_I2C_MasterRxCpltCallback>
}
 800287a:	e012      	b.n	80028a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d117      	bne.n	80028ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028d8:	e067      	b.n	80029aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]
}
 80028ec:	e05d      	b.n	80029aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f6:	d133      	bne.n	8002960 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b21      	cmp	r3, #33	; 0x21
 8002902:	d109      	bne.n	8002918 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	e008      	b.n	800292a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <I2C_Master_SB+0x92>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d108      	bne.n	800294e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	2b00      	cmp	r3, #0
 8002942:	d032      	beq.n	80029aa <I2C_Master_SB+0x100>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d02d      	beq.n	80029aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800295c:	605a      	str	r2, [r3, #4]
}
 800295e:	e024      	b.n	80029aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10e      	bne.n	8002986 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	b29b      	uxth	r3, r3
 800296e:	11db      	asrs	r3, r3, #7
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0306 	and.w	r3, r3, #6
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f063 030f 	orn	r3, r3, #15
 800297c:	b2da      	uxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]
}
 8002984:	e011      	b.n	80029aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10d      	bne.n	80029aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	b29b      	uxth	r3, r3
 8002994:	11db      	asrs	r3, r3, #7
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f003 0306 	and.w	r3, r3, #6
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f063 030e 	orn	r3, r3, #14
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	611a      	str	r2, [r3, #16]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <I2C_Master_ADD10+0x24>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <I2C_Master_ADD10+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fc:	605a      	str	r2, [r3, #4]
    }
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b091      	sub	sp, #68	; 0x44
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b22      	cmp	r3, #34	; 0x22
 8002a32:	f040 8169 	bne.w	8002d08 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <I2C_Master_ADDR+0x54>
 8002a3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a42:	2b40      	cmp	r3, #64	; 0x40
 8002a44:	d10b      	bne.n	8002a5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	e160      	b.n	8002d20 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11d      	bne.n	8002aa2 <I2C_Master_ADDR+0x98>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a6e:	d118      	bne.n	8002aa2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8002aa0:	e13e      	b.n	8002d20 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aac:	2300      	movs	r3, #0
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e115      	b.n	8002d00 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	f040 808a 	bne.w	8002bf4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ae6:	d137      	bne.n	8002b58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b06:	d113      	bne.n	8002b30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	e0e7      	b.n	8002d00 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e0d3      	b.n	8002d00 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d02e      	beq.n	8002bbc <I2C_Master_ADDR+0x1b2>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d02b      	beq.n	8002bbc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b66:	2b12      	cmp	r3, #18
 8002b68:	d102      	bne.n	8002b70 <I2C_Master_ADDR+0x166>
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d125      	bne.n	8002bbc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d00e      	beq.n	8002b94 <I2C_Master_ADDR+0x18a>
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d00b      	beq.n	8002b94 <I2C_Master_ADDR+0x18a>
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d008      	beq.n	8002b94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e007      	b.n	8002ba4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ba2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	e0a1      	b.n	8002d00 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e085      	b.n	8002d00 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d14d      	bne.n	8002c9a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d016      	beq.n	8002c32 <I2C_Master_ADDR+0x228>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d013      	beq.n	8002c32 <I2C_Master_ADDR+0x228>
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d010      	beq.n	8002c32 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e007      	b.n	8002c42 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c40:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c50:	d117      	bne.n	8002c82 <I2C_Master_ADDR+0x278>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c58:	d00b      	beq.n	8002c72 <I2C_Master_ADDR+0x268>
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d008      	beq.n	8002c72 <I2C_Master_ADDR+0x268>
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d005      	beq.n	8002c72 <I2C_Master_ADDR+0x268>
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d002      	beq.n	8002c72 <I2C_Master_ADDR+0x268>
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d107      	bne.n	8002c82 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c80:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	e032      	b.n	8002d00 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb8:	d117      	bne.n	8002cea <I2C_Master_ADDR+0x2e0>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc0:	d00b      	beq.n	8002cda <I2C_Master_ADDR+0x2d0>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d008      	beq.n	8002cda <I2C_Master_ADDR+0x2d0>
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d005      	beq.n	8002cda <I2C_Master_ADDR+0x2d0>
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d002      	beq.n	8002cda <I2C_Master_ADDR+0x2d0>
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d107      	bne.n	8002cea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ce8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d06:	e00b      	b.n	8002d20 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	e7ff      	b.n	8002d20 <I2C_Master_ADDR+0x316>
 8002d20:	bf00      	nop
 8002d22:	3744      	adds	r7, #68	; 0x44
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02b      	beq.n	8002d9e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d114      	bne.n	8002d9e <I2C_SlaveTransmit_TXE+0x72>
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b29      	cmp	r3, #41	; 0x29
 8002d78:	d111      	bne.n	8002d9e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d88:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2221      	movs	r2, #33	; 0x21
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2228      	movs	r2, #40	; 0x28
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fa35 	bl	8002208 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d011      	beq.n	8002ddc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02c      	beq.n	8002e5c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d114      	bne.n	8002e5c <I2C_SlaveReceive_RXNE+0x74>
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b2a      	cmp	r3, #42	; 0x2a
 8002e36:	d111      	bne.n	8002e5c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2222      	movs	r2, #34	; 0x22
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2228      	movs	r2, #40	; 0x28
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff f9e0 	bl	800221c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ec2:	2b28      	cmp	r3, #40	; 0x28
 8002ec4:	d127      	bne.n	8002f16 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	09db      	lsrs	r3, r3, #7
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	81bb      	strh	r3, [r7, #12]
 8002ef8:	e002      	b.n	8002f00 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f08:	89ba      	ldrh	r2, [r7, #12]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff f98e 	bl	8002230 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f14:	e008      	b.n	8002f28 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0202 	mvn.w	r2, #2
 8002f1e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8c:	d172      	bne.n	8003074 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b22      	cmp	r3, #34	; 0x22
 8002f92:	d002      	beq.n	8002f9a <I2C_Slave_STOPF+0x6a>
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b2a      	cmp	r3, #42	; 0x2a
 8002f98:	d135      	bne.n	8003006 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fa43 	bl	800145e <HAL_DMA_GetState>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d049      	beq.n	8003072 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4a69      	ldr	r2, [pc, #420]	; (8003188 <I2C_Slave_STOPF+0x258>)
 8002fe4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fa15 	bl	800141a <HAL_DMA_Abort_IT>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03d      	beq.n	8003072 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003000:	4610      	mov	r0, r2
 8003002:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003004:	e035      	b.n	8003072 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003038:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fa0d 	bl	800145e <HAL_DMA_GetState>
 8003044:	4603      	mov	r3, r0
 8003046:	2b01      	cmp	r3, #1
 8003048:	d014      	beq.n	8003074 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	4a4e      	ldr	r2, [pc, #312]	; (8003188 <I2C_Slave_STOPF+0x258>)
 8003050:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f9df 	bl	800141a <HAL_DMA_Abort_IT>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800306c:	4610      	mov	r0, r2
 800306e:	4798      	blx	r3
 8003070:	e000      	b.n	8003074 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003072:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03e      	beq.n	80030fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d112      	bne.n	80030b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d112      	bne.n	80030e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f843 	bl	8003190 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800310a:	e039      	b.n	8003180 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b2a      	cmp	r3, #42	; 0x2a
 8003110:	d109      	bne.n	8003126 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2228      	movs	r2, #40	; 0x28
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff f87b 	bl	800221c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b28      	cmp	r3, #40	; 0x28
 8003130:	d111      	bne.n	8003156 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a15      	ldr	r2, [pc, #84]	; (800318c <I2C_Slave_STOPF+0x25c>)
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff f87c 	bl	800224c <HAL_I2C_ListenCpltCallback>
}
 8003154:	e014      	b.n	8003180 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	2b22      	cmp	r3, #34	; 0x22
 800315c:	d002      	beq.n	8003164 <I2C_Slave_STOPF+0x234>
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b22      	cmp	r3, #34	; 0x22
 8003162:	d10d      	bne.n	8003180 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f84e 	bl	800221c <HAL_I2C_SlaveRxCpltCallback>
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	08003515 	.word	0x08003515
 800318c:	ffff0000 	.word	0xffff0000

08003190 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d10a      	bne.n	80031c2 <I2C_ITError+0x32>
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b22      	cmp	r3, #34	; 0x22
 80031b0:	d107      	bne.n	80031c2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031c8:	2b28      	cmp	r3, #40	; 0x28
 80031ca:	d107      	bne.n	80031dc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2228      	movs	r2, #40	; 0x28
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031da:	e015      	b.n	8003208 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d006      	beq.n	80031fa <I2C_ITError+0x6a>
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b60      	cmp	r3, #96	; 0x60
 80031f0:	d003      	beq.n	80031fa <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003216:	d162      	bne.n	80032de <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003226:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d020      	beq.n	8003278 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <I2C_ITError+0x254>)
 800323c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f8e9 	bl	800141a <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8089 	beq.w	8003362 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003272:	4610      	mov	r0, r2
 8003274:	4798      	blx	r3
 8003276:	e074      	b.n	8003362 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	4a59      	ldr	r2, [pc, #356]	; (80033e4 <I2C_ITError+0x254>)
 800327e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe f8c8 	bl	800141a <HAL_DMA_Abort_IT>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d068      	beq.n	8003362 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d10b      	bne.n	80032b6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
 80032dc:	e041      	b.n	8003362 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b60      	cmp	r3, #96	; 0x60
 80032e8:	d125      	bne.n	8003336 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d10b      	bne.n	800331e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe ffb4 	bl	800229c <HAL_I2C_AbortCpltCallback>
 8003334:	e015      	b.n	8003362 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d10b      	bne.n	800335c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe ff93 	bl	8002288 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10e      	bne.n	8003390 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d113      	bne.n	80033dc <I2C_ITError+0x24c>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b28      	cmp	r3, #40	; 0x28
 80033b8:	d110      	bne.n	80033dc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <I2C_ITError+0x258>)
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fe ff38 	bl	800224c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	08003515 	.word	0x08003515
 80033e8:	ffff0000 	.word	0xffff0000

080033ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	2200      	movs	r2, #0
 800341e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8f5 	bl	8003612 <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e05f      	b.n	8003508 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003456:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	6a3a      	ldr	r2, [r7, #32]
 800345c:	492c      	ldr	r1, [pc, #176]	; (8003510 <I2C_RequestMemoryWrite+0x124>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f92e 	bl	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e04c      	b.n	8003508 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003486:	6a39      	ldr	r1, [r7, #32]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f998 	bl	80037be <I2C_WaitOnTXEFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b04      	cmp	r3, #4
 800349a:	d107      	bne.n	80034ac <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e02b      	b.n	8003508 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b6:	893b      	ldrh	r3, [r7, #8]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	e021      	b.n	8003506 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c2:	893b      	ldrh	r3, [r7, #8]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	6a39      	ldr	r1, [r7, #32]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f972 	bl	80037be <I2C_WaitOnTXEFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e005      	b.n	8003508 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034fc:	893b      	ldrh	r3, [r7, #8]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	2200      	movs	r2, #0
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	2200      	movs	r2, #0
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2200      	movs	r2, #0
 800356e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	2200      	movs	r2, #0
 800357e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b60      	cmp	r3, #96	; 0x60
 800359a:	d10e      	bne.n	80035ba <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7fe fe72 	bl	800229c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035b8:	e027      	b.n	800360a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035c0:	2b28      	cmp	r3, #40	; 0x28
 80035c2:	d117      	bne.n	80035f4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2228      	movs	r2, #40	; 0x28
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035f2:	e007      	b.n	8003604 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7fe fe3f 	bl	8002288 <HAL_I2C_ErrorCallback>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003622:	e025      	b.n	8003670 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	d021      	beq.n	8003670 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fd fdd8 	bl	80011e0 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x30>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e023      	b.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10d      	bne.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x84>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	e00c      	b.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	43da      	mvns	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d0b6      	beq.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ce:	e051      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d123      	bne.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e046      	b.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d021      	beq.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003730:	f7fd fd56 	bl	80011e0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e020      	b.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10c      	bne.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e00b      	b.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d18d      	bne.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ca:	e02d      	b.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f878 	bl	80038c2 <I2C_IsAcknowledgeFailed>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e02d      	b.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d021      	beq.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7fd fcfc 	bl	80011e0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e007      	b.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d1ca      	bne.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800384c:	e02d      	b.n	80038aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f837 	bl	80038c2 <I2C_IsAcknowledgeFailed>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e02d      	b.n	80038ba <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d021      	beq.n	80038aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fd fcbb 	bl	80011e0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e007      	b.n	80038ba <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d1ca      	bne.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d11b      	bne.n	8003912 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003930:	d103      	bne.n	800393a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003938:	e007      	b.n	800394a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003942:	d102      	bne.n	800394a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2208      	movs	r2, #8
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d129      	bne.n	80039c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0210 	bic.w	r2, r2, #16
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d12a      	bne.n	8003a3e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a08:	89fb      	ldrh	r3, [r7, #14]
 8003a0a:	f023 030f 	bic.w	r3, r3, #15
 8003a0e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	89fb      	ldrh	r3, [r7, #14]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	89fa      	ldrh	r2, [r7, #14]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a72:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a78:	f7fd fbb2 	bl	80011e0 <HAL_GetTick>
 8003a7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a7e:	e009      	b.n	8003a94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a80:	f7fd fbae 	bl	80011e0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8e:	d901      	bls.n	8003a94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e01f      	b.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d1ee      	bne.n	8003a80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa8:	f7fd fb9a 	bl	80011e0 <HAL_GetTick>
 8003aac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aae:	e009      	b.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ab0:	f7fd fb96 	bl	80011e0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003abe:	d901      	bls.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e007      	b.n	8003ad4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad0:	d1ee      	bne.n	8003ab0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	420e0040 	.word	0x420e0040
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	420e0044 	.word	0x420e0044

08003aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e25b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d075      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0a:	4ba3      	ldr	r3, [pc, #652]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b16:	4ba0      	ldr	r3, [pc, #640]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d112      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b9d      	ldr	r3, [pc, #628]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	4b99      	ldr	r3, [pc, #612]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05b      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x108>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d157      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e236      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d106      	bne.n	8003b60 <HAL_RCC_OscConfig+0x74>
 8003b52:	4b91      	ldr	r3, [pc, #580]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a90      	ldr	r2, [pc, #576]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e01d      	b.n	8003b9c <HAL_RCC_OscConfig+0xb0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x98>
 8003b6a:	4b8b      	ldr	r3, [pc, #556]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a87      	ldr	r2, [pc, #540]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e00b      	b.n	8003b9c <HAL_RCC_OscConfig+0xb0>
 8003b84:	4b84      	ldr	r3, [pc, #528]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a83      	ldr	r2, [pc, #524]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a80      	ldr	r2, [pc, #512]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fb1c 	bl	80011e0 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fd fb18 	bl	80011e0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1fb      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0xc0>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd fb08 	bl	80011e0 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fd fb04 	bl	80011e0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1e7      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xe8>
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c02:	4b65      	ldr	r3, [pc, #404]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0e:	4b62      	ldr	r3, [pc, #392]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d11c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d116      	bne.n	8003c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	4b5c      	ldr	r3, [pc, #368]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_RCC_OscConfig+0x152>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e1bb      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3e:	4b56      	ldr	r3, [pc, #344]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4952      	ldr	r1, [pc, #328]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	e03a      	b.n	8003cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	4b4f      	ldr	r3, [pc, #316]	; (8003d9c <HAL_RCC_OscConfig+0x2b0>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fd fabd 	bl	80011e0 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fd fab9 	bl	80011e0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e19c      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7c:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4940      	ldr	r1, [pc, #256]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9e:	4b3f      	ldr	r3, [pc, #252]	; (8003d9c <HAL_RCC_OscConfig+0x2b0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fa9c 	bl	80011e0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cac:	f7fd fa98 	bl	80011e0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e17b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d030      	beq.n	8003d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <HAL_RCC_OscConfig+0x2b4>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd fa7c 	bl	80011e0 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fd fa78 	bl	80011e0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e15b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x200>
 8003d0a:	e015      	b.n	8003d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_OscConfig+0x2b4>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fd fa65 	bl	80011e0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fa61 	bl	80011e0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e144      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a0 	beq.w	8003e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_OscConfig+0x2b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d121      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_RCC_OscConfig+0x2b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <HAL_RCC_OscConfig+0x2b8>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fa27 	bl	80011e0 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e011      	b.n	8003dba <HAL_RCC_OscConfig+0x2ce>
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	42470000 	.word	0x42470000
 8003da0:	42470e80 	.word	0x42470e80
 8003da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fd fa1a 	bl	80011e0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0fd      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b81      	ldr	r3, [pc, #516]	; (8003fc0 <HAL_RCC_OscConfig+0x4d4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
 8003dce:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a7c      	ldr	r2, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dda:	e01c      	b.n	8003e16 <HAL_RCC_OscConfig+0x32a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_OscConfig+0x312>
 8003de4:	4b77      	ldr	r3, [pc, #476]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	4a76      	ldr	r2, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70
 8003df0:	4b74      	ldr	r3, [pc, #464]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	4a73      	ldr	r2, [pc, #460]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCC_OscConfig+0x32a>
 8003dfe:	4b71      	ldr	r3, [pc, #452]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a70      	ldr	r2, [pc, #448]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a6d      	ldr	r2, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd f9df 	bl	80011e0 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd f9db 	bl	80011e0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0bc      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ee      	beq.n	8003e26 <HAL_RCC_OscConfig+0x33a>
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd f9c9 	bl	80011e0 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd f9c5 	bl	80011e0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0a6      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e68:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ee      	bne.n	8003e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7a:	4b52      	ldr	r3, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a51      	ldr	r2, [pc, #324]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8092 	beq.w	8003fb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e90:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d05c      	beq.n	8003f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d141      	bne.n	8003f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea4:	4b48      	ldr	r3, [pc, #288]	; (8003fc8 <HAL_RCC_OscConfig+0x4dc>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd f999 	bl	80011e0 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fd f995 	bl	80011e0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e078      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec4:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	019b      	lsls	r3, r3, #6
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	4933      	ldr	r1, [pc, #204]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efa:	4b33      	ldr	r3, [pc, #204]	; (8003fc8 <HAL_RCC_OscConfig+0x4dc>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fd f96e 	bl	80011e0 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd f96a 	bl	80011e0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04d      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x41c>
 8003f26:	e045      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <HAL_RCC_OscConfig+0x4dc>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fd f957 	bl	80011e0 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fd f953 	bl	80011e0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e036      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x44a>
 8003f54:	e02e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e029      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <HAL_RCC_OscConfig+0x4d8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d11c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d115      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d10d      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40007000 	.word	0x40007000
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	42470060 	.word	0x42470060

08003fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0cc      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b68      	ldr	r3, [pc, #416]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d90c      	bls.n	8004008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0b8      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004020:	4b59      	ldr	r3, [pc, #356]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a58      	ldr	r2, [pc, #352]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800402a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a52      	ldr	r2, [pc, #328]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b50      	ldr	r3, [pc, #320]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	494d      	ldr	r1, [pc, #308]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d044      	beq.n	80040ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d119      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e07f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d003      	beq.n	800408a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004086:	2b03      	cmp	r3, #3
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e06f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e067      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040aa:	4b37      	ldr	r3, [pc, #220]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4934      	ldr	r1, [pc, #208]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040bc:	f7fd f890 	bl	80011e0 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	e00a      	b.n	80040da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c4:	f7fd f88c 	bl	80011e0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e04f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1eb      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d20c      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e032      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4916      	ldr	r1, [pc, #88]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	490e      	ldr	r1, [pc, #56]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004152:	f000 f821 	bl	8004198 <HAL_RCC_GetSysClockFreq>
 8004156:	4601      	mov	r1, r0
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	5cd3      	ldrb	r3, [r2, r3]
 8004166:	fa21 f303 	lsr.w	r3, r1, r3
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc fff0 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023c00 	.word	0x40023c00
 8004188:	40023800 	.word	0x40023800
 800418c:	08005f90 	.word	0x08005f90
 8004190:	20000004 	.word	0x20000004
 8004194:	20000008 	.word	0x20000008

08004198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	2300      	movs	r3, #0
 80041a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ae:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d007      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0x32>
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d008      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x38>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 808d 	bne.w	80042de <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80041c6:	60bb      	str	r3, [r7, #8]
       break;
 80041c8:	e08c      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ca:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041cc:	60bb      	str	r3, [r7, #8]
      break;
 80041ce:	e089      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d0:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041da:	4b45      	ldr	r3, [pc, #276]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d023      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e6:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	f04f 0400 	mov.w	r4, #0
 80041f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	ea03 0501 	and.w	r5, r3, r1
 80041fc:	ea04 0602 	and.w	r6, r4, r2
 8004200:	4a3d      	ldr	r2, [pc, #244]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004202:	fb02 f106 	mul.w	r1, r2, r6
 8004206:	2200      	movs	r2, #0
 8004208:	fb02 f205 	mul.w	r2, r2, r5
 800420c:	440a      	add	r2, r1
 800420e:	493a      	ldr	r1, [pc, #232]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004210:	fba5 0101 	umull	r0, r1, r5, r1
 8004214:	1853      	adds	r3, r2, r1
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	f7fb ffeb 	bl	80001fc <__aeabi_uldivmod>
 8004226:	4603      	mov	r3, r0
 8004228:	460c      	mov	r4, r1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e049      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	ea03 0501 	and.w	r5, r3, r1
 8004244:	ea04 0602 	and.w	r6, r4, r2
 8004248:	4629      	mov	r1, r5
 800424a:	4632      	mov	r2, r6
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	0154      	lsls	r4, r2, #5
 8004256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800425a:	014b      	lsls	r3, r1, #5
 800425c:	4619      	mov	r1, r3
 800425e:	4622      	mov	r2, r4
 8004260:	1b49      	subs	r1, r1, r5
 8004262:	eb62 0206 	sbc.w	r2, r2, r6
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	0194      	lsls	r4, r2, #6
 8004270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004274:	018b      	lsls	r3, r1, #6
 8004276:	1a5b      	subs	r3, r3, r1
 8004278:	eb64 0402 	sbc.w	r4, r4, r2
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	00e2      	lsls	r2, r4, #3
 8004286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800428a:	00d9      	lsls	r1, r3, #3
 800428c:	460b      	mov	r3, r1
 800428e:	4614      	mov	r4, r2
 8004290:	195b      	adds	r3, r3, r5
 8004292:	eb44 0406 	adc.w	r4, r4, r6
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	02a2      	lsls	r2, r4, #10
 80042a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042a4:	0299      	lsls	r1, r3, #10
 80042a6:	460b      	mov	r3, r1
 80042a8:	4614      	mov	r4, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	4621      	mov	r1, r4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	f7fb ffa0 	bl	80001fc <__aeabi_uldivmod>
 80042bc:	4603      	mov	r3, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	3301      	adds	r3, #1
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	60bb      	str	r3, [r7, #8]
      break;
 80042dc:	e002      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042e0:	60bb      	str	r3, [r7, #8]
      break;
 80042e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e4:	68bb      	ldr	r3, [r7, #8]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	017d7840 	.word	0x017d7840

080042fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000004 	.word	0x20000004

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4601      	mov	r1, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5cd3      	ldrb	r3, [r2, r3]
 800432c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	08005fa0 	.word	0x08005fa0

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004340:	f7ff ffdc 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004344:	4601      	mov	r1, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4a03      	ldr	r2, [pc, #12]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	08005fa0 	.word	0x08005fa0

08004364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e01d      	b.n	80043b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fd20 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fb4e 	bl	8004a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b06      	cmp	r3, #6
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e01d      	b.n	8004450 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f815 	bl	8004458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f000 faff 	bl	8004a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2201      	movs	r2, #1
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fdca 	bl	8005018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_TIM_PWM_Start+0x74>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIM_PWM_Start+0x2c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_TIM_PWM_Start+0x78>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_TIM_PWM_Start+0x30>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_TIM_PWM_Start+0x32>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d007      	beq.n	80044d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40010400 	.word	0x40010400

080044e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0202 	mvn.w	r2, #2
 8004514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa6b 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa5d 	bl	80049f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa6e 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0204 	mvn.w	r2, #4
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa41 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa33 	bl	80049f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa44 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0208 	mvn.w	r2, #8
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2204      	movs	r2, #4
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa17 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa09 	bl	80049f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fa1a 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d122      	bne.n	8004640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b10      	cmp	r3, #16
 8004606:	d11b      	bne.n	8004640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0210 	mvn.w	r2, #16
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2208      	movs	r2, #8
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9ed 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9df 	bl	80049f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f9f0 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0201 	mvn.w	r2, #1
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc fb1e 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d10e      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	d107      	bne.n	8004698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fd6c 	bl	8005170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d10e      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d107      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9b5 	bl	8004a2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0220 	mvn.w	r2, #32
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fd36 	bl	800515c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e0b4      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	f200 809f 	bhi.w	8004868 <HAL_TIM_PWM_ConfigChannel+0x170>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004765 	.word	0x08004765
 8004734:	08004869 	.word	0x08004869
 8004738:	08004869 	.word	0x08004869
 800473c:	08004869 	.word	0x08004869
 8004740:	080047a5 	.word	0x080047a5
 8004744:	08004869 	.word	0x08004869
 8004748:	08004869 	.word	0x08004869
 800474c:	08004869 	.word	0x08004869
 8004750:	080047e7 	.word	0x080047e7
 8004754:	08004869 	.word	0x08004869
 8004758:	08004869 	.word	0x08004869
 800475c:	08004869 	.word	0x08004869
 8004760:	08004827 	.word	0x08004827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fa0a 	bl	8004b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0208 	orr.w	r2, r2, #8
 800477e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0204 	bic.w	r2, r2, #4
 800478e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6999      	ldr	r1, [r3, #24]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	619a      	str	r2, [r3, #24]
      break;
 80047a2:	e062      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fa5a 	bl	8004c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6999      	ldr	r1, [r3, #24]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	619a      	str	r2, [r3, #24]
      break;
 80047e4:	e041      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 faaf 	bl	8004d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0208 	orr.w	r2, r2, #8
 8004800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0204 	bic.w	r2, r2, #4
 8004810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69d9      	ldr	r1, [r3, #28]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	61da      	str	r2, [r3, #28]
      break;
 8004824:	e021      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fb03 	bl	8004e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69d9      	ldr	r1, [r3, #28]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	021a      	lsls	r2, r3, #8
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	61da      	str	r2, [r3, #28]
      break;
 8004866:	e000      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004868:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIM_ConfigClockSource+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e0a6      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x166>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d067      	beq.n	80049a4 <HAL_TIM_ConfigClockSource+0x120>
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d80b      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x6c>
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d073      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x140>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d802      	bhi.n	80048e6 <HAL_TIM_ConfigClockSource+0x62>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d06f      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048e4:	e078      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d06c      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x140>
 80048ea:	2b30      	cmp	r3, #48	; 0x30
 80048ec:	d06a      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048ee:	e073      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048f0:	2b70      	cmp	r3, #112	; 0x70
 80048f2:	d00d      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0x8c>
 80048f4:	2b70      	cmp	r3, #112	; 0x70
 80048f6:	d804      	bhi.n	8004902 <HAL_TIM_ConfigClockSource+0x7e>
 80048f8:	2b50      	cmp	r3, #80	; 0x50
 80048fa:	d033      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0xe0>
 80048fc:	2b60      	cmp	r3, #96	; 0x60
 80048fe:	d041      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004900:	e06a      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004906:	d066      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x152>
 8004908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490c:	d017      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800490e:	e063      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 fb5a 	bl	8004fd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004932:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
      break;
 800493c:	e04c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f000 fb43 	bl	8004fd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004960:	609a      	str	r2, [r3, #8]
      break;
 8004962:	e039      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	461a      	mov	r2, r3
 8004972:	f000 fab7 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2150      	movs	r1, #80	; 0x50
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fb10 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 8004982:	e029      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	461a      	mov	r2, r3
 8004992:	f000 fad6 	bl	8004f42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2160      	movs	r1, #96	; 0x60
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fb00 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 80049a2:	e019      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	461a      	mov	r2, r3
 80049b2:	f000 fa97 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 faf0 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 80049c2:	e009      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 fae7 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <TIM_Base_SetConfig+0x114>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d00f      	beq.n	8004a84 <TIM_Base_SetConfig+0x40>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a3d      	ldr	r2, [pc, #244]	; (8004b5c <TIM_Base_SetConfig+0x118>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_Base_SetConfig+0x40>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a3c      	ldr	r2, [pc, #240]	; (8004b60 <TIM_Base_SetConfig+0x11c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_Base_SetConfig+0x40>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a3b      	ldr	r2, [pc, #236]	; (8004b64 <TIM_Base_SetConfig+0x120>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <TIM_Base_SetConfig+0x124>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <TIM_Base_SetConfig+0x114>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02b      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d027      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a2c      	ldr	r2, [pc, #176]	; (8004b5c <TIM_Base_SetConfig+0x118>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d023      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2b      	ldr	r2, [pc, #172]	; (8004b60 <TIM_Base_SetConfig+0x11c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01f      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <TIM_Base_SetConfig+0x120>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <TIM_Base_SetConfig+0x124>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a28      	ldr	r2, [pc, #160]	; (8004b6c <TIM_Base_SetConfig+0x128>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <TIM_Base_SetConfig+0x12c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a26      	ldr	r2, [pc, #152]	; (8004b74 <TIM_Base_SetConfig+0x130>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <TIM_Base_SetConfig+0x134>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <TIM_Base_SetConfig+0x138>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <TIM_Base_SetConfig+0x13c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <TIM_Base_SetConfig+0x114>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0xf8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a0c      	ldr	r2, [pc, #48]	; (8004b68 <TIM_Base_SetConfig+0x124>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d103      	bne.n	8004b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	615a      	str	r2, [r3, #20]
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800
 8004b78:	40001800 	.word	0x40001800
 8004b7c:	40001c00 	.word	0x40001c00
 8004b80:	40002000 	.word	0x40002000

08004b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 0302 	bic.w	r3, r3, #2
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <TIM_OC1_SetConfig+0xd8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC1_SetConfig+0x64>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <TIM_OC1_SetConfig+0xdc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10c      	bne.n	8004c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0308 	bic.w	r3, r3, #8
 8004bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <TIM_OC1_SetConfig+0xd8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC1_SetConfig+0x8e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC1_SetConfig+0xdc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d111      	bne.n	8004c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	621a      	str	r2, [r3, #32]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40010400 	.word	0x40010400

08004c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0210 	bic.w	r2, r3, #16
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0320 	bic.w	r3, r3, #32
 8004cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <TIM_OC2_SetConfig+0xe4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0x68>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <TIM_OC2_SetConfig+0xe8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <TIM_OC2_SetConfig+0xe4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC2_SetConfig+0x94>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <TIM_OC2_SetConfig+0xe8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d113      	bne.n	8004d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400

08004d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <TIM_OC3_SetConfig+0xe0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_OC3_SetConfig+0x66>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <TIM_OC3_SetConfig+0xe4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10d      	bne.n	8004dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <TIM_OC3_SetConfig+0xe0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <TIM_OC3_SetConfig+0x92>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <TIM_OC3_SetConfig+0xe4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d113      	bne.n	8004e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400

08004e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a12      	ldr	r2, [pc, #72]	; (8004edc <TIM_OC4_SetConfig+0xa4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC4_SetConfig+0x68>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a11      	ldr	r2, [pc, #68]	; (8004ee0 <TIM_OC4_SetConfig+0xa8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d109      	bne.n	8004eb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	019b      	lsls	r3, r3, #6
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010400 	.word	0x40010400

08004ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 030a 	bic.w	r3, r3, #10
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b087      	sub	sp, #28
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0210 	bic.w	r2, r3, #16
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	031b      	lsls	r3, r3, #12
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f043 0307 	orr.w	r3, r3, #7
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2201      	movs	r2, #1
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1a      	ldr	r2, [r3, #32]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	431a      	orrs	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005078:	2302      	movs	r3, #2
 800507a:	e05a      	b.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d022      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c8:	d01d      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d018      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1a      	ldr	r2, [pc, #104]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a15      	ldr	r2, [pc, #84]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10c      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4313      	orrs	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40010400 	.word	0x40010400
 8005154:	40014000 	.word	0x40014000
 8005158:	40001800 	.word	0x40001800

0800515c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e03f      	b.n	8005216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fe88 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 facb 	bl	8005764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	d130      	bne.n	800529a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Transmit_IT+0x26>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e029      	b.n	800529c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_UART_Transmit_IT+0x38>
 8005252:	2302      	movs	r3, #2
 8005254:	e022      	b.n	800529c <HAL_UART_Transmit_IT+0x7e>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2221      	movs	r2, #33	; 0x21
 800527a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005294:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_UART_IRQHandler+0x52>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9b4 	bl	8005660 <UART_Receive_IT>
      return;
 80052f8:	e0d1      	b.n	800549e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80b0 	beq.w	8005462 <HAL_UART_IRQHandler+0x1ba>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <HAL_UART_IRQHandler+0x70>
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 80a5 	beq.w	8005462 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_UART_IRQHandler+0x90>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005330:	f043 0201 	orr.w	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_UART_IRQHandler+0xb0>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005350:	f043 0202 	orr.w	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_UART_IRQHandler+0xd0>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	f043 0204 	orr.w	r2, r3, #4
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00f      	beq.n	80053a2 <HAL_UART_IRQHandler+0xfa>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_UART_IRQHandler+0xee>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d078      	beq.n	800549c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HAL_UART_IRQHandler+0x11c>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f94e 	bl	8005660 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <HAL_UART_IRQHandler+0x144>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d031      	beq.n	8005450 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f897 	bl	8005520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d123      	bne.n	8005448 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <HAL_UART_IRQHandler+0x1fc>)
 800541e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb fff8 	bl	800141a <HAL_DMA_Abort_IT>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800543a:	4610      	mov	r0, r2
 800543c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543e:	e00e      	b.n	800545e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f845 	bl	80054d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005446:	e00a      	b.n	800545e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f841 	bl	80054d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544e:	e006      	b.n	800545e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f83d 	bl	80054d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800545c:	e01e      	b.n	800549c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545e:	bf00      	nop
    return;
 8005460:	e01c      	b.n	800549c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_UART_IRQHandler+0x1d6>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f884 	bl	8005584 <UART_Transmit_IT>
    return;
 800547c:	e00f      	b.n	800549e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_UART_IRQHandler+0x1f6>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8cc 	bl	8005630 <UART_EndTransmit_IT>
    return;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <HAL_UART_IRQHandler+0x1f6>
    return;
 800549c:	bf00      	nop
  }
}
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	0800555d 	.word	0x0800555d

080054a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	2300      	movs	r3, #0
 80054f2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005504:	b2db      	uxtb	r3, r3
 8005506:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	4313      	orrs	r3, r2
 8005512:	b2db      	uxtb	r3, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005536:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff ffaa 	bl	80054d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b21      	cmp	r3, #33	; 0x21
 8005596:	d144      	bne.n	8005622 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a0:	d11a      	bne.n	80055d8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]
 80055ca:	e00e      	b.n	80055ea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]
 80055d6:	e008      	b.n	80055ea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	1c59      	adds	r1, r3, #1
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6211      	str	r1, [r2, #32]
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4619      	mov	r1, r3
 80055f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005646:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff29 	bl	80054a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b22      	cmp	r3, #34	; 0x22
 8005672:	d171      	bne.n	8005758 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d123      	bne.n	80056c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10e      	bne.n	80056aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	1c9a      	adds	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28
 80056a8:	e029      	b.n	80056fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28
 80056c4:	e01b      	b.n	80056fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6858      	ldr	r0, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	1c59      	adds	r1, r3, #1
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6291      	str	r1, [r2, #40]	; 0x28
 80056de:	b2c2      	uxtb	r2, r0
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e00c      	b.n	80056fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	1c58      	adds	r0, r3, #1
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	6288      	str	r0, [r1, #40]	; 0x28
 80056f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29b      	uxth	r3, r3
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4619      	mov	r1, r3
 800570c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800570e:	2b00      	cmp	r3, #0
 8005710:	d120      	bne.n	8005754 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0220 	bic.w	r2, r2, #32
 8005720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005730:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff feb6 	bl	80054bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e002      	b.n	800575a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057a6:	f023 030c 	bic.w	r3, r3, #12
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d2:	f040 818b 	bne.w	8005aec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4ac1      	ldr	r2, [pc, #772]	; (8005ae0 <UART_SetConfig+0x37c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d005      	beq.n	80057ec <UART_SetConfig+0x88>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4abf      	ldr	r2, [pc, #764]	; (8005ae4 <UART_SetConfig+0x380>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f040 80bd 	bne.w	8005966 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7fe fda6 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 80057f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	461d      	mov	r5, r3
 80057f6:	f04f 0600 	mov.w	r6, #0
 80057fa:	46a8      	mov	r8, r5
 80057fc:	46b1      	mov	r9, r6
 80057fe:	eb18 0308 	adds.w	r3, r8, r8
 8005802:	eb49 0409 	adc.w	r4, r9, r9
 8005806:	4698      	mov	r8, r3
 8005808:	46a1      	mov	r9, r4
 800580a:	eb18 0805 	adds.w	r8, r8, r5
 800580e:	eb49 0906 	adc.w	r9, r9, r6
 8005812:	f04f 0100 	mov.w	r1, #0
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800581e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005822:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005826:	4688      	mov	r8, r1
 8005828:	4691      	mov	r9, r2
 800582a:	eb18 0005 	adds.w	r0, r8, r5
 800582e:	eb49 0106 	adc.w	r1, r9, r6
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	461d      	mov	r5, r3
 8005838:	f04f 0600 	mov.w	r6, #0
 800583c:	196b      	adds	r3, r5, r5
 800583e:	eb46 0406 	adc.w	r4, r6, r6
 8005842:	461a      	mov	r2, r3
 8005844:	4623      	mov	r3, r4
 8005846:	f7fa fcd9 	bl	80001fc <__aeabi_uldivmod>
 800584a:	4603      	mov	r3, r0
 800584c:	460c      	mov	r4, r1
 800584e:	461a      	mov	r2, r3
 8005850:	4ba5      	ldr	r3, [pc, #660]	; (8005ae8 <UART_SetConfig+0x384>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	461d      	mov	r5, r3
 8005860:	f04f 0600 	mov.w	r6, #0
 8005864:	46a9      	mov	r9, r5
 8005866:	46b2      	mov	sl, r6
 8005868:	eb19 0309 	adds.w	r3, r9, r9
 800586c:	eb4a 040a 	adc.w	r4, sl, sl
 8005870:	4699      	mov	r9, r3
 8005872:	46a2      	mov	sl, r4
 8005874:	eb19 0905 	adds.w	r9, r9, r5
 8005878:	eb4a 0a06 	adc.w	sl, sl, r6
 800587c:	f04f 0100 	mov.w	r1, #0
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005888:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800588c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005890:	4689      	mov	r9, r1
 8005892:	4692      	mov	sl, r2
 8005894:	eb19 0005 	adds.w	r0, r9, r5
 8005898:	eb4a 0106 	adc.w	r1, sl, r6
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	461d      	mov	r5, r3
 80058a2:	f04f 0600 	mov.w	r6, #0
 80058a6:	196b      	adds	r3, r5, r5
 80058a8:	eb46 0406 	adc.w	r4, r6, r6
 80058ac:	461a      	mov	r2, r3
 80058ae:	4623      	mov	r3, r4
 80058b0:	f7fa fca4 	bl	80001fc <__aeabi_uldivmod>
 80058b4:	4603      	mov	r3, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	461a      	mov	r2, r3
 80058ba:	4b8b      	ldr	r3, [pc, #556]	; (8005ae8 <UART_SetConfig+0x384>)
 80058bc:	fba3 1302 	umull	r1, r3, r3, r2
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	2164      	movs	r1, #100	; 0x64
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	3332      	adds	r3, #50	; 0x32
 80058ce:	4a86      	ldr	r2, [pc, #536]	; (8005ae8 <UART_SetConfig+0x384>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058dc:	4498      	add	r8, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	461d      	mov	r5, r3
 80058e2:	f04f 0600 	mov.w	r6, #0
 80058e6:	46a9      	mov	r9, r5
 80058e8:	46b2      	mov	sl, r6
 80058ea:	eb19 0309 	adds.w	r3, r9, r9
 80058ee:	eb4a 040a 	adc.w	r4, sl, sl
 80058f2:	4699      	mov	r9, r3
 80058f4:	46a2      	mov	sl, r4
 80058f6:	eb19 0905 	adds.w	r9, r9, r5
 80058fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800590a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800590e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005912:	4689      	mov	r9, r1
 8005914:	4692      	mov	sl, r2
 8005916:	eb19 0005 	adds.w	r0, r9, r5
 800591a:	eb4a 0106 	adc.w	r1, sl, r6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	461d      	mov	r5, r3
 8005924:	f04f 0600 	mov.w	r6, #0
 8005928:	196b      	adds	r3, r5, r5
 800592a:	eb46 0406 	adc.w	r4, r6, r6
 800592e:	461a      	mov	r2, r3
 8005930:	4623      	mov	r3, r4
 8005932:	f7fa fc63 	bl	80001fc <__aeabi_uldivmod>
 8005936:	4603      	mov	r3, r0
 8005938:	460c      	mov	r4, r1
 800593a:	461a      	mov	r2, r3
 800593c:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <UART_SetConfig+0x384>)
 800593e:	fba3 1302 	umull	r1, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	2164      	movs	r1, #100	; 0x64
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	3332      	adds	r3, #50	; 0x32
 8005950:	4a65      	ldr	r2, [pc, #404]	; (8005ae8 <UART_SetConfig+0x384>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	f003 0207 	and.w	r2, r3, #7
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4442      	add	r2, r8
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e26f      	b.n	8005e46 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005966:	f7fe fcd5 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 800596a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	461d      	mov	r5, r3
 8005970:	f04f 0600 	mov.w	r6, #0
 8005974:	46a8      	mov	r8, r5
 8005976:	46b1      	mov	r9, r6
 8005978:	eb18 0308 	adds.w	r3, r8, r8
 800597c:	eb49 0409 	adc.w	r4, r9, r9
 8005980:	4698      	mov	r8, r3
 8005982:	46a1      	mov	r9, r4
 8005984:	eb18 0805 	adds.w	r8, r8, r5
 8005988:	eb49 0906 	adc.w	r9, r9, r6
 800598c:	f04f 0100 	mov.w	r1, #0
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005998:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800599c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059a0:	4688      	mov	r8, r1
 80059a2:	4691      	mov	r9, r2
 80059a4:	eb18 0005 	adds.w	r0, r8, r5
 80059a8:	eb49 0106 	adc.w	r1, r9, r6
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	461d      	mov	r5, r3
 80059b2:	f04f 0600 	mov.w	r6, #0
 80059b6:	196b      	adds	r3, r5, r5
 80059b8:	eb46 0406 	adc.w	r4, r6, r6
 80059bc:	461a      	mov	r2, r3
 80059be:	4623      	mov	r3, r4
 80059c0:	f7fa fc1c 	bl	80001fc <__aeabi_uldivmod>
 80059c4:	4603      	mov	r3, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	461a      	mov	r2, r3
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <UART_SetConfig+0x384>)
 80059cc:	fba3 2302 	umull	r2, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	461d      	mov	r5, r3
 80059da:	f04f 0600 	mov.w	r6, #0
 80059de:	46a9      	mov	r9, r5
 80059e0:	46b2      	mov	sl, r6
 80059e2:	eb19 0309 	adds.w	r3, r9, r9
 80059e6:	eb4a 040a 	adc.w	r4, sl, sl
 80059ea:	4699      	mov	r9, r3
 80059ec:	46a2      	mov	sl, r4
 80059ee:	eb19 0905 	adds.w	r9, r9, r5
 80059f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a0a:	4689      	mov	r9, r1
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	eb19 0005 	adds.w	r0, r9, r5
 8005a12:	eb4a 0106 	adc.w	r1, sl, r6
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	f04f 0600 	mov.w	r6, #0
 8005a20:	196b      	adds	r3, r5, r5
 8005a22:	eb46 0406 	adc.w	r4, r6, r6
 8005a26:	461a      	mov	r2, r3
 8005a28:	4623      	mov	r3, r4
 8005a2a:	f7fa fbe7 	bl	80001fc <__aeabi_uldivmod>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	461a      	mov	r2, r3
 8005a34:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <UART_SetConfig+0x384>)
 8005a36:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2164      	movs	r1, #100	; 0x64
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	3332      	adds	r3, #50	; 0x32
 8005a48:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <UART_SetConfig+0x384>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a56:	4498      	add	r8, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	f04f 0600 	mov.w	r6, #0
 8005a60:	46a9      	mov	r9, r5
 8005a62:	46b2      	mov	sl, r6
 8005a64:	eb19 0309 	adds.w	r3, r9, r9
 8005a68:	eb4a 040a 	adc.w	r4, sl, sl
 8005a6c:	4699      	mov	r9, r3
 8005a6e:	46a2      	mov	sl, r4
 8005a70:	eb19 0905 	adds.w	r9, r9, r5
 8005a74:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a78:	f04f 0100 	mov.w	r1, #0
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a8c:	4689      	mov	r9, r1
 8005a8e:	4692      	mov	sl, r2
 8005a90:	eb19 0005 	adds.w	r0, r9, r5
 8005a94:	eb4a 0106 	adc.w	r1, sl, r6
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	461d      	mov	r5, r3
 8005a9e:	f04f 0600 	mov.w	r6, #0
 8005aa2:	196b      	adds	r3, r5, r5
 8005aa4:	eb46 0406 	adc.w	r4, r6, r6
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	f7fa fba6 	bl	80001fc <__aeabi_uldivmod>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <UART_SetConfig+0x384>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	3332      	adds	r3, #50	; 0x32
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <UART_SetConfig+0x384>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 0207 	and.w	r2, r3, #7
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4442      	add	r2, r8
 8005adc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ade:	e1b2      	b.n	8005e46 <UART_SetConfig+0x6e2>
 8005ae0:	40011000 	.word	0x40011000
 8005ae4:	40011400 	.word	0x40011400
 8005ae8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4ad7      	ldr	r2, [pc, #860]	; (8005e50 <UART_SetConfig+0x6ec>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d005      	beq.n	8005b02 <UART_SetConfig+0x39e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4ad6      	ldr	r2, [pc, #856]	; (8005e54 <UART_SetConfig+0x6f0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	f040 80d1 	bne.w	8005ca4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b02:	f7fe fc1b 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8005b06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	469a      	mov	sl, r3
 8005b0c:	f04f 0b00 	mov.w	fp, #0
 8005b10:	46d0      	mov	r8, sl
 8005b12:	46d9      	mov	r9, fp
 8005b14:	eb18 0308 	adds.w	r3, r8, r8
 8005b18:	eb49 0409 	adc.w	r4, r9, r9
 8005b1c:	4698      	mov	r8, r3
 8005b1e:	46a1      	mov	r9, r4
 8005b20:	eb18 080a 	adds.w	r8, r8, sl
 8005b24:	eb49 090b 	adc.w	r9, r9, fp
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b3c:	4688      	mov	r8, r1
 8005b3e:	4691      	mov	r9, r2
 8005b40:	eb1a 0508 	adds.w	r5, sl, r8
 8005b44:	eb4b 0609 	adc.w	r6, fp, r9
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	f04f 0400 	mov.w	r4, #0
 8005b5a:	0094      	lsls	r4, r2, #2
 8005b5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b60:	008b      	lsls	r3, r1, #2
 8005b62:	461a      	mov	r2, r3
 8005b64:	4623      	mov	r3, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	4631      	mov	r1, r6
 8005b6a:	f7fa fb47 	bl	80001fc <__aeabi_uldivmod>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	461a      	mov	r2, r3
 8005b74:	4bb8      	ldr	r3, [pc, #736]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005b76:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	469b      	mov	fp, r3
 8005b84:	f04f 0c00 	mov.w	ip, #0
 8005b88:	46d9      	mov	r9, fp
 8005b8a:	46e2      	mov	sl, ip
 8005b8c:	eb19 0309 	adds.w	r3, r9, r9
 8005b90:	eb4a 040a 	adc.w	r4, sl, sl
 8005b94:	4699      	mov	r9, r3
 8005b96:	46a2      	mov	sl, r4
 8005b98:	eb19 090b 	adds.w	r9, r9, fp
 8005b9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4692      	mov	sl, r2
 8005bb8:	eb1b 0509 	adds.w	r5, fp, r9
 8005bbc:	eb4c 060a 	adc.w	r6, ip, sl
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	f04f 0400 	mov.w	r4, #0
 8005bd2:	0094      	lsls	r4, r2, #2
 8005bd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd8:	008b      	lsls	r3, r1, #2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4623      	mov	r3, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	4631      	mov	r1, r6
 8005be2:	f7fa fb0b 	bl	80001fc <__aeabi_uldivmod>
 8005be6:	4603      	mov	r3, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005bee:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	2164      	movs	r1, #100	; 0x64
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	3332      	adds	r3, #50	; 0x32
 8005c00:	4a95      	ldr	r2, [pc, #596]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0c:	4498      	add	r8, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	469b      	mov	fp, r3
 8005c12:	f04f 0c00 	mov.w	ip, #0
 8005c16:	46d9      	mov	r9, fp
 8005c18:	46e2      	mov	sl, ip
 8005c1a:	eb19 0309 	adds.w	r3, r9, r9
 8005c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c22:	4699      	mov	r9, r3
 8005c24:	46a2      	mov	sl, r4
 8005c26:	eb19 090b 	adds.w	r9, r9, fp
 8005c2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c42:	4689      	mov	r9, r1
 8005c44:	4692      	mov	sl, r2
 8005c46:	eb1b 0509 	adds.w	r5, fp, r9
 8005c4a:	eb4c 060a 	adc.w	r6, ip, sl
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4619      	mov	r1, r3
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	f04f 0400 	mov.w	r4, #0
 8005c60:	0094      	lsls	r4, r2, #2
 8005c62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c66:	008b      	lsls	r3, r1, #2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	4631      	mov	r1, r6
 8005c70:	f7fa fac4 	bl	80001fc <__aeabi_uldivmod>
 8005c74:	4603      	mov	r3, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4b77      	ldr	r3, [pc, #476]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2164      	movs	r1, #100	; 0x64
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	3332      	adds	r3, #50	; 0x32
 8005c8e:	4a72      	ldr	r2, [pc, #456]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 020f 	and.w	r2, r3, #15
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4442      	add	r2, r8
 8005ca0:	609a      	str	r2, [r3, #8]
 8005ca2:	e0d0      	b.n	8005e46 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fe fb36 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005ca8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	469a      	mov	sl, r3
 8005cae:	f04f 0b00 	mov.w	fp, #0
 8005cb2:	46d0      	mov	r8, sl
 8005cb4:	46d9      	mov	r9, fp
 8005cb6:	eb18 0308 	adds.w	r3, r8, r8
 8005cba:	eb49 0409 	adc.w	r4, r9, r9
 8005cbe:	4698      	mov	r8, r3
 8005cc0:	46a1      	mov	r9, r4
 8005cc2:	eb18 080a 	adds.w	r8, r8, sl
 8005cc6:	eb49 090b 	adc.w	r9, r9, fp
 8005cca:	f04f 0100 	mov.w	r1, #0
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cde:	4688      	mov	r8, r1
 8005ce0:	4691      	mov	r9, r2
 8005ce2:	eb1a 0508 	adds.w	r5, sl, r8
 8005ce6:	eb4b 0609 	adc.w	r6, fp, r9
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	f04f 0400 	mov.w	r4, #0
 8005cfc:	0094      	lsls	r4, r2, #2
 8005cfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d02:	008b      	lsls	r3, r1, #2
 8005d04:	461a      	mov	r2, r3
 8005d06:	4623      	mov	r3, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	f7fa fa76 	bl	80001fc <__aeabi_uldivmod>
 8005d10:	4603      	mov	r3, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b50      	ldr	r3, [pc, #320]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005d18:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	469b      	mov	fp, r3
 8005d26:	f04f 0c00 	mov.w	ip, #0
 8005d2a:	46d9      	mov	r9, fp
 8005d2c:	46e2      	mov	sl, ip
 8005d2e:	eb19 0309 	adds.w	r3, r9, r9
 8005d32:	eb4a 040a 	adc.w	r4, sl, sl
 8005d36:	4699      	mov	r9, r3
 8005d38:	46a2      	mov	sl, r4
 8005d3a:	eb19 090b 	adds.w	r9, r9, fp
 8005d3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d56:	4689      	mov	r9, r1
 8005d58:	4692      	mov	sl, r2
 8005d5a:	eb1b 0509 	adds.w	r5, fp, r9
 8005d5e:	eb4c 060a 	adc.w	r6, ip, sl
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4619      	mov	r1, r3
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	f04f 0400 	mov.w	r4, #0
 8005d74:	0094      	lsls	r4, r2, #2
 8005d76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d7a:	008b      	lsls	r3, r1, #2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4623      	mov	r3, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	4631      	mov	r1, r6
 8005d84:	f7fa fa3a 	bl	80001fc <__aeabi_uldivmod>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4b32      	ldr	r3, [pc, #200]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005d90:	fba3 1302 	umull	r1, r3, r3, r2
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	2164      	movs	r1, #100	; 0x64
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	3332      	adds	r3, #50	; 0x32
 8005da2:	4a2d      	ldr	r2, [pc, #180]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dae:	4498      	add	r8, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	469b      	mov	fp, r3
 8005db4:	f04f 0c00 	mov.w	ip, #0
 8005db8:	46d9      	mov	r9, fp
 8005dba:	46e2      	mov	sl, ip
 8005dbc:	eb19 0309 	adds.w	r3, r9, r9
 8005dc0:	eb4a 040a 	adc.w	r4, sl, sl
 8005dc4:	4699      	mov	r9, r3
 8005dc6:	46a2      	mov	sl, r4
 8005dc8:	eb19 090b 	adds.w	r9, r9, fp
 8005dcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ddc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005de0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005de4:	4689      	mov	r9, r1
 8005de6:	4692      	mov	sl, r2
 8005de8:	eb1b 0509 	adds.w	r5, fp, r9
 8005dec:	eb4c 060a 	adc.w	r6, ip, sl
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	f04f 0400 	mov.w	r4, #0
 8005e02:	0094      	lsls	r4, r2, #2
 8005e04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e08:	008b      	lsls	r3, r1, #2
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	4631      	mov	r1, r6
 8005e12:	f7fa f9f3 	bl	80001fc <__aeabi_uldivmod>
 8005e16:	4603      	mov	r3, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	2164      	movs	r1, #100	; 0x64
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	3332      	adds	r3, #50	; 0x32
 8005e30:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <UART_SetConfig+0x6f4>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4442      	add	r2, r8
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	e7ff      	b.n	8005e46 <UART_SetConfig+0x6e2>
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e50:	40011000 	.word	0x40011000
 8005e54:	40011400 	.word	0x40011400
 8005e58:	51eb851f 	.word	0x51eb851f

08005e5c <__libc_init_array>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	4e0d      	ldr	r6, [pc, #52]	; (8005e94 <__libc_init_array+0x38>)
 8005e60:	4c0d      	ldr	r4, [pc, #52]	; (8005e98 <__libc_init_array+0x3c>)
 8005e62:	1ba4      	subs	r4, r4, r6
 8005e64:	10a4      	asrs	r4, r4, #2
 8005e66:	2500      	movs	r5, #0
 8005e68:	42a5      	cmp	r5, r4
 8005e6a:	d109      	bne.n	8005e80 <__libc_init_array+0x24>
 8005e6c:	4e0b      	ldr	r6, [pc, #44]	; (8005e9c <__libc_init_array+0x40>)
 8005e6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ea0 <__libc_init_array+0x44>)
 8005e70:	f000 f820 	bl	8005eb4 <_init>
 8005e74:	1ba4      	subs	r4, r4, r6
 8005e76:	10a4      	asrs	r4, r4, #2
 8005e78:	2500      	movs	r5, #0
 8005e7a:	42a5      	cmp	r5, r4
 8005e7c:	d105      	bne.n	8005e8a <__libc_init_array+0x2e>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e84:	4798      	blx	r3
 8005e86:	3501      	adds	r5, #1
 8005e88:	e7ee      	b.n	8005e68 <__libc_init_array+0xc>
 8005e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e8e:	4798      	blx	r3
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7f2      	b.n	8005e7a <__libc_init_array+0x1e>
 8005e94:	08005fb0 	.word	0x08005fb0
 8005e98:	08005fb0 	.word	0x08005fb0
 8005e9c:	08005fb0 	.word	0x08005fb0
 8005ea0:	08005fb4 	.word	0x08005fb4

08005ea4 <memset>:
 8005ea4:	4402      	add	r2, r0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d100      	bne.n	8005eae <memset+0xa>
 8005eac:	4770      	bx	lr
 8005eae:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb2:	e7f9      	b.n	8005ea8 <memset+0x4>

08005eb4 <_init>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_fini>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr
