
pvs1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002038  08002038  00012038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002048  08002048  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002048  08002048  00012048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002050  08002050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000043ab  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001052  00000000  00000000  000243e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  00025440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003a0  00000000  00000000  00025878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f40  00000000  00000000  00025c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005342  00000000  00000000  00046b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87e5  00000000  00000000  0004be9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011467f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ef4  00000000  00000000  001146d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002020 	.word	0x08002020

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002020 	.word	0x08002020

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a34      	ldr	r2, [pc, #208]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <MX_GPIO_Init+0xf0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_GPIO_Init+0xf0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a2d      	ldr	r2, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xf0>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_GPIO_Init+0xf0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800058c:	4812      	ldr	r0, [pc, #72]	; (80005d8 <MX_GPIO_Init+0xf4>)
 800058e:	f001 f8ed 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_GPIO_Init+0xf8>)
 80005a8:	f000 ff1c 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0xf4>)
 80005c6:	f000 ff0d 	bl	80013e4 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40020800 	.word	0x40020800

080005e0 <set_green_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void set_green_led(int on) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2301      	movne	r3, #1
 80005f0:	2300      	moveq	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <set_green_led+0x28>)
 80005fc:	f001 f8b6 	bl	800176c <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020c00 	.word	0x40020c00

0800060c <set_yellow_led>:

static void set_yellow_led(int on) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <set_yellow_led+0x28>)
 8000628:	f001 f8a0 	bl	800176c <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40020c00 	.word	0x40020c00

08000638 <set_red_led>:

static void set_red_led(int on) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <set_red_led+0x28>)
 8000654:	f001 f88a 	bl	800176c <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020c00 	.word	0x40020c00

08000664 <is_btn_clicked>:

static int is_btn_clicked(int * lastPressTime) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	// reset = pressed

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET && HAL_GetTick() - *lastPressTime > 1000) {
 800066c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <is_btn_clicked+0x44>)
 8000672:	f001 f863 	bl	800173c <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d110      	bne.n	800069e <is_btn_clicked+0x3a>
 800067c:	f000 fdc0 	bl	8001200 <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800068c:	d907      	bls.n	800069e <is_btn_clicked+0x3a>
		*lastPressTime = HAL_GetTick();
 800068e:	f000 fdb7 	bl	8001200 <HAL_GetTick>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]

		return 1;
 800069a:	2301      	movs	r3, #1
 800069c:	e000      	b.n	80006a0 <is_btn_clicked+0x3c>
	}

	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020800 	.word	0x40020800

080006ac <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0


/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80006b2:	f000 fd3f 	bl	8001134 <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 80006b6:	f000 fc49 	bl	8000f4c <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 80006ba:	f7ff ff13 	bl	80004e4 <MX_GPIO_Init>
/* USER CODE BEGIN 2 */

	set_green_led(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff8e 	bl	80005e0 <set_green_led>
	set_yellow_led(0);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ffa1 	bl	800060c <set_yellow_led>
	set_red_led(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ffb4 	bl	8000638 <set_red_led>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0, state[5] = { 0 }, lastPressTime = 0, elapsedStateTime[5] = { 0 }, t = HAL_GetTick();
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	f000 fd83 	bl	8001200 <HAL_GetTick>
 80006fa:	4603      	mov	r3, r0
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  while (1) {
      if (is_btn_clicked(&lastPressTime)) {
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffae 	bl	8000664 <is_btn_clicked>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d015      	beq.n	800073a <main+0x8e>
          i = (i + 1) % 5;
 800070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000710:	1c5a      	adds	r2, r3, #1
 8000712:	4bce      	ldr	r3, [pc, #824]	; (8000a4c <main+0x3a0>)
 8000714:	fb83 1302 	smull	r1, r3, r3, r2
 8000718:	1059      	asrs	r1, r3, #1
 800071a:	17d3      	asrs	r3, r2, #31
 800071c:	1ac9      	subs	r1, r1, r3
 800071e:	460b      	mov	r3, r1
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	637b      	str	r3, [r7, #52]	; 0x34

        	set_green_led(0);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff59 	bl	80005e0 <set_green_led>
        	set_yellow_led(0);
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ff6c 	bl	800060c <set_yellow_led>
        	set_red_led(0);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff7f 	bl	8000638 <set_red_led>
      }

      elapsedStateTime[i] += HAL_GetTick() - t;
 800073a:	f000 fd61 	bl	8001200 <HAL_GetTick>
 800073e:	4602      	mov	r2, r0
 8000740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800074c:	440b      	add	r3, r1
 800074e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000752:	4413      	add	r3, r2
 8000754:	461a      	mov	r2, r3
 8000756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800075e:	440b      	add	r3, r1
 8000760:	f843 2c34 	str.w	r2, [r3, #-52]
      t = HAL_GetTick();
 8000764:	f000 fd4c 	bl	8001200 <HAL_GetTick>
 8000768:	4603      	mov	r3, r0
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076e:	2b04      	cmp	r3, #4
 8000770:	d8c5      	bhi.n	80006fe <main+0x52>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <main+0xcc>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	0800078d 	.word	0x0800078d
 800077c:	08000833 	.word	0x08000833
 8000780:	08000a23 	.word	0x08000a23
 8000784:	08000b75 	.word	0x08000b75
 8000788:	08000d79 	.word	0x08000d79

      switch (i) {
      case 0:
          switch (state[i]) {
 800078c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000794:	4413      	add	r3, r2
 8000796:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <main+0xf8>
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d024      	beq.n	80007ec <main+0x140>
              if (elapsedStateTime[i] >= 250) {
                    elapsedStateTime[i] = 0;
                  state[i] = 0;
              }
          }
          break;
 80007a2:	e3c3      	b.n	8000f2c <main+0x880>
              set_yellow_led(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ff31 	bl	800060c <set_yellow_led>
              if (elapsedStateTime[i] >= 250) {
 80007aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007b2:	4413      	add	r3, r2
 80007b4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80007b8:	2bf9      	cmp	r3, #249	; 0xf9
 80007ba:	dd38      	ble.n	800082e <main+0x182>
                  elapsedStateTime[i] = 0;
 80007bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007c4:	4413      	add	r3, r2
 80007c6:	2200      	movs	r2, #0
 80007c8:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 80007cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007d4:	4413      	add	r3, r2
 80007d6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007e4:	440b      	add	r3, r1
 80007e6:	f843 2c1c 	str.w	r2, [r3, #-28]
              break;
 80007ea:	e020      	b.n	800082e <main+0x182>
              set_green_led(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff fef7 	bl	80005e0 <set_green_led>
              set_yellow_led(0);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ff0a 	bl	800060c <set_yellow_led>
              if (elapsedStateTime[i] >= 250) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000800:	4413      	add	r3, r2
 8000802:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000806:	2bf9      	cmp	r3, #249	; 0xf9
 8000808:	f340 8390 	ble.w	8000f2c <main+0x880>
                    elapsedStateTime[i] = 0;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000814:	4413      	add	r3, r2
 8000816:	2200      	movs	r2, #0
 8000818:	f843 2c34 	str.w	r2, [r3, #-52]
                  state[i] = 0;
 800081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000824:	4413      	add	r3, r2
 8000826:	2200      	movs	r2, #0
 8000828:	f843 2c1c 	str.w	r2, [r3, #-28]
          break;
 800082c:	e37e      	b.n	8000f2c <main+0x880>
              break;
 800082e:	bf00      	nop
          break;
 8000830:	e37c      	b.n	8000f2c <main+0x880>

      case 1:
      	switch(state[i]) {
 8000832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800083a:	4413      	add	r3, r2
 800083c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000840:	2b05      	cmp	r3, #5
 8000842:	f200 8376 	bhi.w	8000f32 <main+0x886>
 8000846:	a201      	add	r2, pc, #4	; (adr r2, 800084c <main+0x1a0>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	08000865 	.word	0x08000865
 8000850:	080008af 	.word	0x080008af
 8000854:	080008f9 	.word	0x080008f9
 8000858:	08000943 	.word	0x08000943
 800085c:	0800098b 	.word	0x0800098b
 8000860:	080009d3 	.word	0x080009d3
      	case 0:
              set_red_led(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fee7 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 250) {
 800086a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000872:	4413      	add	r3, r2
 8000874:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000878:	2bf9      	cmp	r3, #249	; 0xf9
 800087a:	f340 80c8 	ble.w	8000a0e <main+0x362>
                  elapsedStateTime[i] = 0;
 800087e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000886:	4413      	add	r3, r2
 8000888:	2200      	movs	r2, #0
 800088a:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 800088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000896:	4413      	add	r3, r2
 8000898:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80008a6:	440b      	add	r3, r1
 80008a8:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 80008ac:	e0af      	b.n	8000a0e <main+0x362>

          case 1:
              set_red_led(0);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fec2 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 250) {
 80008b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008bc:	4413      	add	r3, r2
 80008be:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80008c2:	2bf9      	cmp	r3, #249	; 0xf9
 80008c4:	f340 80a5 	ble.w	8000a12 <main+0x366>
                  elapsedStateTime[i] = 0;
 80008c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008d0:	4413      	add	r3, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 80008d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008e0:	4413      	add	r3, r2
 80008e2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80008f0:	440b      	add	r3, r1
 80008f2:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 80008f6:	e08c      	b.n	8000a12 <main+0x366>

          case 2:
              set_yellow_led(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fe87 	bl	800060c <set_yellow_led>

              if (elapsedStateTime[i] >= 250) {
 80008fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000906:	4413      	add	r3, r2
 8000908:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800090c:	2bf9      	cmp	r3, #249	; 0xf9
 800090e:	f340 8082 	ble.w	8000a16 <main+0x36a>
                  elapsedStateTime[i] = 0;
 8000912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800091a:	4413      	add	r3, r2
 800091c:	2200      	movs	r2, #0
 800091e:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800092a:	4413      	add	r3, r2
 800092c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800093a:	440b      	add	r3, r1
 800093c:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000940:	e069      	b.n	8000a16 <main+0x36a>

          case 3:
            	set_yellow_led(0);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fe62 	bl	800060c <set_yellow_led>

              if (elapsedStateTime[i] >= 250) {
 8000948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000950:	4413      	add	r3, r2
 8000952:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000956:	2bf9      	cmp	r3, #249	; 0xf9
 8000958:	dd5f      	ble.n	8000a1a <main+0x36e>
                  elapsedStateTime[i] = 0;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000962:	4413      	add	r3, r2
 8000964:	2200      	movs	r2, #0
 8000966:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 800096a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000972:	4413      	add	r3, r2
 8000974:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000982:	440b      	add	r3, r1
 8000984:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000988:	e047      	b.n	8000a1a <main+0x36e>
          case 4:
              set_green_led(1);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fe28 	bl	80005e0 <set_green_led>

              if (elapsedStateTime[i] >= 250) {
 8000990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000998:	4413      	add	r3, r2
 800099a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800099e:	2bf9      	cmp	r3, #249	; 0xf9
 80009a0:	dd3d      	ble.n	8000a1e <main+0x372>
                  elapsedStateTime[i] = 0;
 80009a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009aa:	4413      	add	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 80009b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009ba:	4413      	add	r3, r2
 80009bc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80009ca:	440b      	add	r3, r1
 80009cc:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 80009d0:	e025      	b.n	8000a1e <main+0x372>
          case 5:
              set_green_led(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fe04 	bl	80005e0 <set_green_led>

              if (elapsedStateTime[i] >= 250) {
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009e0:	4413      	add	r3, r2
 80009e2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80009e6:	2bf9      	cmp	r3, #249	; 0xf9
 80009e8:	f340 82a3 	ble.w	8000f32 <main+0x886>
                  elapsedStateTime[i] = 0;
 80009ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009f4:	4413      	add	r3, r2
 80009f6:	2200      	movs	r2, #0
 80009f8:	f843 2c34 	str.w	r2, [r3, #-52]
                  state[i] = 0;
 80009fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a04:	4413      	add	r3, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
          }
          break;
 8000a0c:	e291      	b.n	8000f32 <main+0x886>
              break;
 8000a0e:	bf00      	nop
 8000a10:	e28f      	b.n	8000f32 <main+0x886>
              break;
 8000a12:	bf00      	nop
 8000a14:	e28d      	b.n	8000f32 <main+0x886>
              break;
 8000a16:	bf00      	nop
 8000a18:	e28b      	b.n	8000f32 <main+0x886>
              break;
 8000a1a:	bf00      	nop
 8000a1c:	e289      	b.n	8000f32 <main+0x886>
              break;
 8000a1e:	bf00      	nop
          break;
 8000a20:	e287      	b.n	8000f32 <main+0x886>

      case 2:
          switch(state[i]) {
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a2a:	4413      	add	r3, r2
 8000a2c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	f200 8281 	bhi.w	8000f38 <main+0x88c>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <main+0x390>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000a9b 	.word	0x08000a9b
 8000a44:	08000ae3 	.word	0x08000ae3
 8000a48:	08000b2d 	.word	0x08000b2d
 8000a4c:	66666667 	.word	0x66666667
          case 0:
              set_green_led(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fdc5 	bl	80005e0 <set_green_led>

              if (elapsedStateTime[i] >= 400) {
 8000a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a5e:	4413      	add	r3, r2
 8000a60:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000a64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a68:	db7e      	blt.n	8000b68 <main+0x4bc>
                  elapsedStateTime[i] = 0;
 8000a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a72:	4413      	add	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a82:	4413      	add	r3, r2
 8000a84:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000a92:	440b      	add	r3, r1
 8000a94:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000a98:	e066      	b.n	8000b68 <main+0x4bc>
          case 1:
              set_green_led(0);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fda0 	bl	80005e0 <set_green_led>

              if (elapsedStateTime[i] >= 250) {
 8000aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000aae:	2bf9      	cmp	r3, #249	; 0xf9
 8000ab0:	dd5c      	ble.n	8000b6c <main+0x4c0>
                  elapsedStateTime[i] = 0;
 8000ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000aba:	4413      	add	r3, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000aca:	4413      	add	r3, r2
 8000acc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ada:	440b      	add	r3, r1
 8000adc:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000ae0:	e044      	b.n	8000b6c <main+0x4c0>
          case 2:
              set_red_led(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fda8 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 400) {
 8000ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000af0:	4413      	add	r3, r2
 8000af2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000af6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000afa:	db39      	blt.n	8000b70 <main+0x4c4>
                  elapsedStateTime[i] = 0;
 8000afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b04:	4413      	add	r3, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b14:	4413      	add	r3, r2
 8000b16:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000b24:	440b      	add	r3, r1
 8000b26:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000b2a:	e021      	b.n	8000b70 <main+0x4c4>
          case 3:
              set_red_led(0);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fd83 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 250) {
 8000b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000b40:	2bf9      	cmp	r3, #249	; 0xf9
 8000b42:	f340 81f9 	ble.w	8000f38 <main+0x88c>
                  elapsedStateTime[i] = 0;
 8000b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b4e:	4413      	add	r3, r2
 8000b50:	2200      	movs	r2, #0
 8000b52:	f843 2c34 	str.w	r2, [r3, #-52]
                  state[i] = 0;
 8000b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b5e:	4413      	add	r3, r2
 8000b60:	2200      	movs	r2, #0
 8000b62:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
          }
          break;
 8000b66:	e1e7      	b.n	8000f38 <main+0x88c>
              break;
 8000b68:	bf00      	nop
 8000b6a:	e1e5      	b.n	8000f38 <main+0x88c>
              break;
 8000b6c:	bf00      	nop
 8000b6e:	e1e3      	b.n	8000f38 <main+0x88c>
              break;
 8000b70:	bf00      	nop
          break;
 8000b72:	e1e1      	b.n	8000f38 <main+0x88c>
      case 3:
          switch(state[i]) {
 8000b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	f200 81db 	bhi.w	8000f3e <main+0x892>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <main+0x4e4>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000ba9 	.word	0x08000ba9
 8000b94:	08000bf7 	.word	0x08000bf7
 8000b98:	08000c43 	.word	0x08000c43
 8000b9c:	08000c91 	.word	0x08000c91
 8000ba0:	08000cdb 	.word	0x08000cdb
 8000ba4:	08000d27 	.word	0x08000d27
          case 0:
              set_red_led(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fd45 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 3000) {
 8000bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000bbc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	f340 80cf 	ble.w	8000d64 <main+0x6b8>
                  elapsedStateTime[i] = 0;
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000bce:	4413      	add	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000bde:	4413      	add	r3, r2
 8000be0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000bee:	440b      	add	r3, r1
 8000bf0:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000bf4:	e0b6      	b.n	8000d64 <main+0x6b8>
          case 1:
              set_red_led(0);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fd1e 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 1000) {
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c04:	4413      	add	r3, r2
 8000c06:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0e:	f2c0 80ab 	blt.w	8000d68 <main+0x6bc>
                  elapsedStateTime[i] = 0;
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c1a:	4413      	add	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c2a:	4413      	add	r3, r2
 8000c2c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000c40:	e092      	b.n	8000d68 <main+0x6bc>
          case 2:
              set_yellow_led(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fce2 	bl	800060c <set_yellow_led>

              if (elapsedStateTime[i] >= 3000) {
 8000c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c50:	4413      	add	r3, r2
 8000c52:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000c56:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f340 8086 	ble.w	8000d6c <main+0x6c0>
                  elapsedStateTime[i] = 0;
 8000c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c68:	4413      	add	r3, r2
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c78:	4413      	add	r3, r2
 8000c7a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000c88:	440b      	add	r3, r1
 8000c8a:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000c8e:	e06d      	b.n	8000d6c <main+0x6c0>
          case 3:
              set_yellow_led(0);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fcbb 	bl	800060c <set_yellow_led>

              if (elapsedStateTime[i] >= 1000) {
 8000c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c9e:	4413      	add	r3, r2
 8000ca0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca8:	db62      	blt.n	8000d70 <main+0x6c4>
                  elapsedStateTime[i] = 0;
 8000caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000cd8:	e04a      	b.n	8000d70 <main+0x6c4>
          case 4:
              set_green_led(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff fc80 	bl	80005e0 <set_green_led>

              if (elapsedStateTime[i] >= 3000) {
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ce8:	4413      	add	r3, r2
 8000cea:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000cee:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	dd3e      	ble.n	8000d74 <main+0x6c8>
                  elapsedStateTime[i] = 0;
 8000cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cfe:	4413      	add	r3, r2
 8000d00:	2200      	movs	r2, #0
 8000d02:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d0e:	4413      	add	r3, r2
 8000d10:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d1e:	440b      	add	r3, r1
 8000d20:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000d24:	e026      	b.n	8000d74 <main+0x6c8>
          case 5:
              set_green_led(0);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fc5a 	bl	80005e0 <set_green_led>
              if (elapsedStateTime[i] >= 1000) {
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d34:	4413      	add	r3, r2
 8000d36:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d3e:	f2c0 80fe 	blt.w	8000f3e <main+0x892>
                  elapsedStateTime[i] = 0;
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f843 2c34 	str.w	r2, [r3, #-52]
                  state[i] = 0;
 8000d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d5a:	4413      	add	r3, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
          }
          break;
 8000d62:	e0ec      	b.n	8000f3e <main+0x892>
              break;
 8000d64:	bf00      	nop
 8000d66:	e0ea      	b.n	8000f3e <main+0x892>
              break;
 8000d68:	bf00      	nop
 8000d6a:	e0e8      	b.n	8000f3e <main+0x892>
              break;
 8000d6c:	bf00      	nop
 8000d6e:	e0e6      	b.n	8000f3e <main+0x892>
              break;
 8000d70:	bf00      	nop
 8000d72:	e0e4      	b.n	8000f3e <main+0x892>
              break;
 8000d74:	bf00      	nop
          break;
 8000d76:	e0e2      	b.n	8000f3e <main+0x892>

      case 4:
          switch(state[i]) {
 8000d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d80:	4413      	add	r3, r2
 8000d82:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	f200 80dc 	bhi.w	8000f44 <main+0x898>
 8000d8c:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <main+0x6e8>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000da9 	.word	0x08000da9
 8000d98:	08000df7 	.word	0x08000df7
 8000d9c:	08000e4b 	.word	0x08000e4b
 8000da0:	08000e95 	.word	0x08000e95
 8000da4:	08000ee1 	.word	0x08000ee1
          case 0:
              set_red_led(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fc45 	bl	8000638 <set_red_led>

              if (elapsedStateTime[i] >= 1500) {
 8000dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000db6:	4413      	add	r3, r2
 8000db8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000dbc:	f240 52db 	movw	r2, #1499	; 0x5db
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	f340 80ab 	ble.w	8000f1c <main+0x870>
                  elapsedStateTime[i] = 0;
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000dce:	4413      	add	r3, r2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000dde:	4413      	add	r3, r2
 8000de0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000dee:	440b      	add	r3, r1
 8000df0:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000df4:	e092      	b.n	8000f1c <main+0x870>
          case 1:
              set_red_led(0);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fc1e 	bl	8000638 <set_red_led>
              set_yellow_led(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fc05 	bl	800060c <set_yellow_led>

              if (elapsedStateTime[i] >= 1500) {
 8000e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000e10:	f240 52db 	movw	r2, #1499	; 0x5db
 8000e14:	4293      	cmp	r3, r2
 8000e16:	f340 8083 	ble.w	8000f20 <main+0x874>
                  elapsedStateTime[i] = 0;
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e22:	4413      	add	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e32:	4413      	add	r3, r2
 8000e34:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000e42:	440b      	add	r3, r1
 8000e44:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000e48:	e06a      	b.n	8000f20 <main+0x874>
          case 2:
            	set_yellow_led(0);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fbde 	bl	800060c <set_yellow_led>

              if (elapsedStateTime[i] >= 1000) {
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e58:	4413      	add	r3, r2
 8000e5a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e62:	db5f      	blt.n	8000f24 <main+0x878>
                  elapsedStateTime[i] = 0;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e6c:	4413      	add	r3, r2
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000e8c:	440b      	add	r3, r1
 8000e8e:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000e92:	e047      	b.n	8000f24 <main+0x878>
          case 3:
              set_green_led(1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fba3 	bl	80005e0 <set_green_led>

              if (elapsedStateTime[i] >= 3000) {
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000ea8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000eac:	4293      	cmp	r3, r2
 8000eae:	dd3b      	ble.n	8000f28 <main+0x87c>
                  elapsedStateTime[i] = 0;
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000eb8:	4413      	add	r3, r2
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f843 2c34 	str.w	r2, [r3, #-52]
                  ++state[i];
 8000ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ec8:	4413      	add	r3, r2
 8000eca:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ed8:	440b      	add	r3, r1
 8000eda:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
              break;
 8000ede:	e023      	b.n	8000f28 <main+0x87c>
          case 4:
              set_green_led(0);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fb7d 	bl	80005e0 <set_green_led>
              if (elapsedStateTime[i] >= 1000) {
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000eee:	4413      	add	r3, r2
 8000ef0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ef8:	db24      	blt.n	8000f44 <main+0x898>
                  elapsedStateTime[i] = 0;
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	f843 2c34 	str.w	r2, [r3, #-52]
                  state[i] = 0;
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f12:	4413      	add	r3, r2
 8000f14:	2200      	movs	r2, #0
 8000f16:	f843 2c1c 	str.w	r2, [r3, #-28]
              }
          }
          break;
 8000f1a:	e013      	b.n	8000f44 <main+0x898>
              break;
 8000f1c:	bf00      	nop
 8000f1e:	e011      	b.n	8000f44 <main+0x898>
              break;
 8000f20:	bf00      	nop
 8000f22:	e00f      	b.n	8000f44 <main+0x898>
              break;
 8000f24:	bf00      	nop
 8000f26:	e00d      	b.n	8000f44 <main+0x898>
              break;
 8000f28:	bf00      	nop
          break;
 8000f2a:	e00b      	b.n	8000f44 <main+0x898>
          break;
 8000f2c:	bf00      	nop
 8000f2e:	f7ff bbe6 	b.w	80006fe <main+0x52>
          break;
 8000f32:	bf00      	nop
 8000f34:	f7ff bbe3 	b.w	80006fe <main+0x52>
          break;
 8000f38:	bf00      	nop
 8000f3a:	f7ff bbe0 	b.w	80006fe <main+0x52>
          break;
 8000f3e:	bf00      	nop
 8000f40:	f7ff bbdd 	b.w	80006fe <main+0x52>
          break;
 8000f44:	bf00      	nop
      if (is_btn_clicked(&lastPressTime)) {
 8000f46:	f7ff bbda 	b.w	80006fe <main+0x52>
 8000f4a:	bf00      	nop

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 f858 	bl	8002010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <SystemClock_Config+0xb8>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <SystemClock_Config+0xb8>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <SystemClock_Config+0xb8>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <SystemClock_Config+0xbc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f98:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <SystemClock_Config+0xbc>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <SystemClock_Config+0xbc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fbed 	bl	80017a0 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fcc:	f000 f81e 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fe50 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ff6:	f000 f809 	bl	800100c <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	; 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>
	...

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f890 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800110a:	f7ff ffd7 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f000 ff5b 	bl	8001fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff facb 	bl	80006ac <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001124:	08002058 	.word	0x08002058
  ldr r2, =_sbss
 8001128:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800112c:	2000002c 	.word	0x2000002c

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f90d 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff ff56 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f917 	bl	80013ca <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f8ed 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000028 	.word	0x20000028

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000028 	.word	0x20000028

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff47 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff5c 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffb0 	bl	8001338 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e177      	b.n	80016f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8166 	bne.w	80016ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	2b02      	cmp	r3, #2
 8001434:	d130      	bne.n	8001498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d017      	beq.n	80014d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d123      	bne.n	8001528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	69b9      	ldr	r1, [r7, #24]
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0203 	and.w	r2, r3, #3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80c0 	beq.w	80016ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_GPIO_Init+0x324>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001586:	4a61      	ldr	r2, [pc, #388]	; (800170c <HAL_GPIO_Init+0x328>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_GPIO_Init+0x32c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d037      	beq.n	8001622 <HAL_GPIO_Init+0x23e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_GPIO_Init+0x330>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d031      	beq.n	800161e <HAL_GPIO_Init+0x23a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a56      	ldr	r2, [pc, #344]	; (8001718 <HAL_GPIO_Init+0x334>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d02b      	beq.n	800161a <HAL_GPIO_Init+0x236>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a55      	ldr	r2, [pc, #340]	; (800171c <HAL_GPIO_Init+0x338>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x232>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a54      	ldr	r2, [pc, #336]	; (8001720 <HAL_GPIO_Init+0x33c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x22e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a53      	ldr	r2, [pc, #332]	; (8001724 <HAL_GPIO_Init+0x340>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x22a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_GPIO_Init+0x344>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x226>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a51      	ldr	r2, [pc, #324]	; (800172c <HAL_GPIO_Init+0x348>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x222>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a50      	ldr	r2, [pc, #320]	; (8001730 <HAL_GPIO_Init+0x34c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x21e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4f      	ldr	r2, [pc, #316]	; (8001734 <HAL_GPIO_Init+0x350>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x21a>
 80015fa:	2309      	movs	r3, #9
 80015fc:	e012      	b.n	8001624 <HAL_GPIO_Init+0x240>
 80015fe:	230a      	movs	r3, #10
 8001600:	e010      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001602:	2308      	movs	r3, #8
 8001604:	e00e      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001606:	2307      	movs	r3, #7
 8001608:	e00c      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800160a:	2306      	movs	r3, #6
 800160c:	e00a      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800160e:	2305      	movs	r3, #5
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001612:	2304      	movs	r3, #4
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x240>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x240>
 8001622:	2300      	movs	r3, #0
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x328>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001666:	4a34      	ldr	r2, [pc, #208]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_GPIO_Init+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001690:	4a29      	ldr	r2, [pc, #164]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_GPIO_Init+0x354>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_GPIO_Init+0x354>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_GPIO_Init+0x354>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_GPIO_Init+0x354>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	f67f ae84 	bls.w	8001400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40021000 	.word	0x40021000
 8001724:	40021400 	.word	0x40021400
 8001728:	40021800 	.word	0x40021800
 800172c:	40021c00 	.word	0x40021c00
 8001730:	40022000 	.word	0x40022000
 8001734:	40022400 	.word	0x40022400
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e001      	b.n	800175e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e264      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d075      	beq.n	80018aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017be:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d00c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4ba0      	ldr	r3, [pc, #640]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d112      	bne.n	80017fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b9d      	ldr	r3, [pc, #628]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e2:	d10b      	bne.n	80017fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	4b99      	ldr	r3, [pc, #612]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d05b      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d157      	bne.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e23f      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x74>
 8001806:	4b91      	ldr	r3, [pc, #580]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a90      	ldr	r2, [pc, #576]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e01d      	b.n	8001850 <HAL_RCC_OscConfig+0xb0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a8a      	ldr	r2, [pc, #552]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a87      	ldr	r2, [pc, #540]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xb0>
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a83      	ldr	r2, [pc, #524]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fcd2 	bl	8001200 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fcce 	bl	8001200 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e204      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xc0>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fcbe 	bl	8001200 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fcba 	bl	8001200 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1f0      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d063      	beq.n	800197e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d11c      	bne.n	8001908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d116      	bne.n	8001908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x152>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e1c4      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4952      	ldr	r1, [pc, #328]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	e03a      	b.n	800197e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_RCC_OscConfig+0x2b0>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fc73 	bl	8001200 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fc6f 	bl	8001200 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1a5      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4940      	ldr	r1, [pc, #256]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x2b0>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fc52 	bl	8001200 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fc4e 	bl	8001200 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e184      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d030      	beq.n	80019ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x2b4>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff fc32 	bl	8001200 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc2e 	bl	8001200 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e164      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x200>
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x2b4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fc1b 	bl	8001200 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fc17 	bl	8001200 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e14d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a0 	beq.w	8001b3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_OscConfig+0x2b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_RCC_OscConfig+0x2b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_RCC_OscConfig+0x2b8>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fbdd 	bl	8001200 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e011      	b.n	8001a6e <HAL_RCC_OscConfig+0x2ce>
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
 8001a58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff fbd0 	bl	8001200 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e106      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x4e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
 8001a82:	4b81      	ldr	r3, [pc, #516]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8e:	e01c      	b.n	8001aca <HAL_RCC_OscConfig+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001a98:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a7a      	ldr	r2, [pc, #488]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e00b      	b.n	8001aca <HAL_RCC_OscConfig+0x32a>
 8001ab2:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d015      	beq.n	8001afe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fb95 	bl	8001200 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff fb91 	bl	8001200 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0c5      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ee      	beq.n	8001ada <HAL_RCC_OscConfig+0x33a>
 8001afc:	e014      	b.n	8001b28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb7f 	bl	8001200 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fb7b 	bl	8001200 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0af      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ee      	bne.n	8001b06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2e:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a55      	ldr	r2, [pc, #340]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 809b 	beq.w	8001c7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d05c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d141      	bne.n	8001bdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fb4f 	bl	8001200 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff fb4b 	bl	8001200 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e081      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
 8001ba8:	4937      	ldr	r1, [pc, #220]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb24 	bl	8001200 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff fb20 	bl	8001200 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e056      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x41c>
 8001bda:	e04e      	b.n	8001c7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fb0d 	bl	8001200 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff fb09 	bl	8001200 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e03f      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x44a>
 8001c08:	e037      	b.n	8001c7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e032      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d028      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d121      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d11a      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d111      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40007000 	.word	0x40007000
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	42470060 	.word	0x42470060

08001c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0cc      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d90c      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d044      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d119      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e067      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4934      	ldr	r1, [pc, #208]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff fa3e 	bl	8001200 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff fa3a 	bl	8001200 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e04f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d20c      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f99e 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08002038 	.word	0x08002038
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e62:	2100      	movs	r1, #0
 8001e64:	6079      	str	r1, [r7, #4]
 8001e66:	2100      	movs	r1, #0
 8001e68:	60f9      	str	r1, [r7, #12]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e6e:	2100      	movs	r1, #0
 8001e70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e72:	4952      	ldr	r1, [pc, #328]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001e74:	6889      	ldr	r1, [r1, #8]
 8001e76:	f001 010c 	and.w	r1, r1, #12
 8001e7a:	2908      	cmp	r1, #8
 8001e7c:	d00d      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x3e>
 8001e7e:	2908      	cmp	r1, #8
 8001e80:	f200 8094 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x150>
 8001e84:	2900      	cmp	r1, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x32>
 8001e88:	2904      	cmp	r1, #4
 8001e8a:	d003      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x38>
 8001e8c:	e08e      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e90:	60bb      	str	r3, [r7, #8]
       break;
 8001e92:	e08e      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e96:	60bb      	str	r3, [r7, #8]
      break;
 8001e98:	e08b      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9a:	4948      	ldr	r1, [pc, #288]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9c:	6849      	ldr	r1, [r1, #4]
 8001e9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ea2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea4:	4945      	ldr	r1, [pc, #276]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea6:	6849      	ldr	r1, [r1, #4]
 8001ea8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001eac:	2900      	cmp	r1, #0
 8001eae:	d024      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb0:	4942      	ldr	r1, [pc, #264]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001eb2:	6849      	ldr	r1, [r1, #4]
 8001eb4:	0989      	lsrs	r1, r1, #6
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ec0:	f04f 0500 	mov.w	r5, #0
 8001ec4:	ea00 0204 	and.w	r2, r0, r4
 8001ec8:	ea01 0305 	and.w	r3, r1, r5
 8001ecc:	493d      	ldr	r1, [pc, #244]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ece:	fb01 f003 	mul.w	r0, r1, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	fb01 f102 	mul.w	r1, r1, r2
 8001ed8:	1844      	adds	r4, r0, r1
 8001eda:	493a      	ldr	r1, [pc, #232]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001edc:	fba2 0101 	umull	r0, r1, r2, r1
 8001ee0:	1863      	adds	r3, r4, r1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f7fe f97e 	bl	80001ec <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e04a      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	461a      	mov	r2, r3
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	ea02 0400 	and.w	r4, r2, r0
 8001f12:	ea03 0501 	and.w	r5, r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	014b      	lsls	r3, r1, #5
 8001f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f28:	0142      	lsls	r2, r0, #5
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	1b00      	subs	r0, r0, r4
 8001f30:	eb61 0105 	sbc.w	r1, r1, r5
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	018b      	lsls	r3, r1, #6
 8001f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f42:	0182      	lsls	r2, r0, #6
 8001f44:	1a12      	subs	r2, r2, r0
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	00d9      	lsls	r1, r3, #3
 8001f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f58:	00d0      	lsls	r0, r2, #3
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	1912      	adds	r2, r2, r4
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0299      	lsls	r1, r3, #10
 8001f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f72:	0290      	lsls	r0, r2, #10
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	f7fe f932 	bl	80001ec <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fae:	60bb      	str	r3, [r7, #8]
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	017d7840 	.word	0x017d7840

08001fc8 <__libc_init_array>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4d0d      	ldr	r5, [pc, #52]	; (8002000 <__libc_init_array+0x38>)
 8001fcc:	4c0d      	ldr	r4, [pc, #52]	; (8002004 <__libc_init_array+0x3c>)
 8001fce:	1b64      	subs	r4, r4, r5
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	42a6      	cmp	r6, r4
 8001fd6:	d109      	bne.n	8001fec <__libc_init_array+0x24>
 8001fd8:	4d0b      	ldr	r5, [pc, #44]	; (8002008 <__libc_init_array+0x40>)
 8001fda:	4c0c      	ldr	r4, [pc, #48]	; (800200c <__libc_init_array+0x44>)
 8001fdc:	f000 f820 	bl	8002020 <_init>
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	42a6      	cmp	r6, r4
 8001fe8:	d105      	bne.n	8001ff6 <__libc_init_array+0x2e>
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff0:	4798      	blx	r3
 8001ff2:	3601      	adds	r6, #1
 8001ff4:	e7ee      	b.n	8001fd4 <__libc_init_array+0xc>
 8001ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffa:	4798      	blx	r3
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	e7f2      	b.n	8001fe6 <__libc_init_array+0x1e>
 8002000:	08002050 	.word	0x08002050
 8002004:	08002050 	.word	0x08002050
 8002008:	08002050 	.word	0x08002050
 800200c:	08002054 	.word	0x08002054

08002010 <memset>:
 8002010:	4402      	add	r2, r0
 8002012:	4603      	mov	r3, r0
 8002014:	4293      	cmp	r3, r2
 8002016:	d100      	bne.n	800201a <memset+0xa>
 8002018:	4770      	bx	lr
 800201a:	f803 1b01 	strb.w	r1, [r3], #1
 800201e:	e7f9      	b.n	8002014 <memset+0x4>

08002020 <_init>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	bf00      	nop
 8002024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002026:	bc08      	pop	{r3}
 8002028:	469e      	mov	lr, r3
 800202a:	4770      	bx	lr

0800202c <_fini>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	bf00      	nop
 8002030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002032:	bc08      	pop	{r3}
 8002034:	469e      	mov	lr, r3
 8002036:	4770      	bx	lr
